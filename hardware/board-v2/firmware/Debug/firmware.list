
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006070  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001634  08006130  08006130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007764  08007764  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08007764  08007764  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007764  08007764  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007764  08007764  00017764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007768  08007768  00017768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800776c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002098  2000001c  08007788  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020b4  08007788  000220b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3bc  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038cf  00000000  00000000  0003b400  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  0003ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001630  00000000  00000000  00040488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012e1b  00000000  00000000  00041ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013ec0  00000000  00000000  000548d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072b27  00000000  00000000  00068793  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db2ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005574  00000000  00000000  000db338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006118 	.word	0x08006118

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08006118 	.word	0x08006118

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <add_button>:
 */


#include "buttons.h"

void add_button(buttons * obj, uint16_t pin, GPIO_TypeDef * port) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	607a      	str	r2, [r7, #4]
 800022a:	200a      	movs	r0, #10
 800022c:	183b      	adds	r3, r7, r0
 800022e:	1c0a      	adds	r2, r1, #0
 8000230:	801a      	strh	r2, [r3, #0]
	obj->btn[obj->cursor].pin = pin;
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	2224      	movs	r2, #36	; 0x24
 8000236:	5c9b      	ldrb	r3, [r3, r2]
 8000238:	0019      	movs	r1, r3
 800023a:	68fa      	ldr	r2, [r7, #12]
 800023c:	000b      	movs	r3, r1
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	185b      	adds	r3, r3, r1
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	1839      	adds	r1, r7, r0
 8000246:	8809      	ldrh	r1, [r1, #0]
 8000248:	5299      	strh	r1, [r3, r2]
	obj->btn[obj->cursor].port = port;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2224      	movs	r2, #36	; 0x24
 800024e:	5c9b      	ldrb	r3, [r3, r2]
 8000250:	0019      	movs	r1, r3
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	000b      	movs	r3, r1
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	185b      	adds	r3, r3, r1
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	18d3      	adds	r3, r2, r3
 800025e:	3304      	adds	r3, #4
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	601a      	str	r2, [r3, #0]
	obj->btn[obj->cursor].digital_state = 1; //1 means released, no macros deliberately
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	2224      	movs	r2, #36	; 0x24
 8000268:	5c9b      	ldrb	r3, [r3, r2]
 800026a:	0019      	movs	r1, r3
 800026c:	68fa      	ldr	r2, [r7, #12]
 800026e:	000b      	movs	r3, r1
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	185b      	adds	r3, r3, r1
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	18d3      	adds	r3, r2, r3
 8000278:	3309      	adds	r3, #9
 800027a:	2201      	movs	r2, #1
 800027c:	701a      	strb	r2, [r3, #0]
	obj->btn[obj->cursor].is_clicked = 0;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	2224      	movs	r2, #36	; 0x24
 8000282:	5c9b      	ldrb	r3, [r3, r2]
 8000284:	0019      	movs	r1, r3
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	000b      	movs	r3, r1
 800028a:	005b      	lsls	r3, r3, #1
 800028c:	185b      	adds	r3, r3, r1
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	18d3      	adds	r3, r2, r3
 8000292:	330a      	adds	r3, #10
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
	obj->btn[obj->cursor].bounce_analog_state = BOUNCE_SAMPLES; // maximum released state
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	2224      	movs	r2, #36	; 0x24
 800029c:	5c9b      	ldrb	r3, [r3, r2]
 800029e:	0019      	movs	r1, r3
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	000b      	movs	r3, r1
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	185b      	adds	r3, r3, r1
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	18d3      	adds	r3, r2, r3
 80002ac:	3308      	adds	r3, #8
 80002ae:	2203      	movs	r2, #3
 80002b0:	701a      	strb	r2, [r3, #0]
	obj->cursor = obj->cursor + 1;
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	2224      	movs	r2, #36	; 0x24
 80002b6:	5c9b      	ldrb	r3, [r3, r2]
 80002b8:	3301      	adds	r3, #1
 80002ba:	b2d9      	uxtb	r1, r3
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	2224      	movs	r2, #36	; 0x24
 80002c0:	5499      	strb	r1, [r3, r2]
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	b004      	add	sp, #16
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <init_buttons>:

void init_buttons(buttons * obj) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	obj->cursor = 0;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2224      	movs	r2, #36	; 0x24
 80002d8:	2100      	movs	r1, #0
 80002da:	5499      	strb	r1, [r3, r2]
	add_button(obj, BUTTON_1_Pin, BUTTON_1_GPIO_Port);
 80002dc:	4a0c      	ldr	r2, [pc, #48]	; (8000310 <init_buttons+0x44>)
 80002de:	2380      	movs	r3, #128	; 0x80
 80002e0:	0199      	lsls	r1, r3, #6
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	0018      	movs	r0, r3
 80002e6:	f7ff ff9b 	bl	8000220 <add_button>
	add_button(obj, BUTTON_2_Pin, BUTTON_2_GPIO_Port);
 80002ea:	4a09      	ldr	r2, [pc, #36]	; (8000310 <init_buttons+0x44>)
 80002ec:	2380      	movs	r3, #128	; 0x80
 80002ee:	01d9      	lsls	r1, r3, #7
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	0018      	movs	r0, r3
 80002f4:	f7ff ff94 	bl	8000220 <add_button>
	add_button(obj, BUTTON_3_Pin, BUTTON_3_GPIO_Port);
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <init_buttons+0x44>)
 80002fa:	2380      	movs	r3, #128	; 0x80
 80002fc:	0219      	lsls	r1, r3, #8
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	0018      	movs	r0, r3
 8000302:	f7ff ff8d 	bl	8000220 <add_button>
}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b002      	add	sp, #8
 800030c:	bd80      	pop	{r7, pc}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	48000800 	.word	0x48000800

08000314 <update_button>:

void update_button(button * obj) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin (obj->port, obj->pin)) {
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685a      	ldr	r2, [r3, #4]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	0019      	movs	r1, r3
 8000326:	0010      	movs	r0, r2
 8000328:	f001 fc86 	bl	8001c38 <HAL_GPIO_ReadPin>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d018      	beq.n	8000362 <update_button+0x4e>
	  // positive value is when a button released
	  obj->bounce_analog_state++;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	7a1b      	ldrb	r3, [r3, #8]
 8000334:	b25b      	sxtb	r3, r3
 8000336:	b2db      	uxtb	r3, r3
 8000338:	3301      	adds	r3, #1
 800033a:	b2db      	uxtb	r3, r3
 800033c:	b25a      	sxtb	r2, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	721a      	strb	r2, [r3, #8]
	  if (obj->bounce_analog_state >= BOUNCE_SAMPLES) {
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	7a1b      	ldrb	r3, [r3, #8]
 8000346:	b25b      	sxtb	r3, r3
 8000348:	2b02      	cmp	r3, #2
 800034a:	dd25      	ble.n	8000398 <update_button+0x84>
		  // really released the button
		  obj->bounce_analog_state = BOUNCE_SAMPLES;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2203      	movs	r2, #3
 8000350:	721a      	strb	r2, [r3, #8]
		  if(!obj->digital_state) {
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	7a5b      	ldrb	r3, [r3, #9]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d11e      	bne.n	8000398 <update_button+0x84>
			  obj->digital_state = 1;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2201      	movs	r2, #1
 800035e:	725a      	strb	r2, [r3, #9]
			  obj->digital_state = 0;
			  obj->is_clicked = 1;
		  }
	  }
  }
}
 8000360:	e01a      	b.n	8000398 <update_button+0x84>
	  obj->bounce_analog_state--;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	7a1b      	ldrb	r3, [r3, #8]
 8000366:	b25b      	sxtb	r3, r3
 8000368:	b2db      	uxtb	r3, r3
 800036a:	3b01      	subs	r3, #1
 800036c:	b2db      	uxtb	r3, r3
 800036e:	b25a      	sxtb	r2, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	721a      	strb	r2, [r3, #8]
	  if (obj->bounce_analog_state<=0) {
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	7a1b      	ldrb	r3, [r3, #8]
 8000378:	b25b      	sxtb	r3, r3
 800037a:	2b00      	cmp	r3, #0
 800037c:	dc0c      	bgt.n	8000398 <update_button+0x84>
		  obj->bounce_analog_state = 0;
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2200      	movs	r2, #0
 8000382:	721a      	strb	r2, [r3, #8]
		  if(obj->digital_state) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	7a5b      	ldrb	r3, [r3, #9]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d005      	beq.n	8000398 <update_button+0x84>
			  obj->digital_state = 0;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2200      	movs	r2, #0
 8000390:	725a      	strb	r2, [r3, #9]
			  obj->is_clicked = 1;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	2201      	movs	r2, #1
 8000396:	729a      	strb	r2, [r3, #10]
}
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	46bd      	mov	sp, r7
 800039c:	b002      	add	sp, #8
 800039e:	bd80      	pop	{r7, pc}

080003a0 <SSD1306_Init>:
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
        }
    }
}

uint8_t SSD1306_Init(void) {
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
    mirrored_x = 1;
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <SSD1306_Init+0x64>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	701a      	strb	r2, [r3, #0]
    mirrored_y = 1;
 80003ac:	4b16      	ldr	r3, [pc, #88]	; (8000408 <SSD1306_Init+0x68>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	701a      	strb	r2, [r3, #0]
	/* Init I2C - just a delay */
	ssd1306_I2C_Init();
 80003b2:	f000 f9fd 	bl	80007b0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <SSD1306_Init+0x6c>)
 80003b8:	4815      	ldr	r0, [pc, #84]	; (8000410 <SSD1306_Init+0x70>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	2178      	movs	r1, #120	; 0x78
 80003be:	f001 fe13 	bl	8001fe8 <HAL_I2C_IsDeviceReady>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <SSD1306_Init+0x2a>
		/* Return false */
		return 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	e017      	b.n	80003fa <SSD1306_Init+0x5a>
	}

	/* A little delay */
	uint32_t p = 2500;
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <SSD1306_Init+0x74>)
 80003cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80003ce:	e002      	b.n	80003d6 <SSD1306_Init+0x36>
		p--;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d1f9      	bne.n	80003d0 <SSD1306_Init+0x30>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80003dc:	22ae      	movs	r2, #174	; 0xae
 80003de:	2100      	movs	r1, #0
 80003e0:	2078      	movs	r0, #120	; 0x78
 80003e2:	f000 fa75 	bl	80008d0 <ssd1306_I2C_Write>

	/* Update screen */
	//SSD1306_UpdateScreen();

	/* Set default values */
	SSD1306.CurrentX = 0;
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <SSD1306_Init+0x78>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <SSD1306_Init+0x78>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <SSD1306_Init+0x78>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80003f8:	2301      	movs	r3, #1
}
 80003fa:	0018      	movs	r0, r3
 80003fc:	46bd      	mov	sp, r7
 80003fe:	b002      	add	sp, #8
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	20000438 	.word	0x20000438
 8000408:	20000439 	.word	0x20000439
 800040c:	00004e20 	.word	0x00004e20
 8000410:	20001dd0 	.word	0x20001dd0
 8000414:	000009c4 	.word	0x000009c4
 8000418:	2000043c 	.word	0x2000043c

0800041c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000422:	1dfb      	adds	r3, r7, #7
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
 8000428:	e021      	b.n	800046e <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m + 0);
 800042a:	1dfb      	adds	r3, r7, #7
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	3b50      	subs	r3, #80	; 0x50
 8000430:	b2db      	uxtb	r3, r3
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	2078      	movs	r0, #120	; 0x78
 8000438:	f000 fa4a 	bl	80008d0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800043c:	2200      	movs	r2, #0
 800043e:	2100      	movs	r1, #0
 8000440:	2078      	movs	r0, #120	; 0x78
 8000442:	f000 fa45 	bl	80008d0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000446:	2210      	movs	r2, #16
 8000448:	2100      	movs	r1, #0
 800044a:	2078      	movs	r0, #120	; 0x78
 800044c:	f000 fa40 	bl	80008d0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000450:	1dfb      	adds	r3, r7, #7
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	01da      	lsls	r2, r3, #7
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <SSD1306_UpdateScreen+0x64>)
 8000458:	18d2      	adds	r2, r2, r3
 800045a:	2380      	movs	r3, #128	; 0x80
 800045c:	2140      	movs	r1, #64	; 0x40
 800045e:	2078      	movs	r0, #120	; 0x78
 8000460:	f000 f9b8 	bl	80007d4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000464:	1dfb      	adds	r3, r7, #7
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	1dfb      	adds	r3, r7, #7
 800046a:	3201      	adds	r2, #1
 800046c:	701a      	strb	r2, [r3, #0]
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b07      	cmp	r3, #7
 8000474:	d9d9      	bls.n	800042a <SSD1306_UpdateScreen+0xe>
	}
}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	20000038 	.word	0x20000038

08000484 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	0002      	movs	r2, r0
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d101      	bne.n	800049c <SSD1306_Fill+0x18>
 8000498:	2100      	movs	r1, #0
 800049a:	e000      	b.n	800049e <SSD1306_Fill+0x1a>
 800049c:	21ff      	movs	r1, #255	; 0xff
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	00da      	lsls	r2, r3, #3
 80004a2:	4b04      	ldr	r3, [pc, #16]	; (80004b4 <SSD1306_Fill+0x30>)
 80004a4:	0018      	movs	r0, r3
 80004a6:	f005 fe2e 	bl	8006106 <memset>
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b002      	add	sp, #8
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	20000038 	.word	0x20000038

080004b8 <SSD1306_Mirror>:
void SSD1306_Mirror(uint8_t new_mirror_x, uint8_t new_mirror_y) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	0002      	movs	r2, r0
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	1dbb      	adds	r3, r7, #6
 80004c6:	1c0a      	adds	r2, r1, #0
 80004c8:	701a      	strb	r2, [r3, #0]
	mirrored_x = new_mirror_x;
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <SSD1306_Mirror+0x2c>)
 80004cc:	1dfa      	adds	r2, r7, #7
 80004ce:	7812      	ldrb	r2, [r2, #0]
 80004d0:	701a      	strb	r2, [r3, #0]
	mirrored_y = new_mirror_y;
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <SSD1306_Mirror+0x30>)
 80004d4:	1dba      	adds	r2, r7, #6
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	701a      	strb	r2, [r3, #0]
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	20000438 	.word	0x20000438
 80004e8:	20000439 	.word	0x20000439

080004ec <SSD1306_DrawPixel>:
void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	0004      	movs	r4, r0
 80004f4:	0008      	movs	r0, r1
 80004f6:	0011      	movs	r1, r2
 80004f8:	1dbb      	adds	r3, r7, #6
 80004fa:	1c22      	adds	r2, r4, #0
 80004fc:	801a      	strh	r2, [r3, #0]
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	1c02      	adds	r2, r0, #0
 8000502:	801a      	strh	r2, [r3, #0]
 8000504:	1cfb      	adds	r3, r7, #3
 8000506:	1c0a      	adds	r2, r1, #0
 8000508:	701a      	strb	r2, [r3, #0]
	// Let's rotate the screen;
	if(mirrored_x) {
 800050a:	4b37      	ldr	r3, [pc, #220]	; (80005e8 <SSD1306_DrawPixel+0xfc>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d005      	beq.n	800051e <SSD1306_DrawPixel+0x32>
		x = 127 - x;
 8000512:	1dbb      	adds	r3, r7, #6
 8000514:	1dba      	adds	r2, r7, #6
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	217f      	movs	r1, #127	; 0x7f
 800051a:	1a8a      	subs	r2, r1, r2
 800051c:	801a      	strh	r2, [r3, #0]
	}
	if(mirrored_y) {
 800051e:	4b33      	ldr	r3, [pc, #204]	; (80005ec <SSD1306_DrawPixel+0x100>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d005      	beq.n	8000532 <SSD1306_DrawPixel+0x46>
		y = 63 - y;
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	1d3a      	adds	r2, r7, #4
 800052a:	8812      	ldrh	r2, [r2, #0]
 800052c:	213f      	movs	r1, #63	; 0x3f
 800052e:	1a8a      	subs	r2, r1, r2
 8000530:	801a      	strh	r2, [r3, #0]
	}
	if (
 8000532:	1dbb      	adds	r3, r7, #6
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	2b7f      	cmp	r3, #127	; 0x7f
 8000538:	d852      	bhi.n	80005e0 <SSD1306_DrawPixel+0xf4>
		x >= SSD1306_WIDTH ||
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	2b3f      	cmp	r3, #63	; 0x3f
 8000540:	d84e      	bhi.n	80005e0 <SSD1306_DrawPixel+0xf4>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000542:	4b2b      	ldr	r3, [pc, #172]	; (80005f0 <SSD1306_DrawPixel+0x104>)
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d006      	beq.n	8000558 <SSD1306_DrawPixel+0x6c>
		color = (SSD1306_COLOR_t)!color;
 800054a:	1cfb      	adds	r3, r7, #3
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	425a      	negs	r2, r3
 8000550:	4153      	adcs	r3, r2
 8000552:	b2da      	uxtb	r2, r3
 8000554:	1cfb      	adds	r3, r7, #3
 8000556:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000558:	1cfb      	adds	r3, r7, #3
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d11e      	bne.n	800059e <SSD1306_DrawPixel+0xb2>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000560:	1dbb      	adds	r3, r7, #6
 8000562:	881a      	ldrh	r2, [r3, #0]
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	08db      	lsrs	r3, r3, #3
 800056a:	b298      	uxth	r0, r3
 800056c:	0003      	movs	r3, r0
 800056e:	01db      	lsls	r3, r3, #7
 8000570:	18d3      	adds	r3, r2, r3
 8000572:	4a20      	ldr	r2, [pc, #128]	; (80005f4 <SSD1306_DrawPixel+0x108>)
 8000574:	5cd3      	ldrb	r3, [r2, r3]
 8000576:	b25a      	sxtb	r2, r3
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	2107      	movs	r1, #7
 800057e:	400b      	ands	r3, r1
 8000580:	2101      	movs	r1, #1
 8000582:	4099      	lsls	r1, r3
 8000584:	000b      	movs	r3, r1
 8000586:	b25b      	sxtb	r3, r3
 8000588:	4313      	orrs	r3, r2
 800058a:	b259      	sxtb	r1, r3
 800058c:	1dbb      	adds	r3, r7, #6
 800058e:	881a      	ldrh	r2, [r3, #0]
 8000590:	0003      	movs	r3, r0
 8000592:	01db      	lsls	r3, r3, #7
 8000594:	18d3      	adds	r3, r2, r3
 8000596:	b2c9      	uxtb	r1, r1
 8000598:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <SSD1306_DrawPixel+0x108>)
 800059a:	54d1      	strb	r1, [r2, r3]
 800059c:	e021      	b.n	80005e2 <SSD1306_DrawPixel+0xf6>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800059e:	1dbb      	adds	r3, r7, #6
 80005a0:	881a      	ldrh	r2, [r3, #0]
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	08db      	lsrs	r3, r3, #3
 80005a8:	b298      	uxth	r0, r3
 80005aa:	0003      	movs	r3, r0
 80005ac:	01db      	lsls	r3, r3, #7
 80005ae:	18d3      	adds	r3, r2, r3
 80005b0:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <SSD1306_DrawPixel+0x108>)
 80005b2:	5cd3      	ldrb	r3, [r2, r3]
 80005b4:	b25b      	sxtb	r3, r3
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	8812      	ldrh	r2, [r2, #0]
 80005ba:	2107      	movs	r1, #7
 80005bc:	400a      	ands	r2, r1
 80005be:	2101      	movs	r1, #1
 80005c0:	4091      	lsls	r1, r2
 80005c2:	000a      	movs	r2, r1
 80005c4:	b252      	sxtb	r2, r2
 80005c6:	43d2      	mvns	r2, r2
 80005c8:	b252      	sxtb	r2, r2
 80005ca:	4013      	ands	r3, r2
 80005cc:	b259      	sxtb	r1, r3
 80005ce:	1dbb      	adds	r3, r7, #6
 80005d0:	881a      	ldrh	r2, [r3, #0]
 80005d2:	0003      	movs	r3, r0
 80005d4:	01db      	lsls	r3, r3, #7
 80005d6:	18d3      	adds	r3, r2, r3
 80005d8:	b2c9      	uxtb	r1, r1
 80005da:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <SSD1306_DrawPixel+0x108>)
 80005dc:	54d1      	strb	r1, [r2, r3]
 80005de:	e000      	b.n	80005e2 <SSD1306_DrawPixel+0xf6>
		return;
 80005e0:	46c0      	nop			; (mov r8, r8)
	}
}
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b003      	add	sp, #12
 80005e6:	bd90      	pop	{r4, r7, pc}
 80005e8:	20000438 	.word	0x20000438
 80005ec:	20000439 	.word	0x20000439
 80005f0:	2000043c 	.word	0x2000043c
 80005f4:	20000038 	.word	0x20000038

080005f8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	0002      	movs	r2, r0
 8000600:	1dbb      	adds	r3, r7, #6
 8000602:	801a      	strh	r2, [r3, #0]
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	1c0a      	adds	r2, r1, #0
 8000608:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <SSD1306_GotoXY+0x2c>)
 800060c:	1dba      	adds	r2, r7, #6
 800060e:	8812      	ldrh	r2, [r2, #0]
 8000610:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <SSD1306_GotoXY+0x2c>)
 8000614:	1d3a      	adds	r2, r7, #4
 8000616:	8812      	ldrh	r2, [r2, #0]
 8000618:	805a      	strh	r2, [r3, #2]
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b002      	add	sp, #8
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	2000043c 	.word	0x2000043c

08000628 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6039      	str	r1, [r7, #0]
 8000630:	0011      	movs	r1, r2
 8000632:	1dfb      	adds	r3, r7, #7
 8000634:	1c02      	adds	r2, r0, #0
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	1dbb      	adds	r3, r7, #6
 800063a:	1c0a      	adds	r2, r1, #0
 800063c:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800063e:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <SSD1306_Putc+0x100>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	001a      	movs	r2, r3
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	18d3      	adds	r3, r2, r3
	if (
 800064a:	2b7f      	cmp	r3, #127	; 0x7f
 800064c:	dc07      	bgt.n	800065e <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800064e:	4b36      	ldr	r3, [pc, #216]	; (8000728 <SSD1306_Putc+0x100>)
 8000650:	885b      	ldrh	r3, [r3, #2]
 8000652:	001a      	movs	r2, r3
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	785b      	ldrb	r3, [r3, #1]
 8000658:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800065a:	2b3f      	cmp	r3, #63	; 0x3f
 800065c:	dd01      	ble.n	8000662 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 800065e:	2300      	movs	r3, #0
 8000660:	e05e      	b.n	8000720 <SSD1306_Putc+0xf8>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	e04a      	b.n	80006fe <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	3b20      	subs	r3, #32
 8000672:	6839      	ldr	r1, [r7, #0]
 8000674:	7849      	ldrb	r1, [r1, #1]
 8000676:	434b      	muls	r3, r1
 8000678:	0019      	movs	r1, r3
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	18cb      	adds	r3, r1, r3
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	18d3      	adds	r3, r2, r3
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	e02f      	b.n	80006ec <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	409a      	lsls	r2, r3
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	4013      	ands	r3, r2
 8000698:	d011      	beq.n	80006be <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800069a:	4b23      	ldr	r3, [pc, #140]	; (8000728 <SSD1306_Putc+0x100>)
 800069c:	881a      	ldrh	r2, [r3, #0]
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	18d3      	adds	r3, r2, r3
 80006a4:	b298      	uxth	r0, r3
 80006a6:	4b20      	ldr	r3, [pc, #128]	; (8000728 <SSD1306_Putc+0x100>)
 80006a8:	885a      	ldrh	r2, [r3, #2]
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	18d3      	adds	r3, r2, r3
 80006b0:	b299      	uxth	r1, r3
 80006b2:	1dbb      	adds	r3, r7, #6
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	001a      	movs	r2, r3
 80006b8:	f7ff ff18 	bl	80004ec <SSD1306_DrawPixel>
 80006bc:	e013      	b.n	80006e6 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80006be:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <SSD1306_Putc+0x100>)
 80006c0:	881a      	ldrh	r2, [r3, #0]
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	18d3      	adds	r3, r2, r3
 80006c8:	b298      	uxth	r0, r3
 80006ca:	4b17      	ldr	r3, [pc, #92]	; (8000728 <SSD1306_Putc+0x100>)
 80006cc:	885a      	ldrh	r2, [r3, #2]
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	18d3      	adds	r3, r2, r3
 80006d4:	b299      	uxth	r1, r3
 80006d6:	1dbb      	adds	r3, r7, #6
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	425a      	negs	r2, r3
 80006dc:	4153      	adcs	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	001a      	movs	r2, r3
 80006e2:	f7ff ff03 	bl	80004ec <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	3301      	adds	r3, #1
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	001a      	movs	r2, r3
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d3c9      	bcc.n	800068c <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	3301      	adds	r3, #1
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	001a      	movs	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4293      	cmp	r3, r2
 8000708:	d3ae      	bcc.n	8000668 <SSD1306_Putc+0x40>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <SSD1306_Putc+0x100>)
 800070c:	881a      	ldrh	r2, [r3, #0]
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b29b      	uxth	r3, r3
 8000714:	18d3      	adds	r3, r2, r3
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <SSD1306_Putc+0x100>)
 800071a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	781b      	ldrb	r3, [r3, #0]
}
 8000720:	0018      	movs	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	b006      	add	sp, #24
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000043c 	.word	0x2000043c

0800072c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 800073a:	e013      	b.n	8000764 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	7818      	ldrb	r0, [r3, #0]
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	0019      	movs	r1, r3
 8000748:	f7ff ff6e 	bl	8000628 <SSD1306_Putc>
 800074c:	0003      	movs	r3, r0
 800074e:	001a      	movs	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d002      	beq.n	800075e <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	e008      	b.n	8000770 <SSD1306_Puts+0x44>
		}

		/* Increase string pointer */
		str++;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	3301      	adds	r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1e7      	bne.n	800073c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	781b      	ldrb	r3, [r3, #0]
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b004      	add	sp, #16
 8000776:	bd80      	pop	{r7, pc}

08000778 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff fe81 	bl	8000484 <SSD1306_Fill>
    //SSD1306_UpdateScreen();
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <SSD1306_ON>:
void SSD1306_ON(void) {
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(0x8D);
 800078c:	228d      	movs	r2, #141	; 0x8d
 800078e:	2100      	movs	r1, #0
 8000790:	2078      	movs	r0, #120	; 0x78
 8000792:	f000 f89d 	bl	80008d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8000796:	2214      	movs	r2, #20
 8000798:	2100      	movs	r1, #0
 800079a:	2078      	movs	r0, #120	; 0x78
 800079c:	f000 f898 	bl	80008d0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 80007a0:	22af      	movs	r2, #175	; 0xaf
 80007a2:	2100      	movs	r1, #0
 80007a4:	2078      	movs	r0, #120	; 0x78
 80007a6:	f000 f893 	bl	80008d0 <ssd1306_I2C_Write>
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <ssd1306_I2C_Init+0x20>)
 80007b8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007ba:	e002      	b.n	80007c2 <ssd1306_I2C_Init+0x12>
		p--;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1f9      	bne.n	80007bc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	b002      	add	sp, #8
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	0003d090 	.word	0x0003d090

080007d4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b0c7      	sub	sp, #284	; 0x11c
 80007d8:	af02      	add	r7, sp, #8
 80007da:	0004      	movs	r4, r0
 80007dc:	0008      	movs	r0, r1
 80007de:	603a      	str	r2, [r7, #0]
 80007e0:	0019      	movs	r1, r3
 80007e2:	4b36      	ldr	r3, [pc, #216]	; (80008bc <ssd1306_I2C_WriteMulti+0xe8>)
 80007e4:	2288      	movs	r2, #136	; 0x88
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	4694      	mov	ip, r2
 80007ea:	44bc      	add	ip, r7
 80007ec:	4463      	add	r3, ip
 80007ee:	1c22      	adds	r2, r4, #0
 80007f0:	701a      	strb	r2, [r3, #0]
 80007f2:	4b33      	ldr	r3, [pc, #204]	; (80008c0 <ssd1306_I2C_WriteMulti+0xec>)
 80007f4:	2288      	movs	r2, #136	; 0x88
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	4694      	mov	ip, r2
 80007fa:	44bc      	add	ip, r7
 80007fc:	4463      	add	r3, ip
 80007fe:	1c02      	adds	r2, r0, #0
 8000800:	701a      	strb	r2, [r3, #0]
 8000802:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <ssd1306_I2C_WriteMulti+0xf0>)
 8000804:	2288      	movs	r2, #136	; 0x88
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	4694      	mov	ip, r2
 800080a:	44bc      	add	ip, r7
 800080c:	4463      	add	r3, ip
 800080e:	1c0a      	adds	r2, r1, #0
 8000810:	801a      	strh	r2, [r3, #0]
  uint8_t dt[256];
  dt[0] = reg;
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <ssd1306_I2C_WriteMulti+0xf4>)
 8000814:	2288      	movs	r2, #136	; 0x88
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	4694      	mov	ip, r2
 800081a:	44bc      	add	ip, r7
 800081c:	4463      	add	r3, ip
 800081e:	4a28      	ldr	r2, [pc, #160]	; (80008c0 <ssd1306_I2C_WriteMulti+0xec>)
 8000820:	2188      	movs	r1, #136	; 0x88
 8000822:	0049      	lsls	r1, r1, #1
 8000824:	468c      	mov	ip, r1
 8000826:	44bc      	add	ip, r7
 8000828:	4462      	add	r2, ip
 800082a:	7812      	ldrb	r2, [r2, #0]
 800082c:	701a      	strb	r2, [r3, #0]
  uint8_t i;
  for(i = 0; i < count; i++) dt[i+1] = data[i];
 800082e:	2310      	movs	r3, #16
 8000830:	33ff      	adds	r3, #255	; 0xff
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e015      	b.n	8000866 <ssd1306_I2C_WriteMulti+0x92>
 800083a:	2010      	movs	r0, #16
 800083c:	30ff      	adds	r0, #255	; 0xff
 800083e:	183b      	adds	r3, r7, r0
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	683a      	ldr	r2, [r7, #0]
 8000844:	18d2      	adds	r2, r2, r3
 8000846:	183b      	adds	r3, r7, r0
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	7811      	ldrb	r1, [r2, #0]
 800084e:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <ssd1306_I2C_WriteMulti+0xf4>)
 8000850:	2488      	movs	r4, #136	; 0x88
 8000852:	0064      	lsls	r4, r4, #1
 8000854:	46a4      	mov	ip, r4
 8000856:	44bc      	add	ip, r7
 8000858:	4462      	add	r2, ip
 800085a:	54d1      	strb	r1, [r2, r3]
 800085c:	183b      	adds	r3, r7, r0
 800085e:	781a      	ldrb	r2, [r3, #0]
 8000860:	183b      	adds	r3, r7, r0
 8000862:	3201      	adds	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	2310      	movs	r3, #16
 8000868:	33ff      	adds	r3, #255	; 0xff
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b29b      	uxth	r3, r3
 8000870:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <ssd1306_I2C_WriteMulti+0xf0>)
 8000872:	2188      	movs	r1, #136	; 0x88
 8000874:	0049      	lsls	r1, r1, #1
 8000876:	468c      	mov	ip, r1
 8000878:	44bc      	add	ip, r7
 800087a:	4462      	add	r2, ip
 800087c:	8812      	ldrh	r2, [r2, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	d8db      	bhi.n	800083a <ssd1306_I2C_WriteMulti+0x66>

  HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 200);
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <ssd1306_I2C_WriteMulti+0xe8>)
 8000884:	2288      	movs	r2, #136	; 0x88
 8000886:	0052      	lsls	r2, r2, #1
 8000888:	4694      	mov	ip, r2
 800088a:	44bc      	add	ip, r7
 800088c:	4463      	add	r3, ip
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b299      	uxth	r1, r3
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <ssd1306_I2C_WriteMulti+0xf0>)
 8000894:	2288      	movs	r2, #136	; 0x88
 8000896:	0052      	lsls	r2, r2, #1
 8000898:	4694      	mov	ip, r2
 800089a:	44bc      	add	ip, r7
 800089c:	4463      	add	r3, ip
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	b29c      	uxth	r4, r3
 80008a4:	230c      	movs	r3, #12
 80008a6:	18fa      	adds	r2, r7, r3
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <ssd1306_I2C_WriteMulti+0xf8>)
 80008aa:	23c8      	movs	r3, #200	; 0xc8
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	0023      	movs	r3, r4
 80008b0:	f001 fa92 	bl	8001dd8 <HAL_I2C_Master_Transmit>
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b045      	add	sp, #276	; 0x114
 80008ba:	bd90      	pop	{r4, r7, pc}
 80008bc:	fffffef7 	.word	0xfffffef7
 80008c0:	fffffef6 	.word	0xfffffef6
 80008c4:	fffffef4 	.word	0xfffffef4
 80008c8:	fffffefc 	.word	0xfffffefc
 80008cc:	20001dd0 	.word	0x20001dd0

080008d0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	0004      	movs	r4, r0
 80008d8:	0008      	movs	r0, r1
 80008da:	0011      	movs	r1, r2
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	1c22      	adds	r2, r4, #0
 80008e0:	701a      	strb	r2, [r3, #0]
 80008e2:	1dbb      	adds	r3, r7, #6
 80008e4:	1c02      	adds	r2, r0, #0
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	1d7b      	adds	r3, r7, #5
 80008ea:	1c0a      	adds	r2, r1, #0
 80008ec:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 80008ee:	200c      	movs	r0, #12
 80008f0:	183b      	adds	r3, r7, r0
 80008f2:	1dba      	adds	r2, r7, #6
 80008f4:	7812      	ldrb	r2, [r2, #0]
 80008f6:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 80008f8:	183b      	adds	r3, r7, r0
 80008fa:	1d7a      	adds	r2, r7, #5
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b299      	uxth	r1, r3
 8000906:	183a      	adds	r2, r7, r0
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <ssd1306_I2C_Write+0x4c>)
 800090a:	230a      	movs	r3, #10
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2302      	movs	r3, #2
 8000910:	f001 fa62 	bl	8001dd8 <HAL_I2C_Master_Transmit>
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b005      	add	sp, #20
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	20001dd0 	.word	0x20001dd0

08000920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	0002      	movs	r2, r0
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b7f      	cmp	r3, #127	; 0x7f
 8000932:	d809      	bhi.n	8000948 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	001a      	movs	r2, r3
 800093a:	231f      	movs	r3, #31
 800093c:	401a      	ands	r2, r3
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <__NVIC_EnableIRQ+0x30>)
 8000940:	2101      	movs	r1, #1
 8000942:	4091      	lsls	r1, r2
 8000944:	000a      	movs	r2, r1
 8000946:	601a      	str	r2, [r3, #0]
  }
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}
 8000950:	e000e100 	.word	0xe000e100

08000954 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  HAL_Init();
 8000958:	f000 ff20 	bl	800179c <HAL_Init>
  SystemClock_Config();
 800095c:	f000 f866 	bl	8000a2c <SystemClock_Config>
  MX_GPIO_Init();
 8000960:	f000 f97e 	bl	8000c60 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000964:	f000 f8bc 	bl	8000ae0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000968:	f000 f8fa 	bl	8000b60 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800096c:	f000 f93a 	bl	8000be4 <MX_USART2_UART_Init>
  //MX_USART3_UART_Init();
  osKernelInitialize();
 8000970:	f003 f980 	bl	8003c74 <osKernelInitialize>
  init_gpio_entity(&keys);
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <main+0x9c>)
 8000976:	0018      	movs	r0, r3
 8000978:	f000 fb58 	bl	800102c <init_gpio_entity>
  init_buttons(&btns);
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <main+0xa0>)
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fca4 	bl	80002cc <init_buttons>
  cmd_buf = init_bufferptr();
 8000984:	f000 fd58 	bl	8001438 <init_bufferptr>
 8000988:	0002      	movs	r2, r0
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <main+0xa4>)
 800098c:	601a      	str	r2, [r3, #0]
  init_sendbufferptr();
 800098e:	f000 fd63 	bl	8001458 <init_sendbufferptr>
  SSD1306_Init();
 8000992:	f7ff fd05 	bl	80003a0 <SSD1306_Init>
  command_readerHandle = osThreadNew(Start_command_reader, NULL, &command_reader_attributes);
 8000996:	4a19      	ldr	r2, [pc, #100]	; (80009fc <main+0xa8>)
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <main+0xac>)
 800099a:	2100      	movs	r1, #0
 800099c:	0018      	movs	r0, r3
 800099e:	f003 f9c3 	bl	8003d28 <osThreadNew>
 80009a2:	0002      	movs	r2, r0
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <main+0xb0>)
 80009a6:	601a      	str	r2, [r3, #0]
  user_interfaceHandle = osThreadNew(Start_user_interface, NULL, &user_interface_attributes);
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <main+0xb4>)
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <main+0xb8>)
 80009ac:	2100      	movs	r1, #0
 80009ae:	0018      	movs	r0, r3
 80009b0:	f003 f9ba 	bl	8003d28 <osThreadNew>
 80009b4:	0002      	movs	r2, r0
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <main+0xbc>)
 80009b8:	601a      	str	r2, [r3, #0]

  /* creation of keys_switcher */
  keys_switcherHandle = osThreadNew(Start_keys_switcher, NULL, &keys_switcher_attributes);
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <main+0xc0>)
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <main+0xc4>)
 80009be:	2100      	movs	r1, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f003 f9b1 	bl	8003d28 <osThreadNew>
 80009c6:	0002      	movs	r2, r0
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <main+0xc8>)
 80009ca:	601a      	str	r2, [r3, #0]

  /* creation of rs485_control */
  rs485_controlHandle = osThreadNew(Start_rs485_controller, NULL, &rs485_control_attributes);
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <main+0xcc>)
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <main+0xd0>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	0018      	movs	r0, r3
 80009d4:	f003 f9a8 	bl	8003d28 <osThreadNew>
 80009d8:	0002      	movs	r2, r0
 80009da:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <main+0xd4>)
 80009dc:	601a      	str	r2, [r3, #0]

  /* Start scheduler */
  osKernelStart();
 80009de:	f003 f975 	bl	8003ccc <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  osDelay(1000);
 80009e2:	23fa      	movs	r3, #250	; 0xfa
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f003 fa46 	bl	8003e78 <osDelay>
 80009ec:	e7f9      	b.n	80009e2 <main+0x8e>
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	20001f5c 	.word	0x20001f5c
 80009f4:	20001ea8 	.word	0x20001ea8
 80009f8:	20001ed0 	.word	0x20001ed0
 80009fc:	08007694 	.word	0x08007694
 8000a00:	08000d75 	.word	0x08000d75
 8000a04:	20001e1c 	.word	0x20001e1c
 8000a08:	080076b8 	.word	0x080076b8
 8000a0c:	08000dc9 	.word	0x08000dc9
 8000a10:	20001d48 	.word	0x20001d48
 8000a14:	080076dc 	.word	0x080076dc
 8000a18:	08000e51 	.word	0x08000e51
 8000a1c:	20001d44 	.word	0x20001d44
 8000a20:	08007700 	.word	0x08007700
 8000a24:	08000e9f 	.word	0x08000e9f
 8000a28:	20001f58 	.word	0x20001f58

08000a2c <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b097      	sub	sp, #92	; 0x5c
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	2428      	movs	r4, #40	; 0x28
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	0018      	movs	r0, r3
 8000a38:	2330      	movs	r3, #48	; 0x30
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f005 fb62 	bl	8006106 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a42:	2318      	movs	r3, #24
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	0018      	movs	r0, r3
 8000a48:	2310      	movs	r3, #16
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f005 fb5a 	bl	8006106 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	0018      	movs	r0, r3
 8000a56:	2314      	movs	r3, #20
 8000a58:	001a      	movs	r2, r3
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	f005 fb53 	bl	8006106 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a60:	0021      	movs	r1, r4
 8000a62:	187b      	adds	r3, r7, r1
 8000a64:	2202      	movs	r2, #2
 8000a66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2210      	movs	r2, #16
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)  {
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f001 fddd 	bl	800263c <HAL_RCC_OscConfig>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x5e>
    Error_Handler();
 8000a86:	f000 fa25 	bl	8000ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	2118      	movs	r1, #24
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2207      	movs	r2, #7
 8000a90:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f002 f8e5 	bl	8002c78 <HAL_RCC_ClockConfig>
 8000aae:	1e03      	subs	r3, r0, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ab2:	f000 fa0f 	bl	8000ed4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2221      	movs	r2, #33	; 0x21
 8000aba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	0018      	movs	r0, r3
 8000acc:	f002 fa52 	bl	8002f74 <HAL_RCCEx_PeriphCLKConfig>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0xac>
    Error_Handler();
 8000ad4:	f000 f9fe 	bl	8000ed4 <Error_Handler>
  }
}
 8000ad8:	46c0      	nop			; (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b017      	add	sp, #92	; 0x5c
 8000ade:	bd90      	pop	{r4, r7, pc}

08000ae0 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <MX_I2C1_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <MX_I2C1_Init+0x7c>)
 8000aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 f8c5 	bl	8001cac <HAL_I2C_Init>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C1_Init+0x4a>
    Error_Handler();
 8000b26:	f000 f9d5 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 fcec 	bl	800250c <HAL_I2CEx_ConfigAnalogFilter>
 8000b34:	1e03      	subs	r3, r0, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2C1_Init+0x5c>
    Error_Handler();
 8000b38:	f000 f9cc 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <MX_I2C1_Init+0x74>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	0018      	movs	r0, r3
 8000b42:	f001 fd2f 	bl	80025a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C1_Init+0x6e>
    Error_Handler();
 8000b4a:	f000 f9c3 	bl	8000ed4 <Error_Handler>
  }
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20001dd0 	.word	0x20001dd0
 8000b58:	40005400 	.word	0x40005400
 8000b5c:	0000020b 	.word	0x0000020b

08000b60 <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <MX_USART1_UART_Init+0x7c>)
 8000b66:	4a1e      	ldr	r2, [pc, #120]	; (8000be0 <MX_USART1_UART_Init+0x80>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <MX_USART1_UART_Init+0x7c>)
 8000b6c:	2296      	movs	r2, #150	; 0x96
 8000b6e:	0212      	lsls	r2, r2, #8
 8000b70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <MX_USART1_UART_Init+0x7c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <MX_USART1_UART_Init+0x7c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <MX_USART1_UART_Init+0x7c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_USART1_UART_Init+0x7c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <MX_USART1_UART_Init+0x7c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_USART1_UART_Init+0x7c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b96:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART1_UART_Init+0x7c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <MX_USART1_UART_Init+0x7c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <MX_USART1_UART_Init+0x7c>)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	f002 fff3 	bl	8003b94 <HAL_RS485Ex_Init>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART1_UART_Init+0x56>
    Error_Handler();
 8000bb2:	f000 f98f 	bl	8000ed4 <Error_Handler>
  }

  USART1->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE;
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_USART1_UART_Init+0x80>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART1_UART_Init+0x80>)
 8000bbc:	212c      	movs	r1, #44	; 0x2c
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]
 // USART1->CR1 &= ~USART_CR1_TXEIE;
  //| USART_CR1_TXEIE;
  USART1->CR2 = 0;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <MX_USART1_UART_Init+0x80>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  USART1->CR3 = 0;
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <MX_USART1_UART_Init+0x80>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  NVIC_EnableIRQ(USART1_IRQn);
 8000bce:	201b      	movs	r0, #27
 8000bd0:	f7ff fea6 	bl	8000920 <__NVIC_EnableIRQ>
}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	20001e20 	.word	0x20001e20
 8000be0:	40013800 	.word	0x40013800

08000be4 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_USART2_UART_Init+0x74>)
 8000bea:	4a1c      	ldr	r2, [pc, #112]	; (8000c5c <MX_USART2_UART_Init+0x78>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_USART2_UART_Init+0x74>)
 8000bf0:	2296      	movs	r2, #150	; 0x96
 8000bf2:	0212      	lsls	r2, r2, #8
 8000bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <MX_USART2_UART_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <MX_USART2_UART_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <MX_USART2_UART_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <MX_USART2_UART_Init+0x74>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_USART2_UART_Init+0x74>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_USART2_UART_Init+0x74>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_USART2_UART_Init+0x74>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_USART2_UART_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <MX_USART2_UART_Init+0x74>)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f002 ffb1 	bl	8003b94 <HAL_RS485Ex_Init>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART2_UART_Init+0x56>
    Error_Handler();
 8000c36:	f000 f94d 	bl	8000ed4 <Error_Handler>
  }
  USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART2_UART_Init+0x78>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <MX_USART2_UART_Init+0x78>)
 8000c40:	210c      	movs	r1, #12
 8000c42:	430a      	orrs	r2, r1
 8000c44:	601a      	str	r2, [r3, #0]
  //| USART_CR1_RXNEIE;
  USART2->CR2 = 0;
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <MX_USART2_UART_Init+0x78>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
  USART2->CR3 = 0;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <MX_USART2_UART_Init+0x78>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  //NVIC_EnableIRQ(USART2_IRQn);
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20001ed4 	.word	0x20001ed4
 8000c5c:	40004400 	.word	0x40004400

08000c60 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	240c      	movs	r4, #12
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	2314      	movs	r3, #20
 8000c6e:	001a      	movs	r2, r3
 8000c70:	2100      	movs	r1, #0
 8000c72:	f005 fa48 	bl	8006106 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	4b3b      	ldr	r3, [pc, #236]	; (8000d64 <MX_GPIO_Init+0x104>)
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <MX_GPIO_Init+0x104>)
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	0309      	lsls	r1, r1, #12
 8000c80:	430a      	orrs	r2, r1
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <MX_GPIO_Init+0x104>)
 8000c86:	695a      	ldr	r2, [r3, #20]
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	031b      	lsls	r3, r3, #12
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <MX_GPIO_Init+0x104>)
 8000c94:	695a      	ldr	r2, [r3, #20]
 8000c96:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <MX_GPIO_Init+0x104>)
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	0289      	lsls	r1, r1, #10
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	615a      	str	r2, [r3, #20]
 8000ca0:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <MX_GPIO_Init+0x104>)
 8000ca2:	695a      	ldr	r2, [r3, #20]
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	029b      	lsls	r3, r3, #10
 8000ca8:	4013      	ands	r3, r2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <MX_GPIO_Init+0x104>)
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <MX_GPIO_Init+0x104>)
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	02c9      	lsls	r1, r1, #11
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <MX_GPIO_Init+0x104>)
 8000cbe:	695a      	ldr	r2, [r3, #20]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	02db      	lsls	r3, r3, #11
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_11_Pin|OUT_10_Pin|OUT_9_Pin|OUT_8_Pin
 8000cca:	23f2      	movs	r3, #242	; 0xf2
 8000ccc:	33ff      	adds	r3, #255	; 0xff
 8000cce:	0019      	movs	r1, r3
 8000cd0:	2390      	movs	r3, #144	; 0x90
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 ffcb 	bl	8001c72 <HAL_GPIO_WritePin>
                          |OUT_7_Pin|OUT_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_6_Pin|OUT_5_Pin|OUT_4_Pin|OUT_3_Pin
 8000cdc:	4922      	ldr	r1, [pc, #136]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <MX_GPIO_Init+0x10c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 ffc5 	bl	8001c72 <HAL_GPIO_WritePin>
                          |OUT_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	22e0      	movs	r2, #224	; 0xe0
 8000cec:	0212      	lsls	r2, r2, #8
 8000cee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	193b      	adds	r3, r7, r4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf6:	193b      	adds	r3, r7, r4
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfc:	193b      	adds	r3, r7, r4
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <MX_GPIO_Init+0x110>)
 8000d00:	0019      	movs	r1, r3
 8000d02:	0010      	movs	r0, r2
 8000d04:	f000 fe28 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_11_Pin OUT_10_Pin OUT_9_Pin OUT_8_Pin
                           OUT_7_Pin OUT_1_Pin */
  GPIO_InitStruct.Pin = OUT_11_Pin|OUT_10_Pin|OUT_9_Pin|OUT_8_Pin
 8000d08:	0021      	movs	r1, r4
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	22f2      	movs	r2, #242	; 0xf2
 8000d0e:	32ff      	adds	r2, #255	; 0xff
 8000d10:	601a      	str	r2, [r3, #0]
                          |OUT_7_Pin|OUT_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2201      	movs	r2, #1
 8000d16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	000c      	movs	r4, r1
 8000d26:	187a      	adds	r2, r7, r1
 8000d28:	2390      	movs	r3, #144	; 0x90
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 fe12 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_6_Pin OUT_5_Pin OUT_4_Pin OUT_3_Pin
                           OUT_2_Pin */
  GPIO_InitStruct.Pin = OUT_6_Pin|OUT_5_Pin|OUT_4_Pin|OUT_3_Pin
 8000d34:	0021      	movs	r1, r4
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <MX_GPIO_Init+0x108>)
 8000d3a:	601a      	str	r2, [r3, #0]
                          |OUT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2201      	movs	r2, #1
 8000d40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <MX_GPIO_Init+0x10c>)
 8000d52:	0019      	movs	r1, r3
 8000d54:	0010      	movs	r0, r2
 8000d56:	f000 fdff 	bl	8001958 <HAL_GPIO_Init>
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b009      	add	sp, #36	; 0x24
 8000d60:	bd90      	pop	{r4, r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40021000 	.word	0x40021000
 8000d68:	0000f001 	.word	0x0000f001
 8000d6c:	48000400 	.word	0x48000400
 8000d70:	48000800 	.word	0x48000800

08000d74 <Start_command_reader>:

void Start_command_reader(void *argument) {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  for(;;) {
	  osDelay(1000);
 8000d7c:	23fa      	movs	r3, #250	; 0xfa
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f003 f879 	bl	8003e78 <osDelay>
 8000d86:	e7f9      	b.n	8000d7c <Start_command_reader+0x8>

08000d88 <display_horse>:
  }
}

void display_horse(int key) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  SSD1306_Clear();
 8000d90:	f7ff fcf2 	bl	8000778 <SSD1306_Clear>
  SSD1306_GotoXY (0, 44);
 8000d94:	212c      	movs	r1, #44	; 0x2c
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff fc2e 	bl	80005f8 <SSD1306_GotoXY>
  SSD1306_Mirror(1, 1);
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f7ff fb8a 	bl	80004b8 <SSD1306_Mirror>
  SSD1306_Puts (cmd_buf, &Font_7x10, 1);
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <display_horse+0x38>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4906      	ldr	r1, [pc, #24]	; (8000dc4 <display_horse+0x3c>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff fcbd 	bl	800072c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000db2:	f7ff fb33 	bl	800041c <SSD1306_UpdateScreen>
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	20001ed0 	.word	0x20001ed0
 8000dc4:	20000000 	.word	0x20000000

08000dc8 <Start_user_interface>:

void Start_user_interface(void *argument)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_user_interface */
  /* Infinite loop */
  SSD1306_Clear();
 8000dd0:	f7ff fcd2 	bl	8000778 <SSD1306_Clear>
  SSD1306_GotoXY(0,0);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff fc0e 	bl	80005f8 <SSD1306_GotoXY>
  SSD1306_Mirror(1, 1);
 8000ddc:	2101      	movs	r1, #1
 8000dde:	2001      	movs	r0, #1
 8000de0:	f7ff fb6a 	bl	80004b8 <SSD1306_Mirror>
  SSD1306_Puts ("openrbt.com", &Font_11x18, 1);
 8000de4:	4916      	ldr	r1, [pc, #88]	; (8000e40 <Start_user_interface+0x78>)
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <Start_user_interface+0x7c>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff fc9e 	bl	800072c <SSD1306_Puts>
  SSD1306_GotoXY(12,30);
 8000df0:	211e      	movs	r1, #30
 8000df2:	200c      	movs	r0, #12
 8000df4:	f7ff fc00 	bl	80005f8 <SSD1306_GotoXY>
  SSD1306_Puts ("WELCOME :)", &Font_11x18, 1);
 8000df8:	4911      	ldr	r1, [pc, #68]	; (8000e40 <Start_user_interface+0x78>)
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <Start_user_interface+0x80>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff fc94 	bl	800072c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000e04:	f7ff fb0a 	bl	800041c <SSD1306_UpdateScreen>
  SSD1306_ON();
 8000e08:	f7ff fcbe 	bl	8000788 <SSD1306_ON>
  osDelay(2000);
 8000e0c:	23fa      	movs	r3, #250	; 0xfa
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	0018      	movs	r0, r3
 8000e12:	f003 f831 	bl	8003e78 <osDelay>
  for(;;)
  {
	if(is_clicked(0)) {
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f8be 	bl	8000f98 <is_clicked>
 8000e1c:	1e03      	subs	r3, r0, #0
 8000e1e:	d007      	beq.n	8000e30 <Start_user_interface+0x68>
	  display_horse(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff ffb1 	bl	8000d88 <display_horse>
	  send_bytes("0123456789\n", 11);
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <Start_user_interface+0x84>)
 8000e28:	210b      	movs	r1, #11
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 fb28 	bl	8001480 <send_bytes>
	}
	display_horse(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff ffa9 	bl	8000d88 <display_horse>

    osDelay(10);
 8000e36:	200a      	movs	r0, #10
 8000e38:	f003 f81e 	bl	8003e78 <osDelay>
	if(is_clicked(0)) {
 8000e3c:	e7eb      	b.n	8000e16 <Start_user_interface+0x4e>
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	20000008 	.word	0x20000008
 8000e44:	08006170 	.word	0x08006170
 8000e48:	0800617c 	.word	0x0800617c
 8000e4c:	08006188 	.word	0x08006188

08000e50 <Start_keys_switcher>:

  }
}

void Start_keys_switcher(void *argument) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  int frame = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
  int cursor = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
  for(;;) {
	frame++;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
	if(frame>20) {
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2b14      	cmp	r3, #20
 8000e6a:	dd0f      	ble.n	8000e8c <Start_keys_switcher+0x3c>
		turn_off(cursor);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	0018      	movs	r0, r3
 8000e72:	f000 f851 	bl	8000f18 <turn_off>
		cursor = 1-cursor;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	60bb      	str	r3, [r7, #8]
		turn_on(cursor);
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 f82a 	bl	8000edc <turn_on>
		frame = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
	}
	turn_on(3);
 8000e8c:	2003      	movs	r0, #3
 8000e8e:	f000 f825 	bl	8000edc <turn_on>
	buttons_update();
 8000e92:	f000 f85f 	bl	8000f54 <buttons_update>
    osDelay(5);
 8000e96:	2005      	movs	r0, #5
 8000e98:	f002 ffee 	bl	8003e78 <osDelay>
	frame++;
 8000e9c:	e7e0      	b.n	8000e60 <Start_keys_switcher+0x10>

08000e9e <Start_rs485_controller>:
  }
}

void Start_rs485_controller(void *argument) {
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  for(;;) {
    osDelay(1);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f002 ffe6 	bl	8003e78 <osDelay>
 8000eac:	e7fb      	b.n	8000ea6 <Start_rs485_controller+0x8>
	...

08000eb0 <HAL_TIM_PeriodElapsedCallback>:
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d101      	bne.n	8000ec6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ec2:	f000 fc7f 	bl	80017c4 <HAL_IncTick>
  }
}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40001000 	.word	0x40001000

08000ed4 <Error_Handler>:

void Error_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
  __disable_irq();
  while (1)
 8000eda:	e7fe      	b.n	8000eda <Error_Handler+0x6>

08000edc <turn_on>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void turn_on(uint8_t key) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(keys.relays[key].port, keys.relays[key].pin , GPIO_PIN_SET);
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <turn_on+0x38>)
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	18d3      	adds	r3, r2, r3
 8000ef2:	3308      	adds	r3, #8
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <turn_on+0x38>)
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	18d3      	adds	r3, r2, r3
 8000f00:	3304      	adds	r3, #4
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	2201      	movs	r2, #1
 8000f06:	0019      	movs	r1, r3
 8000f08:	f000 feb3 	bl	8001c72 <HAL_GPIO_WritePin>
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20001f5c 	.word	0x20001f5c

08000f18 <turn_off>:

void turn_off(uint8_t key) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	0002      	movs	r2, r0
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(keys.relays[key].port, keys.relays[key].pin , GPIO_PIN_RESET);
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <turn_off+0x38>)
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	18d3      	adds	r3, r2, r3
 8000f2e:	3308      	adds	r3, #8
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <turn_off+0x38>)
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	18d3      	adds	r3, r2, r3
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	0019      	movs	r1, r3
 8000f44:	f000 fe95 	bl	8001c72 <HAL_GPIO_WritePin>
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b002      	add	sp, #8
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20001f5c 	.word	0x20001f5c

08000f54 <buttons_update>:

void buttons_update() {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
	for(uint8_t i=0;i<BUTTONS_COUNT;i++) {
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	e00f      	b.n	8000f82 <buttons_update+0x2e>
		update_button(&btns.btn[i]);
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	0013      	movs	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	189b      	adds	r3, r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <buttons_update+0x40>)
 8000f70:	189b      	adds	r3, r3, r2
 8000f72:	0018      	movs	r0, r3
 8000f74:	f7ff f9ce 	bl	8000314 <update_button>
	for(uint8_t i=0;i<BUTTONS_COUNT;i++) {
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	3201      	adds	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d9eb      	bls.n	8000f62 <buttons_update+0xe>
	}
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	20001ea8 	.word	0x20001ea8

08000f98 <is_clicked>:

int is_clicked(uint8_t key) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	1dfb      	adds	r3, r7, #7
 8000fa2:	701a      	strb	r2, [r3, #0]
  if(btns.btn[key].is_clicked) {
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	490d      	ldr	r1, [pc, #52]	; (8000fe0 <is_clicked+0x48>)
 8000faa:	0013      	movs	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	189b      	adds	r3, r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	18cb      	adds	r3, r1, r3
 8000fb4:	330a      	adds	r3, #10
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00c      	beq.n	8000fd6 <is_clicked+0x3e>
	  btns.btn[key].is_clicked = 0;
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781a      	ldrb	r2, [r3, #0]
 8000fc0:	4907      	ldr	r1, [pc, #28]	; (8000fe0 <is_clicked+0x48>)
 8000fc2:	0013      	movs	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	189b      	adds	r3, r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	18cb      	adds	r3, r1, r3
 8000fcc:	330a      	adds	r3, #10
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
	  return 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <is_clicked+0x40>
  }
  return 0;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b002      	add	sp, #8
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20001ea8 	.word	0x20001ea8

08000fe4 <add_relay>:
 *      Author: roman
 */

#include "relays.h"

void add_relay(gpio_entity *obj, uint16_t pin, GPIO_TypeDef * port) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	200a      	movs	r0, #10
 8000ff0:	183b      	adds	r3, r7, r0
 8000ff2:	1c0a      	adds	r2, r1, #0
 8000ff4:	801a      	strh	r2, [r3, #0]
	obj->relays[obj->cursor].pin = pin;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	18d3      	adds	r3, r2, r3
 8001000:	3304      	adds	r3, #4
 8001002:	183a      	adds	r2, r7, r0
 8001004:	8812      	ldrh	r2, [r2, #0]
 8001006:	801a      	strh	r2, [r3, #0]
	obj->relays[obj->cursor].port = port;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	18d3      	adds	r3, r2, r3
 8001012:	3308      	adds	r3, #8
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	601a      	str	r2, [r3, #0]
	obj->cursor = obj->cursor + 1;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	601a      	str	r2, [r3, #0]
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b004      	add	sp, #16
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <init_gpio_entity>:

void init_gpio_entity(gpio_entity *obj) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	obj->cursor = 0;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
	add_relay(obj, OUT_1_Pin, OUT_1_GPIO_Port);
 800103a:	2390      	movs	r3, #144	; 0x90
 800103c:	05da      	lsls	r2, r3, #23
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	0059      	lsls	r1, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff ffcd 	bl	8000fe4 <add_relay>
	add_relay(obj, OUT_2_Pin, OUT_2_GPIO_Port);
 800104a:	4a24      	ldr	r2, [pc, #144]	; (80010dc <init_gpio_entity+0xb0>)
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	0219      	lsls	r1, r3, #8
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	0018      	movs	r0, r3
 8001054:	f7ff ffc6 	bl	8000fe4 <add_relay>
	add_relay(obj, OUT_3_Pin, OUT_3_GPIO_Port);
 8001058:	4a20      	ldr	r2, [pc, #128]	; (80010dc <init_gpio_entity+0xb0>)
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	01d9      	lsls	r1, r3, #7
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff ffbf 	bl	8000fe4 <add_relay>
	add_relay(obj, OUT_4_Pin, OUT_4_GPIO_Port);
 8001066:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <init_gpio_entity+0xb0>)
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	0199      	lsls	r1, r3, #6
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff ffb8 	bl	8000fe4 <add_relay>
	add_relay(obj, OUT_5_Pin, OUT_5_GPIO_Port);
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <init_gpio_entity+0xb0>)
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	0159      	lsls	r1, r3, #5
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff ffb1 	bl	8000fe4 <add_relay>
	add_relay(obj, OUT_6_Pin, OUT_6_GPIO_Port);
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <init_gpio_entity+0xb0>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2101      	movs	r1, #1
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff ffab 	bl	8000fe4 <add_relay>
	add_relay(obj, OUT_7_Pin, OUT_7_GPIO_Port);
 800108e:	2390      	movs	r3, #144	; 0x90
 8001090:	05da      	lsls	r2, r3, #23
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff ffa4 	bl	8000fe4 <add_relay>
	add_relay(obj, OUT_8_Pin, OUT_8_GPIO_Port);
 800109c:	2390      	movs	r3, #144	; 0x90
 800109e:	05da      	lsls	r2, r3, #23
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2140      	movs	r1, #64	; 0x40
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff ff9d 	bl	8000fe4 <add_relay>
	add_relay(obj, OUT_9_Pin, OUT_9_GPIO_Port);
 80010aa:	2390      	movs	r3, #144	; 0x90
 80010ac:	05da      	lsls	r2, r3, #23
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2120      	movs	r1, #32
 80010b2:	0018      	movs	r0, r3
 80010b4:	f7ff ff96 	bl	8000fe4 <add_relay>
	add_relay(obj, OUT_10_Pin, OUT_10_GPIO_Port);
 80010b8:	2390      	movs	r3, #144	; 0x90
 80010ba:	05da      	lsls	r2, r3, #23
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2110      	movs	r1, #16
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff ff8f 	bl	8000fe4 <add_relay>
	add_relay(obj, OUT_11_Pin, OUT_11_GPIO_Port);
 80010c6:	2390      	movs	r3, #144	; 0x90
 80010c8:	05da      	lsls	r2, r3, #23
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2101      	movs	r1, #1
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff ff88 	bl	8000fe4 <add_relay>
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b002      	add	sp, #8
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	48000400 	.word	0x48000400

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_MspInit+0x50>)
 80010e8:	699a      	ldr	r2, [r3, #24]
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_MspInit+0x50>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	619a      	str	r2, [r3, #24]
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_MspInit+0x50>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	2201      	movs	r2, #1
 80010f8:	4013      	ands	r3, r2
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_MspInit+0x50>)
 8001100:	69da      	ldr	r2, [r3, #28]
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <HAL_MspInit+0x50>)
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	0549      	lsls	r1, r1, #21
 8001108:	430a      	orrs	r2, r1
 800110a:	61da      	str	r2, [r3, #28]
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_MspInit+0x50>)
 800110e:	69da      	ldr	r2, [r3, #28]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	055b      	lsls	r3, r3, #21
 8001114:	4013      	ands	r3, r2
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800111a:	2302      	movs	r3, #2
 800111c:	425b      	negs	r3, r3
 800111e:	2200      	movs	r2, #0
 8001120:	2103      	movs	r1, #3
 8001122:	0018      	movs	r0, r3
 8001124:	f000 fbf2 	bl	800190c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001128:	46c0      	nop			; (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	b002      	add	sp, #8
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	2314      	movs	r3, #20
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	0018      	movs	r0, r3
 8001142:	2314      	movs	r3, #20
 8001144:	001a      	movs	r2, r3
 8001146:	2100      	movs	r1, #0
 8001148:	f004 ffdd 	bl	8006106 <memset>
  if(hi2c->Instance==I2C1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <HAL_I2C_MspInit+0x90>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d131      	bne.n	80011ba <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_I2C_MspInit+0x94>)
 8001158:	695a      	ldr	r2, [r3, #20]
 800115a:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <HAL_I2C_MspInit+0x94>)
 800115c:	2180      	movs	r1, #128	; 0x80
 800115e:	02c9      	lsls	r1, r1, #11
 8001160:	430a      	orrs	r2, r1
 8001162:	615a      	str	r2, [r3, #20]
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_I2C_MspInit+0x94>)
 8001166:	695a      	ldr	r2, [r3, #20]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	02db      	lsls	r3, r3, #11
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001172:	2114      	movs	r1, #20
 8001174:	187b      	adds	r3, r7, r1
 8001176:	22c0      	movs	r2, #192	; 0xc0
 8001178:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2212      	movs	r2, #18
 800117e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2201      	movs	r2, #1
 8001184:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2203      	movs	r2, #3
 800118a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2201      	movs	r2, #1
 8001190:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	187b      	adds	r3, r7, r1
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <HAL_I2C_MspInit+0x98>)
 8001196:	0019      	movs	r1, r3
 8001198:	0010      	movs	r0, r2
 800119a:	f000 fbdd 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_I2C_MspInit+0x94>)
 80011a0:	69da      	ldr	r2, [r3, #28]
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_I2C_MspInit+0x94>)
 80011a4:	2180      	movs	r1, #128	; 0x80
 80011a6:	0389      	lsls	r1, r1, #14
 80011a8:	430a      	orrs	r2, r1
 80011aa:	61da      	str	r2, [r3, #28]
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_I2C_MspInit+0x94>)
 80011ae:	69da      	ldr	r2, [r3, #28]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	039b      	lsls	r3, r3, #14
 80011b4:	4013      	ands	r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b00a      	add	sp, #40	; 0x28
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40005400 	.word	0x40005400
 80011c8:	40021000 	.word	0x40021000
 80011cc:	48000400 	.word	0x48000400

080011d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	; 0x38
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	2324      	movs	r3, #36	; 0x24
 80011da:	18fb      	adds	r3, r7, r3
 80011dc:	0018      	movs	r0, r3
 80011de:	2314      	movs	r3, #20
 80011e0:	001a      	movs	r2, r3
 80011e2:	2100      	movs	r1, #0
 80011e4:	f004 ff8f 	bl	8006106 <memset>
  if(huart->Instance==USART1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a55      	ldr	r2, [pc, #340]	; (8001344 <HAL_UART_MspInit+0x174>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d134      	bne.n	800125c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f2:	4b55      	ldr	r3, [pc, #340]	; (8001348 <HAL_UART_MspInit+0x178>)
 80011f4:	699a      	ldr	r2, [r3, #24]
 80011f6:	4b54      	ldr	r3, [pc, #336]	; (8001348 <HAL_UART_MspInit+0x178>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	01c9      	lsls	r1, r1, #7
 80011fc:	430a      	orrs	r2, r1
 80011fe:	619a      	str	r2, [r3, #24]
 8001200:	4b51      	ldr	r3, [pc, #324]	; (8001348 <HAL_UART_MspInit+0x178>)
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	01db      	lsls	r3, r3, #7
 8001208:	4013      	ands	r3, r2
 800120a:	623b      	str	r3, [r7, #32]
 800120c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b4e      	ldr	r3, [pc, #312]	; (8001348 <HAL_UART_MspInit+0x178>)
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <HAL_UART_MspInit+0x178>)
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	0289      	lsls	r1, r1, #10
 8001218:	430a      	orrs	r2, r1
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <HAL_UART_MspInit+0x178>)
 800121e:	695a      	ldr	r2, [r3, #20]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	029b      	lsls	r3, r3, #10
 8001224:	4013      	ands	r3, r2
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA12     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800122a:	2124      	movs	r1, #36	; 0x24
 800122c:	187b      	adds	r3, r7, r1
 800122e:	22b0      	movs	r2, #176	; 0xb0
 8001230:	0152      	lsls	r2, r2, #5
 8001232:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2202      	movs	r2, #2
 8001238:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2203      	movs	r2, #3
 8001244:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2201      	movs	r2, #1
 800124a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	187a      	adds	r2, r7, r1
 800124e:	2390      	movs	r3, #144	; 0x90
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	0011      	movs	r1, r2
 8001254:	0018      	movs	r0, r3
 8001256:	f000 fb7f 	bl	8001958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800125a:	e06f      	b.n	800133c <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a3a      	ldr	r2, [pc, #232]	; (800134c <HAL_UART_MspInit+0x17c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d133      	bne.n	80012ce <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001266:	4b38      	ldr	r3, [pc, #224]	; (8001348 <HAL_UART_MspInit+0x178>)
 8001268:	69da      	ldr	r2, [r3, #28]
 800126a:	4b37      	ldr	r3, [pc, #220]	; (8001348 <HAL_UART_MspInit+0x178>)
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	0289      	lsls	r1, r1, #10
 8001270:	430a      	orrs	r2, r1
 8001272:	61da      	str	r2, [r3, #28]
 8001274:	4b34      	ldr	r3, [pc, #208]	; (8001348 <HAL_UART_MspInit+0x178>)
 8001276:	69da      	ldr	r2, [r3, #28]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	029b      	lsls	r3, r3, #10
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
 8001280:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_UART_MspInit+0x178>)
 8001284:	695a      	ldr	r2, [r3, #20]
 8001286:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_UART_MspInit+0x178>)
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	0289      	lsls	r1, r1, #10
 800128c:	430a      	orrs	r2, r1
 800128e:	615a      	str	r2, [r3, #20]
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_UART_MspInit+0x178>)
 8001292:	695a      	ldr	r2, [r3, #20]
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	029b      	lsls	r3, r3, #10
 8001298:	4013      	ands	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800129e:	2124      	movs	r1, #36	; 0x24
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	220e      	movs	r2, #14
 80012a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2202      	movs	r2, #2
 80012aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2203      	movs	r2, #3
 80012b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2201      	movs	r2, #1
 80012bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012be:	187a      	adds	r2, r7, r1
 80012c0:	2390      	movs	r3, #144	; 0x90
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	0011      	movs	r1, r2
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 fb46 	bl	8001958 <HAL_GPIO_Init>
}
 80012cc:	e036      	b.n	800133c <HAL_UART_MspInit+0x16c>
  else if(huart->Instance==USART3)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a1f      	ldr	r2, [pc, #124]	; (8001350 <HAL_UART_MspInit+0x180>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d131      	bne.n	800133c <HAL_UART_MspInit+0x16c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d8:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <HAL_UART_MspInit+0x178>)
 80012da:	69da      	ldr	r2, [r3, #28]
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_UART_MspInit+0x178>)
 80012de:	2180      	movs	r1, #128	; 0x80
 80012e0:	02c9      	lsls	r1, r1, #11
 80012e2:	430a      	orrs	r2, r1
 80012e4:	61da      	str	r2, [r3, #28]
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_UART_MspInit+0x178>)
 80012e8:	69da      	ldr	r2, [r3, #28]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	02db      	lsls	r3, r3, #11
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_UART_MspInit+0x178>)
 80012f6:	695a      	ldr	r2, [r3, #20]
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_UART_MspInit+0x178>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	02c9      	lsls	r1, r1, #11
 80012fe:	430a      	orrs	r2, r1
 8001300:	615a      	str	r2, [r3, #20]
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_UART_MspInit+0x178>)
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	02db      	lsls	r3, r3, #11
 800130a:	4013      	ands	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8001310:	2124      	movs	r1, #36	; 0x24
 8001312:	187b      	adds	r3, r7, r1
 8001314:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_UART_MspInit+0x184>)
 8001316:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	187b      	adds	r3, r7, r1
 800131a:	2202      	movs	r2, #2
 800131c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2203      	movs	r2, #3
 8001328:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2204      	movs	r2, #4
 800132e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	187b      	adds	r3, r7, r1
 8001332:	4a09      	ldr	r2, [pc, #36]	; (8001358 <HAL_UART_MspInit+0x188>)
 8001334:	0019      	movs	r1, r3
 8001336:	0010      	movs	r0, r2
 8001338:	f000 fb0e 	bl	8001958 <HAL_GPIO_Init>
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b00e      	add	sp, #56	; 0x38
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40013800 	.word	0x40013800
 8001348:	40021000 	.word	0x40021000
 800134c:	40004400 	.word	0x40004400
 8001350:	40004800 	.word	0x40004800
 8001354:	00000c02 	.word	0x00000c02
 8001358:	48000400 	.word	0x48000400

0800135c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	0019      	movs	r1, r3
 8001372:	2011      	movs	r0, #17
 8001374:	f000 faca 	bl	800190c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001378:	2011      	movs	r0, #17
 800137a:	f000 fadc 	bl	8001936 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_InitTick+0xa4>)
 8001380:	69da      	ldr	r2, [r3, #28]
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_InitTick+0xa4>)
 8001384:	2110      	movs	r1, #16
 8001386:	430a      	orrs	r2, r1
 8001388:	61da      	str	r2, [r3, #28]
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_InitTick+0xa4>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	2210      	movs	r2, #16
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001396:	230c      	movs	r3, #12
 8001398:	18fa      	adds	r2, r7, r3
 800139a:	2310      	movs	r3, #16
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	0011      	movs	r1, r2
 80013a0:	0018      	movs	r0, r3
 80013a2:	f001 fdbd 	bl	8002f20 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013a6:	f001 fda5 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 80013aa:	0003      	movs	r3, r0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	4914      	ldr	r1, [pc, #80]	; (8001404 <HAL_InitTick+0xa8>)
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7fe fea8 	bl	8000108 <__udivsi3>
 80013b8:	0003      	movs	r3, r0
 80013ba:	3b01      	subs	r3, #1
 80013bc:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <HAL_InitTick+0xac>)
 80013c0:	4a12      	ldr	r2, [pc, #72]	; (800140c <HAL_InitTick+0xb0>)
 80013c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013c4:	4b10      	ldr	r3, [pc, #64]	; (8001408 <HAL_InitTick+0xac>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <HAL_InitTick+0xb4>)
 80013c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_InitTick+0xac>)
 80013cc:	6a3a      	ldr	r2, [r7, #32]
 80013ce:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <HAL_InitTick+0xac>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <HAL_InitTick+0xac>)
 80013d8:	2200      	movs	r2, #0
 80013da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_InitTick+0xac>)
 80013de:	0018      	movs	r0, r3
 80013e0:	f001 fea6 	bl	8003130 <HAL_TIM_Base_Init>
 80013e4:	1e03      	subs	r3, r0, #0
 80013e6:	d105      	bne.n	80013f4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_InitTick+0xac>)
 80013ea:	0018      	movs	r0, r3
 80013ec:	f001 fef8 	bl	80031e0 <HAL_TIM_Base_Start_IT>
 80013f0:	0003      	movs	r3, r0
 80013f2:	e000      	b.n	80013f6 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	0018      	movs	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	b00a      	add	sp, #40	; 0x28
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	40021000 	.word	0x40021000
 8001404:	000f4240 	.word	0x000f4240
 8001408:	20001fb8 	.word	0x20001fb8
 800140c:	40001000 	.word	0x40001000
 8001410:	000003e7 	.word	0x000003e7

08001414 <NMI_Handler>:
/*           Cortex-M0 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  while (1) {
 8001418:	e7fe      	b.n	8001418 <NMI_Handler+0x4>

0800141a <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void) {
 800141a:	b580      	push	{r7, lr}
 800141c:	af00      	add	r7, sp, #0
  while (1) {
 800141e:	e7fe      	b.n	800141e <HardFault_Handler+0x4>

08001420 <TIM6_IRQHandler>:
  }
}

void TIM6_IRQHandler(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <TIM6_IRQHandler+0x14>)
 8001426:	0018      	movs	r0, r3
 8001428:	f001 ff26 	bl	8003278 <HAL_TIM_IRQHandler>
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	20001fb8 	.word	0x20001fb8

08001438 <init_bufferptr>:

char * init_bufferptr() {
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	stm_cmd_cursor = 0;
 800143c:	4b04      	ldr	r3, [pc, #16]	; (8001450 <init_bufferptr+0x18>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	stm_cmd_buffer[0] = 0;
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <init_bufferptr+0x1c>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
	return stm_cmd_buffer;
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <init_bufferptr+0x1c>)
}
 800144a:	0018      	movs	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000206e 	.word	0x2000206e
 8001454:	20002008 	.word	0x20002008

08001458 <init_sendbufferptr>:

void init_sendbufferptr() {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	send_cycle_buffer[0] = 0;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <init_sendbufferptr+0x1c>)
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]
	send_cursor = 0;
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <init_sendbufferptr+0x20>)
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
	remaining_bytes = 0;
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <init_sendbufferptr+0x24>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	2000204c 	.word	0x2000204c
 8001478:	20002048 	.word	0x20002048
 800147c:	20002000 	.word	0x20002000

08001480 <send_bytes>:

uint8_t send_bytes(char * new_data, uint8_t size) {
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	000a      	movs	r2, r1
 800148a:	1cfb      	adds	r3, r7, #3
 800148c:	701a      	strb	r2, [r3, #0]
	usart1_sending_off();
 800148e:	f000 f921 	bl	80016d4 <usart1_sending_off>
	if (remaining_bytes > 0) {
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <send_bytes+0xb8>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <send_bytes+0x1e>
		return 3; // let's not allow sending something while the previous operation is in progress
 800149a:	2303      	movs	r3, #3
 800149c:	e047      	b.n	800152e <send_bytes+0xae>
	}
	if (size > MAX_SEND_BUF) {
 800149e:	1cfb      	adds	r3, r7, #3
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	d901      	bls.n	80014aa <send_bytes+0x2a>
		return 1;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e041      	b.n	800152e <send_bytes+0xae>
	}
	uint8_t write_cursor = send_cursor + 1;
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <send_bytes+0xbc>)
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	230f      	movs	r3, #15
 80014b0:	18fb      	adds	r3, r7, r3
 80014b2:	3201      	adds	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<size; i++) {
 80014b6:	230e      	movs	r3, #14
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
 80014be:	e02c      	b.n	800151a <send_bytes+0x9a>
		if(write_cursor>=MAX_SEND_BUF) write_cursor = write_cursor - MAX_SEND_BUF;
 80014c0:	230f      	movs	r3, #15
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b1f      	cmp	r3, #31
 80014c8:	d905      	bls.n	80014d6 <send_bytes+0x56>
 80014ca:	220f      	movs	r2, #15
 80014cc:	18bb      	adds	r3, r7, r2
 80014ce:	18ba      	adds	r2, r7, r2
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	3a20      	subs	r2, #32
 80014d4:	701a      	strb	r2, [r3, #0]
		if(write_cursor>=MAX_SEND_BUF) {
 80014d6:	230f      	movs	r3, #15
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b1f      	cmp	r3, #31
 80014de:	d901      	bls.n	80014e4 <send_bytes+0x64>
			return 2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	e024      	b.n	800152e <send_bytes+0xae>
		}
		send_cycle_buffer[write_cursor] = new_data[i];
 80014e4:	200e      	movs	r0, #14
 80014e6:	183b      	adds	r3, r7, r0
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	18d2      	adds	r2, r2, r3
 80014ee:	240f      	movs	r4, #15
 80014f0:	193b      	adds	r3, r7, r4
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	7811      	ldrb	r1, [r2, #0]
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <send_bytes+0xc0>)
 80014f8:	54d1      	strb	r1, [r2, r3]
		remaining_bytes++;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <send_bytes+0xb8>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	3301      	adds	r3, #1
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <send_bytes+0xb8>)
 8001504:	701a      	strb	r2, [r3, #0]
		write_cursor++;
 8001506:	193b      	adds	r3, r7, r4
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	193b      	adds	r3, r7, r4
 800150c:	3201      	adds	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i<size; i++) {
 8001510:	183b      	adds	r3, r7, r0
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	183b      	adds	r3, r7, r0
 8001516:	3201      	adds	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	230e      	movs	r3, #14
 800151c:	18fa      	adds	r2, r7, r3
 800151e:	1cfb      	adds	r3, r7, #3
 8001520:	7812      	ldrb	r2, [r2, #0]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3cb      	bcc.n	80014c0 <send_bytes+0x40>
	}
	usart1_sending_on();
 8001528:	f000 f8c6 	bl	80016b8 <usart1_sending_on>
	return 0;
 800152c:	2300      	movs	r3, #0
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b005      	add	sp, #20
 8001534:	bd90      	pop	{r4, r7, pc}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	20002000 	.word	0x20002000
 800153c:	20002048 	.word	0x20002048
 8001540:	2000204c 	.word	0x2000204c

08001544 <_send_byte_from_buffer>:

uint8_t _send_byte_from_buffer() {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
	if(remaining_bytes == 0) {
 800154a:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <_send_byte_from_buffer+0x6c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d103      	bne.n	800155a <_send_byte_from_buffer+0x16>
		usart1_sending_off();
 8001552:	f000 f8bf 	bl	80016d4 <usart1_sending_off>
		return 1;
 8001556:	2301      	movs	r3, #1
 8001558:	e026      	b.n	80015a8 <_send_byte_from_buffer+0x64>
	}
	if ((USART1->ISR & USART_ISR_TXE)==0) return 2;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <_send_byte_from_buffer+0x70>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	4013      	ands	r3, r2
 8001562:	d101      	bne.n	8001568 <_send_byte_from_buffer+0x24>
 8001564:	2302      	movs	r3, #2
 8001566:	e01f      	b.n	80015a8 <_send_byte_from_buffer+0x64>
	send_cursor = send_cursor + 1;
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_send_byte_from_buffer+0x74>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_send_byte_from_buffer+0x74>)
 8001572:	701a      	strb	r2, [r3, #0]

	if(send_cursor >= MAX_SEND_BUF) send_cursor = 0;
 8001574:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_send_byte_from_buffer+0x74>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b1f      	cmp	r3, #31
 800157a:	d902      	bls.n	8001582 <_send_byte_from_buffer+0x3e>
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <_send_byte_from_buffer+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
	uint8_t to_be_sent = (uint8_t)send_cycle_buffer[send_cursor];
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <_send_byte_from_buffer+0x74>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	0019      	movs	r1, r3
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <_send_byte_from_buffer+0x78>)
 800158c:	5c52      	ldrb	r2, [r2, r1]
 800158e:	701a      	strb	r2, [r3, #0]
	remaining_bytes = remaining_bytes - 1;
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_send_byte_from_buffer+0x6c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	3b01      	subs	r3, #1
 8001596:	b2da      	uxtb	r2, r3
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <_send_byte_from_buffer+0x6c>)
 800159a:	701a      	strb	r2, [r3, #0]
	USART1->TDR = to_be_sent;
 800159c:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <_send_byte_from_buffer+0x70>)
 800159e:	1dfb      	adds	r3, r7, #7
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	8513      	strh	r3, [r2, #40]	; 0x28
	return 0;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20002000 	.word	0x20002000
 80015b4:	40013800 	.word	0x40013800
 80015b8:	20002048 	.word	0x20002048
 80015bc:	2000204c 	.word	0x2000204c

080015c0 <is_acceptable>:

uint8_t is_acceptable(char k) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	0002      	movs	r2, r0
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	701a      	strb	r2, [r3, #0]
	if (k>='0' && k <='9') return 1;
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b2f      	cmp	r3, #47	; 0x2f
 80015d2:	d905      	bls.n	80015e0 <is_acceptable+0x20>
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b39      	cmp	r3, #57	; 0x39
 80015da:	d801      	bhi.n	80015e0 <is_acceptable+0x20>
 80015dc:	2301      	movs	r3, #1
 80015de:	e032      	b.n	8001646 <is_acceptable+0x86>
	if (k=='+' || k=='-' || k==';' || k=='.'|| k==',' || k==' '|| k=='!') return 1;
 80015e0:	1dfb      	adds	r3, r7, #7
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b2b      	cmp	r3, #43	; 0x2b
 80015e6:	d017      	beq.n	8001618 <is_acceptable+0x58>
 80015e8:	1dfb      	adds	r3, r7, #7
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b2d      	cmp	r3, #45	; 0x2d
 80015ee:	d013      	beq.n	8001618 <is_acceptable+0x58>
 80015f0:	1dfb      	adds	r3, r7, #7
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b3b      	cmp	r3, #59	; 0x3b
 80015f6:	d00f      	beq.n	8001618 <is_acceptable+0x58>
 80015f8:	1dfb      	adds	r3, r7, #7
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b2e      	cmp	r3, #46	; 0x2e
 80015fe:	d00b      	beq.n	8001618 <is_acceptable+0x58>
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b2c      	cmp	r3, #44	; 0x2c
 8001606:	d007      	beq.n	8001618 <is_acceptable+0x58>
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b20      	cmp	r3, #32
 800160e:	d003      	beq.n	8001618 <is_acceptable+0x58>
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b21      	cmp	r3, #33	; 0x21
 8001616:	d101      	bne.n	800161c <is_acceptable+0x5c>
 8001618:	2301      	movs	r3, #1
 800161a:	e014      	b.n	8001646 <is_acceptable+0x86>
	if (k>='a' && k<='z') return 1;
 800161c:	1dfb      	adds	r3, r7, #7
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b60      	cmp	r3, #96	; 0x60
 8001622:	d905      	bls.n	8001630 <is_acceptable+0x70>
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b7a      	cmp	r3, #122	; 0x7a
 800162a:	d801      	bhi.n	8001630 <is_acceptable+0x70>
 800162c:	2301      	movs	r3, #1
 800162e:	e00a      	b.n	8001646 <is_acceptable+0x86>
	if (k>='A' && k<='Z') return 1;
 8001630:	1dfb      	adds	r3, r7, #7
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b40      	cmp	r3, #64	; 0x40
 8001636:	d905      	bls.n	8001644 <is_acceptable+0x84>
 8001638:	1dfb      	adds	r3, r7, #7
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b5a      	cmp	r3, #90	; 0x5a
 800163e:	d801      	bhi.n	8001644 <is_acceptable+0x84>
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <is_acceptable+0x86>
	return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <_byte_accepted>:

void _byte_accepted() {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
	uint8_t d = USART1->RDR;
 8001656:	4b15      	ldr	r3, [pc, #84]	; (80016ac <_byte_accepted+0x5c>)
 8001658:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800165a:	b29a      	uxth	r2, r3
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	701a      	strb	r2, [r3, #0]
	if (is_acceptable((char)d)) {
 8001660:	1dfb      	adds	r3, r7, #7
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff ffab 	bl	80015c0 <is_acceptable>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d019      	beq.n	80016a2 <_byte_accepted+0x52>
		if(stm_cmd_cursor>=MAX_CMD_BUF) {
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <_byte_accepted+0x60>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b3e      	cmp	r3, #62	; 0x3e
 8001674:	d902      	bls.n	800167c <_byte_accepted+0x2c>
			stm_cmd_cursor = 0;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <_byte_accepted+0x60>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
		}
		stm_cmd_buffer[stm_cmd_cursor] = (char)d;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <_byte_accepted+0x60>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	0019      	movs	r1, r3
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <_byte_accepted+0x64>)
 8001684:	1dfa      	adds	r2, r7, #7
 8001686:	7812      	ldrb	r2, [r2, #0]
 8001688:	545a      	strb	r2, [r3, r1]
		stm_cmd_buffer[stm_cmd_cursor + 1] = 0;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <_byte_accepted+0x60>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <_byte_accepted+0x64>)
 8001692:	2100      	movs	r1, #0
 8001694:	54d1      	strb	r1, [r2, r3]
		stm_cmd_cursor = stm_cmd_cursor + 1;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <_byte_accepted+0x60>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <_byte_accepted+0x60>)
 80016a0:	701a      	strb	r2, [r3, #0]
	}
}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b002      	add	sp, #8
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	40013800 	.word	0x40013800
 80016b0:	2000206e 	.word	0x2000206e
 80016b4:	20002008 	.word	0x20002008

080016b8 <usart1_sending_on>:

void usart1_sending_on() {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	USART1->CR1 |= USART_CR1_TXEIE;
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <usart1_sending_on+0x18>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <usart1_sending_on+0x18>)
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	430a      	orrs	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
}
 80016c8:	46c0      	nop			; (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	40013800 	.word	0x40013800

080016d4 <usart1_sending_off>:

void usart1_sending_off() {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	USART1->CR1 &= ~USART_CR1_TXEIE;
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <usart1_sending_off+0x18>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <usart1_sending_off+0x18>)
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	438a      	bics	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	40013800 	.word	0x40013800

080016f0 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	if(USART1->ISR & USART_ISR_RXNE) {
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <USART1_IRQHandler+0x48>)
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	2220      	movs	r2, #32
 80016fa:	4013      	ands	r3, r2
 80016fc:	d002      	beq.n	8001704 <USART1_IRQHandler+0x14>
		_byte_accepted();
 80016fe:	f7ff ffa7 	bl	8001650 <_byte_accepted>
		return;
 8001702:	e016      	b.n	8001732 <USART1_IRQHandler+0x42>
	}
	if(USART1->ISR & USART_ISR_ORE) {
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <USART1_IRQHandler+0x48>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	2208      	movs	r2, #8
 800170a:	4013      	ands	r3, r2
 800170c:	d009      	beq.n	8001722 <USART1_IRQHandler+0x32>
		USART1->ICR = (UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <USART1_IRQHandler+0x48>)
 8001710:	220f      	movs	r2, #15
 8001712:	621a      	str	r2, [r3, #32]
		USART1->CR1 &= ~USART_CR1_IDLEIE;
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <USART1_IRQHandler+0x48>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b07      	ldr	r3, [pc, #28]	; (8001738 <USART1_IRQHandler+0x48>)
 800171a:	2110      	movs	r1, #16
 800171c:	438a      	bics	r2, r1
 800171e:	601a      	str	r2, [r3, #0]
		return;
 8001720:	e007      	b.n	8001732 <USART1_IRQHandler+0x42>
	}
	if(USART1->ISR & USART_ISR_TXE) {
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <USART1_IRQHandler+0x48>)
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	2280      	movs	r2, #128	; 0x80
 8001728:	4013      	ands	r3, r2
 800172a:	d002      	beq.n	8001732 <USART1_IRQHandler+0x42>
		_send_byte_from_buffer();
 800172c:	f7ff ff0a 	bl	8001544 <_send_byte_from_buffer>
		return;
 8001730:	46c0      	nop			; (mov r8, r8)
	}

}
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	40013800 	.word	0x40013800

0800173c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800174a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <LoopForever+0x6>)
  ldr r1, =_edata
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <LoopForever+0xe>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001764:	4c0b      	ldr	r4, [pc, #44]	; (8001794 <LoopForever+0x16>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001772:	f7ff ffe3 	bl	800173c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001776:	f004 fc99 	bl	80060ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800177a:	f7ff f8eb 	bl	8000954 <main>

0800177e <LoopForever>:

LoopForever:
    b LoopForever
 800177e:	e7fe      	b.n	800177e <LoopForever>
  ldr   r0, =_estack
 8001780:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800178c:	0800776c 	.word	0x0800776c
  ldr r2, =_sbss
 8001790:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001794:	200020b4 	.word	0x200020b4

08001798 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC1_IRQHandler>
	...

0800179c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <HAL_Init+0x24>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_Init+0x24>)
 80017a6:	2110      	movs	r1, #16
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff fdd5 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b2:	f7ff fc95 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_IncTick+0x1c>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	001a      	movs	r2, r3
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_IncTick+0x20>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	18d2      	adds	r2, r2, r3
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_IncTick+0x20>)
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	20000014 	.word	0x20000014
 80017e4:	20002070 	.word	0x20002070

080017e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b02      	ldr	r3, [pc, #8]	; (80017f8 <HAL_GetTick+0x10>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	20002070 	.word	0x20002070

080017fc <__NVIC_EnableIRQ>:
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	0002      	movs	r2, r0
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001808:	1dfb      	adds	r3, r7, #7
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b7f      	cmp	r3, #127	; 0x7f
 800180e:	d809      	bhi.n	8001824 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001810:	1dfb      	adds	r3, r7, #7
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	001a      	movs	r2, r3
 8001816:	231f      	movs	r3, #31
 8001818:	401a      	ands	r2, r3
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <__NVIC_EnableIRQ+0x30>)
 800181c:	2101      	movs	r1, #1
 800181e:	4091      	lsls	r1, r2
 8001820:	000a      	movs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b002      	add	sp, #8
 800182a:	bd80      	pop	{r7, pc}
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	0002      	movs	r2, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	1dfb      	adds	r3, r7, #7
 800183c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800183e:	1dfb      	adds	r3, r7, #7
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b7f      	cmp	r3, #127	; 0x7f
 8001844:	d828      	bhi.n	8001898 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001846:	4a2f      	ldr	r2, [pc, #188]	; (8001904 <__NVIC_SetPriority+0xd4>)
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b25b      	sxtb	r3, r3
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	33c0      	adds	r3, #192	; 0xc0
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	589b      	ldr	r3, [r3, r2]
 8001856:	1dfa      	adds	r2, r7, #7
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	0011      	movs	r1, r2
 800185c:	2203      	movs	r2, #3
 800185e:	400a      	ands	r2, r1
 8001860:	00d2      	lsls	r2, r2, #3
 8001862:	21ff      	movs	r1, #255	; 0xff
 8001864:	4091      	lsls	r1, r2
 8001866:	000a      	movs	r2, r1
 8001868:	43d2      	mvns	r2, r2
 800186a:	401a      	ands	r2, r3
 800186c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	019b      	lsls	r3, r3, #6
 8001872:	22ff      	movs	r2, #255	; 0xff
 8001874:	401a      	ands	r2, r3
 8001876:	1dfb      	adds	r3, r7, #7
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	0018      	movs	r0, r3
 800187c:	2303      	movs	r3, #3
 800187e:	4003      	ands	r3, r0
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001884:	481f      	ldr	r0, [pc, #124]	; (8001904 <__NVIC_SetPriority+0xd4>)
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b25b      	sxtb	r3, r3
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	430a      	orrs	r2, r1
 8001890:	33c0      	adds	r3, #192	; 0xc0
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001896:	e031      	b.n	80018fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <__NVIC_SetPriority+0xd8>)
 800189a:	1dfb      	adds	r3, r7, #7
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	0019      	movs	r1, r3
 80018a0:	230f      	movs	r3, #15
 80018a2:	400b      	ands	r3, r1
 80018a4:	3b08      	subs	r3, #8
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3306      	adds	r3, #6
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	18d3      	adds	r3, r2, r3
 80018ae:	3304      	adds	r3, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	1dfa      	adds	r2, r7, #7
 80018b4:	7812      	ldrb	r2, [r2, #0]
 80018b6:	0011      	movs	r1, r2
 80018b8:	2203      	movs	r2, #3
 80018ba:	400a      	ands	r2, r1
 80018bc:	00d2      	lsls	r2, r2, #3
 80018be:	21ff      	movs	r1, #255	; 0xff
 80018c0:	4091      	lsls	r1, r2
 80018c2:	000a      	movs	r2, r1
 80018c4:	43d2      	mvns	r2, r2
 80018c6:	401a      	ands	r2, r3
 80018c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	22ff      	movs	r2, #255	; 0xff
 80018d0:	401a      	ands	r2, r3
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	0018      	movs	r0, r3
 80018d8:	2303      	movs	r3, #3
 80018da:	4003      	ands	r3, r0
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <__NVIC_SetPriority+0xd8>)
 80018e2:	1dfb      	adds	r3, r7, #7
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	001c      	movs	r4, r3
 80018e8:	230f      	movs	r3, #15
 80018ea:	4023      	ands	r3, r4
 80018ec:	3b08      	subs	r3, #8
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	430a      	orrs	r2, r1
 80018f2:	3306      	adds	r3, #6
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	18c3      	adds	r3, r0, r3
 80018f8:	3304      	adds	r3, #4
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b003      	add	sp, #12
 8001902:	bd90      	pop	{r4, r7, pc}
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	210f      	movs	r1, #15
 8001918:	187b      	adds	r3, r7, r1
 800191a:	1c02      	adds	r2, r0, #0
 800191c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	187b      	adds	r3, r7, r1
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b25b      	sxtb	r3, r3
 8001926:	0011      	movs	r1, r2
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff ff81 	bl	8001830 <__NVIC_SetPriority>
}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b004      	add	sp, #16
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	0002      	movs	r2, r0
 800193e:	1dfb      	adds	r3, r7, #7
 8001940:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001942:	1dfb      	adds	r3, r7, #7
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	b25b      	sxtb	r3, r3
 8001948:	0018      	movs	r0, r3
 800194a:	f7ff ff57 	bl	80017fc <__NVIC_EnableIRQ>
}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	46bd      	mov	sp, r7
 8001952:	b002      	add	sp, #8
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	e14f      	b.n	8001c08 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4091      	lsls	r1, r2
 8001972:	000a      	movs	r2, r1
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d100      	bne.n	8001980 <HAL_GPIO_Init+0x28>
 800197e:	e140      	b.n	8001c02 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d00b      	beq.n	80019a0 <HAL_GPIO_Init+0x48>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d007      	beq.n	80019a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001994:	2b11      	cmp	r3, #17
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b12      	cmp	r3, #18
 800199e:	d130      	bne.n	8001a02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	2203      	movs	r2, #3
 80019ac:	409a      	lsls	r2, r3
 80019ae:	0013      	movs	r3, r2
 80019b0:	43da      	mvns	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	409a      	lsls	r2, r3
 80019c2:	0013      	movs	r3, r2
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019d6:	2201      	movs	r2, #1
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	43da      	mvns	r2, r3
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	2201      	movs	r2, #1
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
 80019f4:	0013      	movs	r3, r2
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	0013      	movs	r3, r2
 8001a12:	43da      	mvns	r2, r3
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4013      	ands	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0xea>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d123      	bne.n	8001a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	58d3      	ldr	r3, [r2, r3]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2207      	movs	r2, #7
 8001a54:	4013      	ands	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	2107      	movs	r1, #7
 8001a6e:	400b      	ands	r3, r1
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	409a      	lsls	r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	0092      	lsls	r2, r2, #2
 8001a86:	6939      	ldr	r1, [r7, #16]
 8001a88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	409a      	lsls	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	055b      	lsls	r3, r3, #21
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d100      	bne.n	8001acc <HAL_GPIO_Init+0x174>
 8001aca:	e09a      	b.n	8001c02 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001acc:	4b54      	ldr	r3, [pc, #336]	; (8001c20 <HAL_GPIO_Init+0x2c8>)
 8001ace:	699a      	ldr	r2, [r3, #24]
 8001ad0:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <HAL_GPIO_Init+0x2c8>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	619a      	str	r2, [r3, #24]
 8001ad8:	4b51      	ldr	r3, [pc, #324]	; (8001c20 <HAL_GPIO_Init+0x2c8>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ae4:	4a4f      	ldr	r2, [pc, #316]	; (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	589b      	ldr	r3, [r3, r2]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2203      	movs	r2, #3
 8001af6:	4013      	ands	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	409a      	lsls	r2, r3
 8001afe:	0013      	movs	r3, r2
 8001b00:	43da      	mvns	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	2390      	movs	r3, #144	; 0x90
 8001b0c:	05db      	lsls	r3, r3, #23
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0x1e2>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a44      	ldr	r2, [pc, #272]	; (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x1de>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a43      	ldr	r2, [pc, #268]	; (8001c2c <HAL_GPIO_Init+0x2d4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x1da>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a42      	ldr	r2, [pc, #264]	; (8001c30 <HAL_GPIO_Init+0x2d8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x1d6>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x1e4>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x1e4>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x1e4>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x1e4>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	2103      	movs	r1, #3
 8001b40:	400a      	ands	r2, r1
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b4c:	4935      	ldr	r1, [pc, #212]	; (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b5a:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	43da      	mvns	r2, r3
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	025b      	lsls	r3, r3, #9
 8001b72:	4013      	ands	r3, r2
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	029b      	lsls	r3, r3, #10
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ba8:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bae:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	2380      	movs	r3, #128	; 0x80
 8001bc4:	035b      	lsls	r3, r3, #13
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43da      	mvns	r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	039b      	lsls	r3, r3, #14
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	40da      	lsrs	r2, r3
 8001c10:	1e13      	subs	r3, r2, #0
 8001c12:	d000      	beq.n	8001c16 <HAL_GPIO_Init+0x2be>
 8001c14:	e6a8      	b.n	8001968 <HAL_GPIO_Init+0x10>
  } 
}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b006      	add	sp, #24
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40010000 	.word	0x40010000
 8001c28:	48000400 	.word	0x48000400
 8001c2c:	48000800 	.word	0x48000800
 8001c30:	48000c00 	.word	0x48000c00
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	000a      	movs	r2, r1
 8001c42:	1cbb      	adds	r3, r7, #2
 8001c44:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	1cba      	adds	r2, r7, #2
 8001c4c:	8812      	ldrh	r2, [r2, #0]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c52:	230f      	movs	r3, #15
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	e003      	b.n	8001c64 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001c64:	230f      	movs	r3, #15
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	781b      	ldrb	r3, [r3, #0]
  }
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b004      	add	sp, #16
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	0008      	movs	r0, r1
 8001c7c:	0011      	movs	r1, r2
 8001c7e:	1cbb      	adds	r3, r7, #2
 8001c80:	1c02      	adds	r2, r0, #0
 8001c82:	801a      	strh	r2, [r3, #0]
 8001c84:	1c7b      	adds	r3, r7, #1
 8001c86:	1c0a      	adds	r2, r1, #0
 8001c88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8a:	1c7b      	adds	r3, r7, #1
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d004      	beq.n	8001c9c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c92:	1cbb      	adds	r3, r7, #2
 8001c94:	881a      	ldrh	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c9a:	e003      	b.n	8001ca4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c9c:	1cbb      	adds	r3, r7, #2
 8001c9e:	881a      	ldrh	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b002      	add	sp, #8
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e082      	b.n	8001dc4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2241      	movs	r2, #65	; 0x41
 8001cc2:	5c9b      	ldrb	r3, [r3, r2]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d107      	bne.n	8001cda <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2240      	movs	r2, #64	; 0x40
 8001cce:	2100      	movs	r1, #0
 8001cd0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7ff fa2d 	bl	8001134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2241      	movs	r2, #65	; 0x41
 8001cde:	2124      	movs	r1, #36	; 0x24
 8001ce0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2101      	movs	r1, #1
 8001cee:	438a      	bics	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4934      	ldr	r1, [pc, #208]	; (8001dcc <HAL_I2C_Init+0x120>)
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4931      	ldr	r1, [pc, #196]	; (8001dd0 <HAL_I2C_Init+0x124>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d108      	bne.n	8001d2a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	0209      	lsls	r1, r1, #8
 8001d24:	430a      	orrs	r2, r1
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	e007      	b.n	8001d3a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2184      	movs	r1, #132	; 0x84
 8001d34:	0209      	lsls	r1, r1, #8
 8001d36:	430a      	orrs	r2, r1
 8001d38:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d104      	bne.n	8001d4c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	491f      	ldr	r1, [pc, #124]	; (8001dd4 <HAL_I2C_Init+0x128>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68da      	ldr	r2, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	491a      	ldr	r1, [pc, #104]	; (8001dd0 <HAL_I2C_Init+0x124>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	0011      	movs	r1, r2
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	021a      	lsls	r2, r3, #8
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69d9      	ldr	r1, [r3, #28]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1a      	ldr	r2, [r3, #32]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2101      	movs	r1, #1
 8001da2:	430a      	orrs	r2, r1
 8001da4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2241      	movs	r2, #65	; 0x41
 8001db0:	2120      	movs	r1, #32
 8001db2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2242      	movs	r2, #66	; 0x42
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b002      	add	sp, #8
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	f0ffffff 	.word	0xf0ffffff
 8001dd0:	ffff7fff 	.word	0xffff7fff
 8001dd4:	02008000 	.word	0x02008000

08001dd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	0008      	movs	r0, r1
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	0019      	movs	r1, r3
 8001de6:	230a      	movs	r3, #10
 8001de8:	18fb      	adds	r3, r7, r3
 8001dea:	1c02      	adds	r2, r0, #0
 8001dec:	801a      	strh	r2, [r3, #0]
 8001dee:	2308      	movs	r3, #8
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	1c0a      	adds	r2, r1, #0
 8001df4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2241      	movs	r2, #65	; 0x41
 8001dfa:	5c9b      	ldrb	r3, [r3, r2]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d000      	beq.n	8001e04 <HAL_I2C_Master_Transmit+0x2c>
 8001e02:	e0e7      	b.n	8001fd4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	5c9b      	ldrb	r3, [r3, r2]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_I2C_Master_Transmit+0x3a>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e0e1      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1fe>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e1a:	f7ff fce5 	bl	80017e8 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e22:	2380      	movs	r3, #128	; 0x80
 8001e24:	0219      	lsls	r1, r3, #8
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2319      	movs	r3, #25
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f000 fa16 	bl	8002260 <I2C_WaitOnFlagUntilTimeout>
 8001e34:	1e03      	subs	r3, r0, #0
 8001e36:	d001      	beq.n	8001e3c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0cc      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2241      	movs	r2, #65	; 0x41
 8001e40:	2121      	movs	r1, #33	; 0x21
 8001e42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2242      	movs	r2, #66	; 0x42
 8001e48:	2110      	movs	r1, #16
 8001e4a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	18ba      	adds	r2, r7, r2
 8001e5e:	8812      	ldrh	r2, [r2, #0]
 8001e60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2200      	movs	r2, #0
 8001e66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2bff      	cmp	r3, #255	; 0xff
 8001e70:	d911      	bls.n	8001e96 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	22ff      	movs	r2, #255	; 0xff
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	045c      	lsls	r4, r3, #17
 8001e82:	230a      	movs	r3, #10
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	8819      	ldrh	r1, [r3, #0]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <HAL_I2C_Master_Transmit+0x208>)
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	0023      	movs	r3, r4
 8001e90:	f000 fb06 	bl	80024a0 <I2C_TransferConfig>
 8001e94:	e075      	b.n	8001f82 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	049c      	lsls	r4, r3, #18
 8001eaa:	230a      	movs	r3, #10
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	8819      	ldrh	r1, [r3, #0]
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	4b4b      	ldr	r3, [pc, #300]	; (8001fe0 <HAL_I2C_Master_Transmit+0x208>)
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	0023      	movs	r3, r4
 8001eb8:	f000 faf2 	bl	80024a0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ebc:	e061      	b.n	8001f82 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f000 fa0a 	bl	80022de <I2C_WaitOnTXISFlagUntilTimeout>
 8001eca:	1e03      	subs	r3, r0, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e081      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d03a      	beq.n	8001f82 <HAL_I2C_Master_Transmit+0x1aa>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d136      	bne.n	8001f82 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	f000 f99d 	bl	8002260 <I2C_WaitOnFlagUntilTimeout>
 8001f26:	1e03      	subs	r3, r0, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e053      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2bff      	cmp	r3, #255	; 0xff
 8001f36:	d911      	bls.n	8001f5c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	22ff      	movs	r2, #255	; 0xff
 8001f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	045c      	lsls	r4, r3, #17
 8001f48:	230a      	movs	r3, #10
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	8819      	ldrh	r1, [r3, #0]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	2300      	movs	r3, #0
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	0023      	movs	r3, r4
 8001f56:	f000 faa3 	bl	80024a0 <I2C_TransferConfig>
 8001f5a:	e012      	b.n	8001f82 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	049c      	lsls	r4, r3, #18
 8001f70:	230a      	movs	r3, #10
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	8819      	ldrh	r1, [r3, #0]
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	0023      	movs	r3, r4
 8001f7e:	f000 fa8f 	bl	80024a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d198      	bne.n	8001ebe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	0018      	movs	r0, r3
 8001f94:	f000 f9e2 	bl	800235c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f98:	1e03      	subs	r3, r0, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e01a      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	490c      	ldr	r1, [pc, #48]	; (8001fe4 <HAL_I2C_Master_Transmit+0x20c>)
 8001fb4:	400a      	ands	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2241      	movs	r2, #65	; 0x41
 8001fbc:	2120      	movs	r1, #32
 8001fbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2242      	movs	r2, #66	; 0x42
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2240      	movs	r2, #64	; 0x40
 8001fcc:	2100      	movs	r1, #0
 8001fce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e000      	b.n	8001fd6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001fd4:	2302      	movs	r3, #2
  }
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b007      	add	sp, #28
 8001fdc:	bd90      	pop	{r4, r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	80002000 	.word	0x80002000
 8001fe4:	fe00e800 	.word	0xfe00e800

08001fe8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	; 0x28
 8001fec:	af02      	add	r7, sp, #8
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	603b      	str	r3, [r7, #0]
 8001ff4:	230a      	movs	r3, #10
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	1c0a      	adds	r2, r1, #0
 8001ffa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2241      	movs	r2, #65	; 0x41
 8002004:	5c9b      	ldrb	r3, [r3, r2]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b20      	cmp	r3, #32
 800200a:	d000      	beq.n	800200e <HAL_I2C_IsDeviceReady+0x26>
 800200c:	e0fe      	b.n	800220c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	401a      	ands	r2, r3
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	021b      	lsls	r3, r3, #8
 800201e:	429a      	cmp	r2, r3
 8002020:	d101      	bne.n	8002026 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8002022:	2302      	movs	r3, #2
 8002024:	e0f3      	b.n	800220e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	5c9b      	ldrb	r3, [r3, r2]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_I2C_IsDeviceReady+0x4c>
 8002030:	2302      	movs	r3, #2
 8002032:	e0ec      	b.n	800220e <HAL_I2C_IsDeviceReady+0x226>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2240      	movs	r2, #64	; 0x40
 8002038:	2101      	movs	r1, #1
 800203a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2241      	movs	r2, #65	; 0x41
 8002040:	2124      	movs	r1, #36	; 0x24
 8002042:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <HAL_I2C_IsDeviceReady+0x7a>
 8002052:	230a      	movs	r3, #10
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	059b      	lsls	r3, r3, #22
 800205a:	0d9b      	lsrs	r3, r3, #22
 800205c:	4a6e      	ldr	r2, [pc, #440]	; (8002218 <HAL_I2C_IsDeviceReady+0x230>)
 800205e:	431a      	orrs	r2, r3
 8002060:	e007      	b.n	8002072 <HAL_I2C_IsDeviceReady+0x8a>
 8002062:	230a      	movs	r3, #10
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	059b      	lsls	r3, r3, #22
 800206a:	0d9b      	lsrs	r3, r3, #22
 800206c:	22a0      	movs	r2, #160	; 0xa0
 800206e:	0192      	lsls	r2, r2, #6
 8002070:	431a      	orrs	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002078:	f7ff fbb6 	bl	80017e8 <HAL_GetTick>
 800207c:	0003      	movs	r3, r0
 800207e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2220      	movs	r2, #32
 8002088:	4013      	ands	r3, r2
 800208a:	3b20      	subs	r3, #32
 800208c:	425a      	negs	r2, r3
 800208e:	4153      	adcs	r3, r2
 8002090:	b2da      	uxtb	r2, r3
 8002092:	231f      	movs	r3, #31
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2210      	movs	r2, #16
 80020a0:	4013      	ands	r3, r2
 80020a2:	3b10      	subs	r3, #16
 80020a4:	425a      	negs	r2, r3
 80020a6:	4153      	adcs	r3, r2
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	231e      	movs	r3, #30
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80020b0:	e035      	b.n	800211e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	d01a      	beq.n	80020ee <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020b8:	f7ff fb96 	bl	80017e8 <HAL_GetTick>
 80020bc:	0002      	movs	r2, r0
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d302      	bcc.n	80020ce <HAL_I2C_IsDeviceReady+0xe6>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10f      	bne.n	80020ee <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2241      	movs	r2, #65	; 0x41
 80020d2:	2120      	movs	r1, #32
 80020d4:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	2220      	movs	r2, #32
 80020dc:	431a      	orrs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	2100      	movs	r1, #0
 80020e8:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e08f      	b.n	800220e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2220      	movs	r2, #32
 80020f6:	4013      	ands	r3, r2
 80020f8:	3b20      	subs	r3, #32
 80020fa:	425a      	negs	r2, r3
 80020fc:	4153      	adcs	r3, r2
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	231f      	movs	r3, #31
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2210      	movs	r2, #16
 800210e:	4013      	ands	r3, r2
 8002110:	3b10      	subs	r3, #16
 8002112:	425a      	negs	r2, r3
 8002114:	4153      	adcs	r3, r2
 8002116:	b2da      	uxtb	r2, r3
 8002118:	231e      	movs	r3, #30
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800211e:	231f      	movs	r3, #31
 8002120:	18fb      	adds	r3, r7, r3
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d104      	bne.n	8002132 <HAL_I2C_IsDeviceReady+0x14a>
 8002128:	231e      	movs	r3, #30
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0bf      	beq.n	80020b2 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	2210      	movs	r2, #16
 800213a:	4013      	ands	r3, r2
 800213c:	2b10      	cmp	r3, #16
 800213e:	d01a      	beq.n	8002176 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	0013      	movs	r3, r2
 800214a:	2200      	movs	r2, #0
 800214c:	2120      	movs	r1, #32
 800214e:	f000 f887 	bl	8002260 <I2C_WaitOnFlagUntilTimeout>
 8002152:	1e03      	subs	r3, r0, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e059      	b.n	800220e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2220      	movs	r2, #32
 8002160:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2241      	movs	r2, #65	; 0x41
 8002166:	2120      	movs	r1, #32
 8002168:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2240      	movs	r2, #64	; 0x40
 800216e:	2100      	movs	r1, #0
 8002170:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	e04b      	b.n	800220e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	0013      	movs	r3, r2
 8002180:	2200      	movs	r2, #0
 8002182:	2120      	movs	r1, #32
 8002184:	f000 f86c 	bl	8002260 <I2C_WaitOnFlagUntilTimeout>
 8002188:	1e03      	subs	r3, r0, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e03e      	b.n	800220e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2210      	movs	r2, #16
 8002196:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2220      	movs	r2, #32
 800219e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d119      	bne.n	80021dc <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	01c9      	lsls	r1, r1, #7
 80021b6:	430a      	orrs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	0013      	movs	r3, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	2120      	movs	r1, #32
 80021c8:	f000 f84a 	bl	8002260 <I2C_WaitOnFlagUntilTimeout>
 80021cc:	1e03      	subs	r3, r0, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e01c      	b.n	800220e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2220      	movs	r2, #32
 80021da:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d900      	bls.n	80021ec <HAL_I2C_IsDeviceReady+0x204>
 80021ea:	e72e      	b.n	800204a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2241      	movs	r2, #65	; 0x41
 80021f0:	2120      	movs	r1, #32
 80021f2:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	2220      	movs	r2, #32
 80021fa:	431a      	orrs	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	2100      	movs	r1, #0
 8002206:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
  }
}
 800220e:	0018      	movs	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	b008      	add	sp, #32
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	02002000 	.word	0x02002000

0800221c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2202      	movs	r2, #2
 800222c:	4013      	ands	r3, r2
 800222e:	2b02      	cmp	r3, #2
 8002230:	d103      	bne.n	800223a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2201      	movs	r2, #1
 8002242:	4013      	ands	r3, r2
 8002244:	2b01      	cmp	r3, #1
 8002246:	d007      	beq.n	8002258 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2101      	movs	r1, #1
 8002254:	430a      	orrs	r2, r1
 8002256:	619a      	str	r2, [r3, #24]
  }
}
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}

08002260 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	1dfb      	adds	r3, r7, #7
 800226e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002270:	e021      	b.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	3301      	adds	r3, #1
 8002276:	d01e      	beq.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002278:	f7ff fab6 	bl	80017e8 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d302      	bcc.n	800228e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d113      	bne.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	2220      	movs	r2, #32
 8002294:	431a      	orrs	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2241      	movs	r2, #65	; 0x41
 800229e:	2120      	movs	r1, #32
 80022a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2242      	movs	r2, #66	; 0x42
 80022a6:	2100      	movs	r1, #0
 80022a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2240      	movs	r2, #64	; 0x40
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e00f      	b.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	4013      	ands	r3, r2
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	425a      	negs	r2, r3
 80022c6:	4153      	adcs	r3, r2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	001a      	movs	r2, r3
 80022cc:	1dfb      	adds	r3, r7, #7
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d0ce      	beq.n	8002272 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b004      	add	sp, #16
 80022dc:	bd80      	pop	{r7, pc}

080022de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022ea:	e02b      	b.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 f86e 	bl	80023d4 <I2C_IsAcknowledgeFailed>
 80022f8:	1e03      	subs	r3, r0, #0
 80022fa:	d001      	beq.n	8002300 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e029      	b.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	3301      	adds	r3, #1
 8002304:	d01e      	beq.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002306:	f7ff fa6f 	bl	80017e8 <HAL_GetTick>
 800230a:	0002      	movs	r2, r0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	429a      	cmp	r2, r3
 8002314:	d302      	bcc.n	800231c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d113      	bne.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	2220      	movs	r2, #32
 8002322:	431a      	orrs	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2241      	movs	r2, #65	; 0x41
 800232c:	2120      	movs	r1, #32
 800232e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2242      	movs	r2, #66	; 0x42
 8002334:	2100      	movs	r1, #0
 8002336:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	2100      	movs	r1, #0
 800233e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e007      	b.n	8002354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d1cc      	bne.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	b004      	add	sp, #16
 800235a:	bd80      	pop	{r7, pc}

0800235c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002368:	e028      	b.n	80023bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 f82f 	bl	80023d4 <I2C_IsAcknowledgeFailed>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d001      	beq.n	800237e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e026      	b.n	80023cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7ff fa33 	bl	80017e8 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d113      	bne.n	80023bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002398:	2220      	movs	r2, #32
 800239a:	431a      	orrs	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2241      	movs	r2, #65	; 0x41
 80023a4:	2120      	movs	r1, #32
 80023a6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2242      	movs	r2, #66	; 0x42
 80023ac:	2100      	movs	r1, #0
 80023ae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2240      	movs	r2, #64	; 0x40
 80023b4:	2100      	movs	r1, #0
 80023b6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e007      	b.n	80023cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2220      	movs	r2, #32
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d1cf      	bne.n	800236a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b004      	add	sp, #16
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2210      	movs	r2, #16
 80023e8:	4013      	ands	r3, r2
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d151      	bne.n	8002492 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ee:	e021      	b.n	8002434 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3301      	adds	r3, #1
 80023f4:	d01e      	beq.n	8002434 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f6:	f7ff f9f7 	bl	80017e8 <HAL_GetTick>
 80023fa:	0002      	movs	r2, r0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	429a      	cmp	r2, r3
 8002404:	d302      	bcc.n	800240c <I2C_IsAcknowledgeFailed+0x38>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d113      	bne.n	8002434 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	2220      	movs	r2, #32
 8002412:	431a      	orrs	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2241      	movs	r2, #65	; 0x41
 800241c:	2120      	movs	r1, #32
 800241e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2242      	movs	r2, #66	; 0x42
 8002424:	2100      	movs	r1, #0
 8002426:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	2100      	movs	r1, #0
 800242e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e02f      	b.n	8002494 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	2220      	movs	r2, #32
 800243c:	4013      	ands	r3, r2
 800243e:	2b20      	cmp	r3, #32
 8002440:	d1d6      	bne.n	80023f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2210      	movs	r2, #16
 8002448:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2220      	movs	r2, #32
 8002450:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	0018      	movs	r0, r3
 8002456:	f7ff fee1 	bl	800221c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	490d      	ldr	r1, [pc, #52]	; (800249c <I2C_IsAcknowledgeFailed+0xc8>)
 8002466:	400a      	ands	r2, r1
 8002468:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	2204      	movs	r2, #4
 8002470:	431a      	orrs	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2241      	movs	r2, #65	; 0x41
 800247a:	2120      	movs	r1, #32
 800247c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2242      	movs	r2, #66	; 0x42
 8002482:	2100      	movs	r1, #0
 8002484:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2240      	movs	r2, #64	; 0x40
 800248a:	2100      	movs	r1, #0
 800248c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	0018      	movs	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	b004      	add	sp, #16
 800249a:	bd80      	pop	{r7, pc}
 800249c:	fe00e800 	.word	0xfe00e800

080024a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	0008      	movs	r0, r1
 80024aa:	0011      	movs	r1, r2
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	240a      	movs	r4, #10
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	1c02      	adds	r2, r0, #0
 80024b4:	801a      	strh	r2, [r3, #0]
 80024b6:	2009      	movs	r0, #9
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	1c0a      	adds	r2, r1, #0
 80024bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	6a3a      	ldr	r2, [r7, #32]
 80024c6:	0d51      	lsrs	r1, r2, #21
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	00d2      	lsls	r2, r2, #3
 80024cc:	400a      	ands	r2, r1
 80024ce:	490e      	ldr	r1, [pc, #56]	; (8002508 <I2C_TransferConfig+0x68>)
 80024d0:	430a      	orrs	r2, r1
 80024d2:	43d2      	mvns	r2, r2
 80024d4:	401a      	ands	r2, r3
 80024d6:	0011      	movs	r1, r2
 80024d8:	193b      	adds	r3, r7, r4
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	059b      	lsls	r3, r3, #22
 80024de:	0d9a      	lsrs	r2, r3, #22
 80024e0:	183b      	adds	r3, r7, r0
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	0418      	lsls	r0, r3, #16
 80024e6:	23ff      	movs	r3, #255	; 0xff
 80024e8:	041b      	lsls	r3, r3, #16
 80024ea:	4003      	ands	r3, r0
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b005      	add	sp, #20
 8002504:	bd90      	pop	{r4, r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	03ff63ff 	.word	0x03ff63ff

0800250c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2241      	movs	r2, #65	; 0x41
 800251a:	5c9b      	ldrb	r3, [r3, r2]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b20      	cmp	r3, #32
 8002520:	d138      	bne.n	8002594 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2240      	movs	r2, #64	; 0x40
 8002526:	5c9b      	ldrb	r3, [r3, r2]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800252c:	2302      	movs	r3, #2
 800252e:	e032      	b.n	8002596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2240      	movs	r2, #64	; 0x40
 8002534:	2101      	movs	r1, #1
 8002536:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2241      	movs	r2, #65	; 0x41
 800253c:	2124      	movs	r1, #36	; 0x24
 800253e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2101      	movs	r1, #1
 800254c:	438a      	bics	r2, r1
 800254e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4911      	ldr	r1, [pc, #68]	; (80025a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800255c:	400a      	ands	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2101      	movs	r1, #1
 800257c:	430a      	orrs	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2241      	movs	r2, #65	; 0x41
 8002584:	2120      	movs	r1, #32
 8002586:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2240      	movs	r2, #64	; 0x40
 800258c:	2100      	movs	r1, #0
 800258e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e000      	b.n	8002596 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002594:	2302      	movs	r3, #2
  }
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b002      	add	sp, #8
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	ffffefff 	.word	0xffffefff

080025a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2241      	movs	r2, #65	; 0x41
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d139      	bne.n	800262e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2240      	movs	r2, #64	; 0x40
 80025be:	5c9b      	ldrb	r3, [r3, r2]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e033      	b.n	8002630 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2240      	movs	r2, #64	; 0x40
 80025cc:	2101      	movs	r1, #1
 80025ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2241      	movs	r2, #65	; 0x41
 80025d4:	2124      	movs	r1, #36	; 0x24
 80025d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2101      	movs	r1, #1
 80025e4:	438a      	bics	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a11      	ldr	r2, [pc, #68]	; (8002638 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	430a      	orrs	r2, r1
 8002618:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2241      	movs	r2, #65	; 0x41
 800261e:	2120      	movs	r1, #32
 8002620:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2240      	movs	r2, #64	; 0x40
 8002626:	2100      	movs	r1, #0
 8002628:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
  }
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b004      	add	sp, #16
 8002636:	bd80      	pop	{r7, pc}
 8002638:	fffff0ff 	.word	0xfffff0ff

0800263c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e305      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2201      	movs	r2, #1
 8002654:	4013      	ands	r3, r2
 8002656:	d100      	bne.n	800265a <HAL_RCC_OscConfig+0x1e>
 8002658:	e08d      	b.n	8002776 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800265a:	4bc5      	ldr	r3, [pc, #788]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	220c      	movs	r2, #12
 8002660:	4013      	ands	r3, r2
 8002662:	2b04      	cmp	r3, #4
 8002664:	d00e      	beq.n	8002684 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002666:	4bc2      	ldr	r3, [pc, #776]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	220c      	movs	r2, #12
 800266c:	4013      	ands	r3, r2
 800266e:	2b08      	cmp	r3, #8
 8002670:	d116      	bne.n	80026a0 <HAL_RCC_OscConfig+0x64>
 8002672:	4bbf      	ldr	r3, [pc, #764]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	23c0      	movs	r3, #192	; 0xc0
 8002678:	025b      	lsls	r3, r3, #9
 800267a:	401a      	ands	r2, r3
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	025b      	lsls	r3, r3, #9
 8002680:	429a      	cmp	r2, r3
 8002682:	d10d      	bne.n	80026a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	4bba      	ldr	r3, [pc, #744]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	029b      	lsls	r3, r3, #10
 800268c:	4013      	ands	r3, r2
 800268e:	d100      	bne.n	8002692 <HAL_RCC_OscConfig+0x56>
 8002690:	e070      	b.n	8002774 <HAL_RCC_OscConfig+0x138>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d000      	beq.n	800269c <HAL_RCC_OscConfig+0x60>
 800269a:	e06b      	b.n	8002774 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e2dc      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <HAL_RCC_OscConfig+0x7c>
 80026a8:	4bb1      	ldr	r3, [pc, #708]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4bb0      	ldr	r3, [pc, #704]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	0249      	lsls	r1, r1, #9
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e02f      	b.n	8002718 <HAL_RCC_OscConfig+0xdc>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10c      	bne.n	80026da <HAL_RCC_OscConfig+0x9e>
 80026c0:	4bab      	ldr	r3, [pc, #684]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4baa      	ldr	r3, [pc, #680]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80026c6:	49ab      	ldr	r1, [pc, #684]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	4ba8      	ldr	r3, [pc, #672]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4ba7      	ldr	r3, [pc, #668]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80026d2:	49a9      	ldr	r1, [pc, #676]	; (8002978 <HAL_RCC_OscConfig+0x33c>)
 80026d4:	400a      	ands	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	e01e      	b.n	8002718 <HAL_RCC_OscConfig+0xdc>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b05      	cmp	r3, #5
 80026e0:	d10e      	bne.n	8002700 <HAL_RCC_OscConfig+0xc4>
 80026e2:	4ba3      	ldr	r3, [pc, #652]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	4ba2      	ldr	r3, [pc, #648]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	02c9      	lsls	r1, r1, #11
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	4b9f      	ldr	r3, [pc, #636]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b9e      	ldr	r3, [pc, #632]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	0249      	lsls	r1, r1, #9
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0xdc>
 8002700:	4b9b      	ldr	r3, [pc, #620]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b9a      	ldr	r3, [pc, #616]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002706:	499b      	ldr	r1, [pc, #620]	; (8002974 <HAL_RCC_OscConfig+0x338>)
 8002708:	400a      	ands	r2, r1
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	4b98      	ldr	r3, [pc, #608]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b97      	ldr	r3, [pc, #604]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002712:	4999      	ldr	r1, [pc, #612]	; (8002978 <HAL_RCC_OscConfig+0x33c>)
 8002714:	400a      	ands	r2, r1
 8002716:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d014      	beq.n	800274a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7ff f862 	bl	80017e8 <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272a:	f7ff f85d 	bl	80017e8 <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b64      	cmp	r3, #100	; 0x64
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e28e      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273c:	4b8c      	ldr	r3, [pc, #560]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	029b      	lsls	r3, r3, #10
 8002744:	4013      	ands	r3, r2
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0xee>
 8002748:	e015      	b.n	8002776 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7ff f84d 	bl	80017e8 <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002754:	f7ff f848 	bl	80017e8 <HAL_GetTick>
 8002758:	0002      	movs	r2, r0
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e279      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	4b82      	ldr	r3, [pc, #520]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	029b      	lsls	r3, r3, #10
 800276e:	4013      	ands	r3, r2
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x118>
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2202      	movs	r2, #2
 800277c:	4013      	ands	r3, r2
 800277e:	d100      	bne.n	8002782 <HAL_RCC_OscConfig+0x146>
 8002780:	e06c      	b.n	800285c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002782:	4b7b      	ldr	r3, [pc, #492]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	220c      	movs	r2, #12
 8002788:	4013      	ands	r3, r2
 800278a:	d00e      	beq.n	80027aa <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800278c:	4b78      	ldr	r3, [pc, #480]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	220c      	movs	r2, #12
 8002792:	4013      	ands	r3, r2
 8002794:	2b08      	cmp	r3, #8
 8002796:	d11f      	bne.n	80027d8 <HAL_RCC_OscConfig+0x19c>
 8002798:	4b75      	ldr	r3, [pc, #468]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	23c0      	movs	r3, #192	; 0xc0
 800279e:	025b      	lsls	r3, r3, #9
 80027a0:	401a      	ands	r2, r3
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d116      	bne.n	80027d8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	4b71      	ldr	r3, [pc, #452]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2202      	movs	r2, #2
 80027b0:	4013      	ands	r3, r2
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_OscConfig+0x184>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e24c      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c0:	4b6b      	ldr	r3, [pc, #428]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	22f8      	movs	r2, #248	; 0xf8
 80027c6:	4393      	bics	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00da      	lsls	r2, r3, #3
 80027d0:	4b67      	ldr	r3, [pc, #412]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80027d2:	430a      	orrs	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d6:	e041      	b.n	800285c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d024      	beq.n	800282a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e0:	4b63      	ldr	r3, [pc, #396]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b62      	ldr	r3, [pc, #392]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80027e6:	2101      	movs	r1, #1
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe fffc 	bl	80017e8 <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe fff7 	bl	80017e8 <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e228      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2202      	movs	r2, #2
 800280e:	4013      	ands	r3, r2
 8002810:	d0f1      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002812:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	22f8      	movs	r2, #248	; 0xf8
 8002818:	4393      	bics	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	00da      	lsls	r2, r3, #3
 8002822:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	e018      	b.n	800285c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282a:	4b51      	ldr	r3, [pc, #324]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002830:	2101      	movs	r1, #1
 8002832:	438a      	bics	r2, r1
 8002834:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7fe ffd7 	bl	80017e8 <HAL_GetTick>
 800283a:	0003      	movs	r3, r0
 800283c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002840:	f7fe ffd2 	bl	80017e8 <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e203      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2202      	movs	r2, #2
 8002858:	4013      	ands	r3, r2
 800285a:	d1f1      	bne.n	8002840 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2208      	movs	r2, #8
 8002862:	4013      	ands	r3, r2
 8002864:	d036      	beq.n	80028d4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d019      	beq.n	80028a2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286e:	4b40      	ldr	r3, [pc, #256]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002872:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002874:	2101      	movs	r1, #1
 8002876:	430a      	orrs	r2, r1
 8002878:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe ffb5 	bl	80017e8 <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002884:	f7fe ffb0 	bl	80017e8 <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1e1      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b36      	ldr	r3, [pc, #216]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	2202      	movs	r2, #2
 800289c:	4013      	ands	r3, r2
 800289e:	d0f1      	beq.n	8002884 <HAL_RCC_OscConfig+0x248>
 80028a0:	e018      	b.n	80028d4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a2:	4b33      	ldr	r3, [pc, #204]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80028a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028a6:	4b32      	ldr	r3, [pc, #200]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	438a      	bics	r2, r1
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ae:	f7fe ff9b 	bl	80017e8 <HAL_GetTick>
 80028b2:	0003      	movs	r3, r0
 80028b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b8:	f7fe ff96 	bl	80017e8 <HAL_GetTick>
 80028bc:	0002      	movs	r2, r0
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e1c7      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028ca:	4b29      	ldr	r3, [pc, #164]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	2202      	movs	r2, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	d1f1      	bne.n	80028b8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2204      	movs	r2, #4
 80028da:	4013      	ands	r3, r2
 80028dc:	d100      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2a4>
 80028de:	e0b5      	b.n	8002a4c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e0:	231f      	movs	r3, #31
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e8:	4b21      	ldr	r3, [pc, #132]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80028ea:	69da      	ldr	r2, [r3, #28]
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	055b      	lsls	r3, r3, #21
 80028f0:	4013      	ands	r3, r2
 80028f2:	d111      	bne.n	8002918 <HAL_RCC_OscConfig+0x2dc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	4b1d      	ldr	r3, [pc, #116]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 80028fa:	2180      	movs	r1, #128	; 0x80
 80028fc:	0549      	lsls	r1, r1, #21
 80028fe:	430a      	orrs	r2, r1
 8002900:	61da      	str	r2, [r3, #28]
 8002902:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	055b      	lsls	r3, r3, #21
 800290a:	4013      	ands	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002910:	231f      	movs	r3, #31
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_RCC_OscConfig+0x340>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4013      	ands	r3, r2
 8002922:	d11a      	bne.n	800295a <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002924:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_RCC_OscConfig+0x340>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_RCC_OscConfig+0x340>)
 800292a:	2180      	movs	r1, #128	; 0x80
 800292c:	0049      	lsls	r1, r1, #1
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7fe ff59 	bl	80017e8 <HAL_GetTick>
 8002936:	0003      	movs	r3, r0
 8002938:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x312>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293c:	f7fe ff54 	bl	80017e8 <HAL_GetTick>
 8002940:	0002      	movs	r2, r0
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x312>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e185      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_OscConfig+0x340>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4013      	ands	r3, r2
 8002958:	d0f0      	beq.n	800293c <HAL_RCC_OscConfig+0x300>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10e      	bne.n	8002980 <HAL_RCC_OscConfig+0x344>
 8002962:	4b03      	ldr	r3, [pc, #12]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002964:	6a1a      	ldr	r2, [r3, #32]
 8002966:	4b02      	ldr	r3, [pc, #8]	; (8002970 <HAL_RCC_OscConfig+0x334>)
 8002968:	2101      	movs	r1, #1
 800296a:	430a      	orrs	r2, r1
 800296c:	621a      	str	r2, [r3, #32]
 800296e:	e035      	b.n	80029dc <HAL_RCC_OscConfig+0x3a0>
 8002970:	40021000 	.word	0x40021000
 8002974:	fffeffff 	.word	0xfffeffff
 8002978:	fffbffff 	.word	0xfffbffff
 800297c:	40007000 	.word	0x40007000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10c      	bne.n	80029a2 <HAL_RCC_OscConfig+0x366>
 8002988:	4bb6      	ldr	r3, [pc, #728]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 800298a:	6a1a      	ldr	r2, [r3, #32]
 800298c:	4bb5      	ldr	r3, [pc, #724]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 800298e:	2101      	movs	r1, #1
 8002990:	438a      	bics	r2, r1
 8002992:	621a      	str	r2, [r3, #32]
 8002994:	4bb3      	ldr	r3, [pc, #716]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002996:	6a1a      	ldr	r2, [r3, #32]
 8002998:	4bb2      	ldr	r3, [pc, #712]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 800299a:	2104      	movs	r1, #4
 800299c:	438a      	bics	r2, r1
 800299e:	621a      	str	r2, [r3, #32]
 80029a0:	e01c      	b.n	80029dc <HAL_RCC_OscConfig+0x3a0>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b05      	cmp	r3, #5
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x388>
 80029aa:	4bae      	ldr	r3, [pc, #696]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 80029ac:	6a1a      	ldr	r2, [r3, #32]
 80029ae:	4bad      	ldr	r3, [pc, #692]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 80029b0:	2104      	movs	r1, #4
 80029b2:	430a      	orrs	r2, r1
 80029b4:	621a      	str	r2, [r3, #32]
 80029b6:	4bab      	ldr	r3, [pc, #684]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 80029b8:	6a1a      	ldr	r2, [r3, #32]
 80029ba:	4baa      	ldr	r3, [pc, #680]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 80029bc:	2101      	movs	r1, #1
 80029be:	430a      	orrs	r2, r1
 80029c0:	621a      	str	r2, [r3, #32]
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0x3a0>
 80029c4:	4ba7      	ldr	r3, [pc, #668]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 80029c6:	6a1a      	ldr	r2, [r3, #32]
 80029c8:	4ba6      	ldr	r3, [pc, #664]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 80029ca:	2101      	movs	r1, #1
 80029cc:	438a      	bics	r2, r1
 80029ce:	621a      	str	r2, [r3, #32]
 80029d0:	4ba4      	ldr	r3, [pc, #656]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 80029d2:	6a1a      	ldr	r2, [r3, #32]
 80029d4:	4ba3      	ldr	r3, [pc, #652]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 80029d6:	2104      	movs	r1, #4
 80029d8:	438a      	bics	r2, r1
 80029da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d014      	beq.n	8002a0e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7fe ff00 	bl	80017e8 <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ec:	e009      	b.n	8002a02 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fe fefb 	bl	80017e8 <HAL_GetTick>
 80029f2:	0002      	movs	r2, r0
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	4a9b      	ldr	r2, [pc, #620]	; (8002c68 <HAL_RCC_OscConfig+0x62c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e12b      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	4b98      	ldr	r3, [pc, #608]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	2202      	movs	r2, #2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x3b2>
 8002a0c:	e013      	b.n	8002a36 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe feeb 	bl	80017e8 <HAL_GetTick>
 8002a12:	0003      	movs	r3, r0
 8002a14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a16:	e009      	b.n	8002a2c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7fe fee6 	bl	80017e8 <HAL_GetTick>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	4a91      	ldr	r2, [pc, #580]	; (8002c68 <HAL_RCC_OscConfig+0x62c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e116      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2c:	4b8d      	ldr	r3, [pc, #564]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	2202      	movs	r2, #2
 8002a32:	4013      	ands	r3, r2
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a36:	231f      	movs	r3, #31
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d105      	bne.n	8002a4c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a40:	4b88      	ldr	r3, [pc, #544]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	4b87      	ldr	r3, [pc, #540]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002a46:	4989      	ldr	r1, [pc, #548]	; (8002c6c <HAL_RCC_OscConfig+0x630>)
 8002a48:	400a      	ands	r2, r1
 8002a4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2210      	movs	r2, #16
 8002a52:	4013      	ands	r3, r2
 8002a54:	d063      	beq.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d12a      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a5e:	4b81      	ldr	r3, [pc, #516]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a62:	4b80      	ldr	r3, [pc, #512]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002a64:	2104      	movs	r1, #4
 8002a66:	430a      	orrs	r2, r1
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a6a:	4b7e      	ldr	r3, [pc, #504]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a6e:	4b7d      	ldr	r3, [pc, #500]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	430a      	orrs	r2, r1
 8002a74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe feb7 	bl	80017e8 <HAL_GetTick>
 8002a7a:	0003      	movs	r3, r0
 8002a7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a80:	f7fe feb2 	bl	80017e8 <HAL_GetTick>
 8002a84:	0002      	movs	r2, r0
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e0e3      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a92:	4b74      	ldr	r3, [pc, #464]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a96:	2202      	movs	r2, #2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d0f1      	beq.n	8002a80 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a9c:	4b71      	ldr	r3, [pc, #452]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	22f8      	movs	r2, #248	; 0xf8
 8002aa2:	4393      	bics	r3, r2
 8002aa4:	0019      	movs	r1, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	00da      	lsls	r2, r3, #3
 8002aac:	4b6d      	ldr	r3, [pc, #436]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ab2:	e034      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	3305      	adds	r3, #5
 8002aba:	d111      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002abc:	4b69      	ldr	r3, [pc, #420]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac0:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	438a      	bics	r2, r1
 8002ac6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ac8:	4b66      	ldr	r3, [pc, #408]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002acc:	22f8      	movs	r2, #248	; 0xf8
 8002ace:	4393      	bics	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	00da      	lsls	r2, r3, #3
 8002ad8:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ade:	e01e      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ae0:	4b60      	ldr	r3, [pc, #384]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ae4:	4b5f      	ldr	r3, [pc, #380]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002aec:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af0:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002af2:	2101      	movs	r1, #1
 8002af4:	438a      	bics	r2, r1
 8002af6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af8:	f7fe fe76 	bl	80017e8 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b02:	f7fe fe71 	bl	80017e8 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0a2      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	2202      	movs	r2, #2
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d1f1      	bne.n	8002b02 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d100      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4ec>
 8002b26:	e097      	b.n	8002c58 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b28:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	220c      	movs	r2, #12
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d100      	bne.n	8002b36 <HAL_RCC_OscConfig+0x4fa>
 8002b34:	e06b      	b.n	8002c0e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d14c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b48      	ldr	r3, [pc, #288]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002b44:	494a      	ldr	r1, [pc, #296]	; (8002c70 <HAL_RCC_OscConfig+0x634>)
 8002b46:	400a      	ands	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fe4d 	bl	80017e8 <HAL_GetTick>
 8002b4e:	0003      	movs	r3, r0
 8002b50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b54:	f7fe fe48 	bl	80017e8 <HAL_GetTick>
 8002b58:	0002      	movs	r2, r0
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e079      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b66:	4b3f      	ldr	r3, [pc, #252]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	049b      	lsls	r3, r3, #18
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b72:	4b3c      	ldr	r3, [pc, #240]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	220f      	movs	r2, #15
 8002b78:	4393      	bics	r3, r2
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b80:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002b82:	430a      	orrs	r2, r1
 8002b84:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b86:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4a3a      	ldr	r2, [pc, #232]	; (8002c74 <HAL_RCC_OscConfig+0x638>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	0019      	movs	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba0:	4b30      	ldr	r3, [pc, #192]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	0449      	lsls	r1, r1, #17
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe fe1b 	bl	80017e8 <HAL_GetTick>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe fe16 	bl	80017e8 <HAL_GetTick>
 8002bbc:	0002      	movs	r2, r0
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e047      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bca:	4b26      	ldr	r3, [pc, #152]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	049b      	lsls	r3, r3, #18
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x57c>
 8002bd6:	e03f      	b.n	8002c58 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd8:	4b22      	ldr	r3, [pc, #136]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002bde:	4924      	ldr	r1, [pc, #144]	; (8002c70 <HAL_RCC_OscConfig+0x634>)
 8002be0:	400a      	ands	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fe00 	bl	80017e8 <HAL_GetTick>
 8002be8:	0003      	movs	r3, r0
 8002bea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe fdfb 	bl	80017e8 <HAL_GetTick>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e02c      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c00:	4b18      	ldr	r3, [pc, #96]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	049b      	lsls	r3, r3, #18
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x5b2>
 8002c0c:	e024      	b.n	8002c58 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e01f      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002c20:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_RCC_OscConfig+0x628>)
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	23c0      	movs	r3, #192	; 0xc0
 8002c2a:	025b      	lsls	r3, r3, #9
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d10e      	bne.n	8002c54 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	220f      	movs	r2, #15
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	23f0      	movs	r3, #240	; 0xf0
 8002c48:	039b      	lsls	r3, r3, #14
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b008      	add	sp, #32
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	40021000 	.word	0x40021000
 8002c68:	00001388 	.word	0x00001388
 8002c6c:	efffffff 	.word	0xefffffff
 8002c70:	feffffff 	.word	0xfeffffff
 8002c74:	ffc27fff 	.word	0xffc27fff

08002c78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b3      	b.n	8002df4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <HAL_RCC_ClockConfig+0x184>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2201      	movs	r2, #1
 8002c92:	4013      	ands	r3, r2
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d911      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b58      	ldr	r3, [pc, #352]	; (8002dfc <HAL_RCC_ClockConfig+0x184>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4393      	bics	r3, r2
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <HAL_RCC_ClockConfig+0x184>)
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cac:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <HAL_RCC_ClockConfig+0x184>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e09a      	b.n	8002df4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d015      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d006      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002cd2:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	4b4a      	ldr	r3, [pc, #296]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002cd8:	21e0      	movs	r1, #224	; 0xe0
 8002cda:	00c9      	lsls	r1, r1, #3
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce0:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	22f0      	movs	r2, #240	; 0xf0
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d040      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	4b3e      	ldr	r3, [pc, #248]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	029b      	lsls	r3, r3, #10
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d114      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06e      	b.n	8002df4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1e:	4b38      	ldr	r3, [pc, #224]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	049b      	lsls	r3, r3, #18
 8002d26:	4013      	ands	r3, r2
 8002d28:	d108      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e062      	b.n	8002df4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	4b34      	ldr	r3, [pc, #208]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2202      	movs	r2, #2
 8002d34:	4013      	ands	r3, r2
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e05b      	b.n	8002df4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2203      	movs	r2, #3
 8002d42:	4393      	bics	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4b2d      	ldr	r3, [pc, #180]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d50:	f7fe fd4a 	bl	80017e8 <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d58:	e009      	b.n	8002d6e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5a:	f7fe fd45 	bl	80017e8 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <HAL_RCC_ClockConfig+0x18c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e042      	b.n	8002df4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	220c      	movs	r2, #12
 8002d74:	401a      	ands	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d1ec      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d80:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <HAL_RCC_ClockConfig+0x184>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2201      	movs	r2, #1
 8002d86:	4013      	ands	r3, r2
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d211      	bcs.n	8002db2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <HAL_RCC_ClockConfig+0x184>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2201      	movs	r2, #1
 8002d94:	4393      	bics	r3, r2
 8002d96:	0019      	movs	r1, r3
 8002d98:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_RCC_ClockConfig+0x184>)
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da0:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <HAL_RCC_ClockConfig+0x184>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2201      	movs	r2, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e020      	b.n	8002df4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2204      	movs	r2, #4
 8002db8:	4013      	ands	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002dbc:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <HAL_RCC_ClockConfig+0x190>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dd0:	f000 f820 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8002dd4:	0001      	movs	r1, r0
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_RCC_ClockConfig+0x188>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	220f      	movs	r2, #15
 8002dde:	4013      	ands	r3, r2
 8002de0:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <HAL_RCC_ClockConfig+0x194>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	000a      	movs	r2, r1
 8002de6:	40da      	lsrs	r2, r3
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_ClockConfig+0x198>)
 8002dea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7fe fab5 	bl	800135c <HAL_InitTick>
  
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b004      	add	sp, #16
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40022000 	.word	0x40022000
 8002e00:	40021000 	.word	0x40021000
 8002e04:	00001388 	.word	0x00001388
 8002e08:	fffff8ff 	.word	0xfffff8ff
 8002e0c:	08007724 	.word	0x08007724
 8002e10:	20000010 	.word	0x20000010

08002e14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e14:	b590      	push	{r4, r7, lr}
 8002e16:	b08f      	sub	sp, #60	; 0x3c
 8002e18:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002e1a:	2314      	movs	r3, #20
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	4a2c      	ldr	r2, [pc, #176]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e20:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e22:	c313      	stmia	r3!, {r0, r1, r4}
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e2c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e2e:	c313      	stmia	r3!, {r0, r1, r4}
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	220c      	movs	r2, #12
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d002      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x4a>
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d003      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x50>
 8002e5c:	e02f      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e62:	e02f      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	0c9b      	lsrs	r3, r3, #18
 8002e68:	220f      	movs	r2, #15
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2214      	movs	r2, #20
 8002e6e:	18ba      	adds	r2, r7, r2
 8002e70:	5cd3      	ldrb	r3, [r2, r3]
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002e74:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	220f      	movs	r2, #15
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	1d3a      	adds	r2, r7, #4
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e84:	23c0      	movs	r3, #192	; 0xc0
 8002e86:	025b      	lsls	r3, r3, #9
 8002e88:	401a      	ands	r2, r3
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	025b      	lsls	r3, r3, #9
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e94:	4811      	ldr	r0, [pc, #68]	; (8002edc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e96:	f7fd f937 	bl	8000108 <__udivsi3>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	4353      	muls	r3, r2
 8002ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea8:	480c      	ldr	r0, [pc, #48]	; (8002edc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002eaa:	f7fd f92d 	bl	8000108 <__udivsi3>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	4353      	muls	r3, r2
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ebc:	e002      	b.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ec0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ec2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b00f      	add	sp, #60	; 0x3c
 8002ecc:	bd90      	pop	{r4, r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	08006194 	.word	0x08006194
 8002ed4:	080061a4 	.word	0x080061a4
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	007a1200 	.word	0x007a1200

08002ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b02      	ldr	r3, [pc, #8]	; (8002ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	20000010 	.word	0x20000010

08002ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002ef8:	f7ff fff2 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002efc:	0001      	movs	r1, r0
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	2207      	movs	r2, #7
 8002f06:	4013      	ands	r3, r2
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	40d9      	lsrs	r1, r3
 8002f0e:	000b      	movs	r3, r1
}    
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	08007734 	.word	0x08007734

08002f20 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f30:	4b0e      	ldr	r3, [pc, #56]	; (8002f6c <HAL_RCC_GetClockConfig+0x4c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2203      	movs	r2, #3
 8002f36:	401a      	ands	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_GetClockConfig+0x4c>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	22f0      	movs	r2, #240	; 0xf0
 8002f42:	401a      	ands	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8002f48:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <HAL_RCC_GetClockConfig+0x4c>)
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	23e0      	movs	r3, #224	; 0xe0
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	401a      	ands	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_RCC_GetClockConfig+0x50>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	601a      	str	r2, [r3, #0]
}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b002      	add	sp, #8
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40022000 	.word	0x40022000

08002f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	025b      	lsls	r3, r3, #9
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002f90:	e08f      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2317      	movs	r3, #23
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9a:	4b5f      	ldr	r3, [pc, #380]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	055b      	lsls	r3, r3, #21
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d111      	bne.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	4b5c      	ldr	r3, [pc, #368]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	4b5b      	ldr	r3, [pc, #364]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	0549      	lsls	r1, r1, #21
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	61da      	str	r2, [r3, #28]
 8002fb4:	4b58      	ldr	r3, [pc, #352]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	055b      	lsls	r3, r3, #21
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc2:	2317      	movs	r3, #23
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fca:	4b54      	ldr	r3, [pc, #336]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d11a      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd6:	4b51      	ldr	r3, [pc, #324]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b50      	ldr	r3, [pc, #320]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002fdc:	2180      	movs	r1, #128	; 0x80
 8002fde:	0049      	lsls	r1, r1, #1
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe fc00 	bl	80017e8 <HAL_GetTick>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	e008      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fee:	f7fe fbfb 	bl	80017e8 <HAL_GetTick>
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b64      	cmp	r3, #100	; 0x64
 8002ffa:	d901      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e087      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003000:	4b46      	ldr	r3, [pc, #280]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	2380      	movs	r3, #128	; 0x80
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4013      	ands	r3, r2
 800300a:	d0f0      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800300c:	4b42      	ldr	r3, [pc, #264]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800300e:	6a1a      	ldr	r2, [r3, #32]
 8003010:	23c0      	movs	r3, #192	; 0xc0
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d034      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	23c0      	movs	r3, #192	; 0xc0
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4013      	ands	r3, r2
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	429a      	cmp	r2, r3
 800302c:	d02c      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800302e:	4b3a      	ldr	r3, [pc, #232]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4a3b      	ldr	r2, [pc, #236]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003038:	4b37      	ldr	r3, [pc, #220]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800303a:	6a1a      	ldr	r2, [r3, #32]
 800303c:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	0249      	lsls	r1, r1, #9
 8003042:	430a      	orrs	r2, r1
 8003044:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003046:	4b34      	ldr	r3, [pc, #208]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003048:	6a1a      	ldr	r2, [r3, #32]
 800304a:	4b33      	ldr	r3, [pc, #204]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800304c:	4935      	ldr	r1, [pc, #212]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800304e:	400a      	ands	r2, r1
 8003050:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	4013      	ands	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe fbc2 	bl	80017e8 <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003068:	e009      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7fe fbbd 	bl	80017e8 <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	4a2c      	ldr	r2, [pc, #176]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e048      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	4b26      	ldr	r3, [pc, #152]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	2202      	movs	r2, #2
 8003084:	4013      	ands	r3, r2
 8003086:	d0f0      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003088:	4b23      	ldr	r3, [pc, #140]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4a24      	ldr	r2, [pc, #144]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800308e:	4013      	ands	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003098:	430a      	orrs	r2, r1
 800309a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800309c:	2317      	movs	r3, #23
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d105      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030ac:	491f      	ldr	r1, [pc, #124]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030ae:	400a      	ands	r2, r1
 80030b0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2201      	movs	r2, #1
 80030b8:	4013      	ands	r3, r2
 80030ba:	d009      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030bc:	4b16      	ldr	r3, [pc, #88]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	2203      	movs	r2, #3
 80030c2:	4393      	bics	r3, r2
 80030c4:	0019      	movs	r1, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030cc:	430a      	orrs	r2, r1
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2220      	movs	r2, #32
 80030d6:	4013      	ands	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030da:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	2210      	movs	r2, #16
 80030e0:	4393      	bics	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030ea:	430a      	orrs	r2, r1
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	2380      	movs	r3, #128	; 0x80
 80030f4:	029b      	lsls	r3, r3, #10
 80030f6:	4013      	ands	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	4393      	bics	r3, r2
 8003102:	0019      	movs	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800310a:	430a      	orrs	r2, r1
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b006      	add	sp, #24
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000
 800311c:	40007000 	.word	0x40007000
 8003120:	fffffcff 	.word	0xfffffcff
 8003124:	fffeffff 	.word	0xfffeffff
 8003128:	00001388 	.word	0x00001388
 800312c:	efffffff 	.word	0xefffffff

08003130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e042      	b.n	80031c8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	223d      	movs	r2, #61	; 0x3d
 8003146:	5c9b      	ldrb	r3, [r3, r2]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d107      	bne.n	800315e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	223c      	movs	r2, #60	; 0x3c
 8003152:	2100      	movs	r1, #0
 8003154:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	0018      	movs	r0, r3
 800315a:	f000 f839 	bl	80031d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	223d      	movs	r2, #61	; 0x3d
 8003162:	2102      	movs	r1, #2
 8003164:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	0019      	movs	r1, r3
 8003170:	0010      	movs	r0, r2
 8003172:	f000 f9b7 	bl	80034e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2246      	movs	r2, #70	; 0x46
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	223e      	movs	r2, #62	; 0x3e
 8003182:	2101      	movs	r1, #1
 8003184:	5499      	strb	r1, [r3, r2]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	223f      	movs	r2, #63	; 0x3f
 800318a:	2101      	movs	r1, #1
 800318c:	5499      	strb	r1, [r3, r2]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2240      	movs	r2, #64	; 0x40
 8003192:	2101      	movs	r1, #1
 8003194:	5499      	strb	r1, [r3, r2]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2241      	movs	r2, #65	; 0x41
 800319a:	2101      	movs	r1, #1
 800319c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2242      	movs	r2, #66	; 0x42
 80031a2:	2101      	movs	r1, #1
 80031a4:	5499      	strb	r1, [r3, r2]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2243      	movs	r2, #67	; 0x43
 80031aa:	2101      	movs	r1, #1
 80031ac:	5499      	strb	r1, [r3, r2]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2244      	movs	r2, #68	; 0x44
 80031b2:	2101      	movs	r1, #1
 80031b4:	5499      	strb	r1, [r3, r2]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2245      	movs	r2, #69	; 0x45
 80031ba:	2101      	movs	r1, #1
 80031bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	223d      	movs	r2, #61	; 0x3d
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	223d      	movs	r2, #61	; 0x3d
 80031ec:	5c9b      	ldrb	r3, [r3, r2]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d001      	beq.n	80031f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e035      	b.n	8003264 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	223d      	movs	r2, #61	; 0x3d
 80031fc:	2102      	movs	r1, #2
 80031fe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2101      	movs	r1, #1
 800320c:	430a      	orrs	r2, r1
 800320e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <HAL_TIM_Base_Start_IT+0x8c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d009      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x4e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a14      	ldr	r2, [pc, #80]	; (8003270 <HAL_TIM_Base_Start_IT+0x90>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d004      	beq.n	800322e <HAL_TIM_Base_Start_IT+0x4e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a12      	ldr	r2, [pc, #72]	; (8003274 <HAL_TIM_Base_Start_IT+0x94>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d111      	bne.n	8003252 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2207      	movs	r2, #7
 8003236:	4013      	ands	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b06      	cmp	r3, #6
 800323e:	d010      	beq.n	8003262 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2101      	movs	r1, #1
 800324c:	430a      	orrs	r2, r1
 800324e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	e007      	b.n	8003262 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	430a      	orrs	r2, r1
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	0018      	movs	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	b004      	add	sp, #16
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40000400 	.word	0x40000400
 8003274:	40014000 	.word	0x40014000

08003278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	2202      	movs	r2, #2
 8003288:	4013      	ands	r3, r2
 800328a:	2b02      	cmp	r3, #2
 800328c:	d124      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	2202      	movs	r2, #2
 8003296:	4013      	ands	r3, r2
 8003298:	2b02      	cmp	r3, #2
 800329a:	d11d      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2203      	movs	r2, #3
 80032a2:	4252      	negs	r2, r2
 80032a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	2203      	movs	r2, #3
 80032b4:	4013      	ands	r3, r2
 80032b6:	d004      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 f8fa 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 80032c0:	e007      	b.n	80032d2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f000 f8ed 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 f8f9 	bl	80034c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2204      	movs	r2, #4
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d125      	bne.n	8003332 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2204      	movs	r2, #4
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d11e      	bne.n	8003332 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2205      	movs	r2, #5
 80032fa:	4252      	negs	r2, r2
 80032fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	23c0      	movs	r3, #192	; 0xc0
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4013      	ands	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	0018      	movs	r0, r3
 8003316:	f000 f8cd 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 800331a:	e007      	b.n	800332c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	0018      	movs	r0, r3
 8003320:	f000 f8c0 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	0018      	movs	r0, r3
 8003328:	f000 f8cc 	bl	80034c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2208      	movs	r2, #8
 800333a:	4013      	ands	r3, r2
 800333c:	2b08      	cmp	r3, #8
 800333e:	d124      	bne.n	800338a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2208      	movs	r2, #8
 8003348:	4013      	ands	r3, r2
 800334a:	2b08      	cmp	r3, #8
 800334c:	d11d      	bne.n	800338a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2209      	movs	r2, #9
 8003354:	4252      	negs	r2, r2
 8003356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2204      	movs	r2, #4
 800335c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	2203      	movs	r2, #3
 8003366:	4013      	ands	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	0018      	movs	r0, r3
 800336e:	f000 f8a1 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 8003372:	e007      	b.n	8003384 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	0018      	movs	r0, r3
 8003378:	f000 f894 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	0018      	movs	r0, r3
 8003380:	f000 f8a0 	bl	80034c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2210      	movs	r2, #16
 8003392:	4013      	ands	r3, r2
 8003394:	2b10      	cmp	r3, #16
 8003396:	d125      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2210      	movs	r2, #16
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b10      	cmp	r3, #16
 80033a4:	d11e      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2211      	movs	r2, #17
 80033ac:	4252      	negs	r2, r2
 80033ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2208      	movs	r2, #8
 80033b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	23c0      	movs	r3, #192	; 0xc0
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4013      	ands	r3, r2
 80033c2:	d004      	beq.n	80033ce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f000 f874 	bl	80034b4 <HAL_TIM_IC_CaptureCallback>
 80033cc:	e007      	b.n	80033de <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f000 f867 	bl	80034a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 f873 	bl	80034c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2201      	movs	r2, #1
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d10f      	bne.n	8003412 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d108      	bne.n	8003412 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2202      	movs	r2, #2
 8003406:	4252      	negs	r2, r2
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f7fd fd4f 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2280      	movs	r2, #128	; 0x80
 800341a:	4013      	ands	r3, r2
 800341c:	2b80      	cmp	r3, #128	; 0x80
 800341e:	d10f      	bne.n	8003440 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2280      	movs	r2, #128	; 0x80
 8003428:	4013      	ands	r3, r2
 800342a:	2b80      	cmp	r3, #128	; 0x80
 800342c:	d108      	bne.n	8003440 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2281      	movs	r2, #129	; 0x81
 8003434:	4252      	negs	r2, r2
 8003436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	0018      	movs	r0, r3
 800343c:	f000 f8d0 	bl	80035e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	2240      	movs	r2, #64	; 0x40
 8003448:	4013      	ands	r3, r2
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d10f      	bne.n	800346e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2240      	movs	r2, #64	; 0x40
 8003456:	4013      	ands	r3, r2
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	d108      	bne.n	800346e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2241      	movs	r2, #65	; 0x41
 8003462:	4252      	negs	r2, r2
 8003464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0018      	movs	r0, r3
 800346a:	f000 f833 	bl	80034d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2220      	movs	r2, #32
 8003476:	4013      	ands	r3, r2
 8003478:	2b20      	cmp	r3, #32
 800347a:	d10f      	bne.n	800349c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	4013      	ands	r3, r2
 8003486:	2b20      	cmp	r3, #32
 8003488:	d108      	bne.n	800349c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2221      	movs	r2, #33	; 0x21
 8003490:	4252      	negs	r2, r2
 8003492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	0018      	movs	r0, r3
 8003498:	f000 f89a 	bl	80035d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800349c:	46c0      	nop			; (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b002      	add	sp, #8
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a2f      	ldr	r2, [pc, #188]	; (80035b4 <TIM_Base_SetConfig+0xd0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_Base_SetConfig+0x20>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a2e      	ldr	r2, [pc, #184]	; (80035b8 <TIM_Base_SetConfig+0xd4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d108      	bne.n	8003516 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2270      	movs	r2, #112	; 0x70
 8003508:	4393      	bics	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <TIM_Base_SetConfig+0xd0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <TIM_Base_SetConfig+0x62>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a25      	ldr	r2, [pc, #148]	; (80035b8 <TIM_Base_SetConfig+0xd4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00f      	beq.n	8003546 <TIM_Base_SetConfig+0x62>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a24      	ldr	r2, [pc, #144]	; (80035bc <TIM_Base_SetConfig+0xd8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00b      	beq.n	8003546 <TIM_Base_SetConfig+0x62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a23      	ldr	r2, [pc, #140]	; (80035c0 <TIM_Base_SetConfig+0xdc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <TIM_Base_SetConfig+0x62>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a22      	ldr	r2, [pc, #136]	; (80035c4 <TIM_Base_SetConfig+0xe0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_Base_SetConfig+0x62>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a21      	ldr	r2, [pc, #132]	; (80035c8 <TIM_Base_SetConfig+0xe4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d108      	bne.n	8003558 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a20      	ldr	r2, [pc, #128]	; (80035cc <TIM_Base_SetConfig+0xe8>)
 800354a:	4013      	ands	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	4393      	bics	r3, r2
 800355e:	001a      	movs	r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a0c      	ldr	r2, [pc, #48]	; (80035b4 <TIM_Base_SetConfig+0xd0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00b      	beq.n	800359e <TIM_Base_SetConfig+0xba>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a0d      	ldr	r2, [pc, #52]	; (80035c0 <TIM_Base_SetConfig+0xdc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <TIM_Base_SetConfig+0xba>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a0c      	ldr	r2, [pc, #48]	; (80035c4 <TIM_Base_SetConfig+0xe0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_Base_SetConfig+0xba>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <TIM_Base_SetConfig+0xe4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d103      	bne.n	80035a6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	615a      	str	r2, [r3, #20]
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b004      	add	sp, #16
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40002000 	.word	0x40002000
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800
 80035cc:	fffffcff 	.word	0xfffffcff

080035d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b002      	add	sp, #8
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035f8:	231e      	movs	r3, #30
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69db      	ldr	r3, [r3, #28]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a95      	ldr	r2, [pc, #596]	; (8003874 <UART_SetConfig+0x284>)
 8003620:	4013      	ands	r3, r2
 8003622:	0019      	movs	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	430a      	orrs	r2, r1
 800362c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	4a90      	ldr	r2, [pc, #576]	; (8003878 <UART_SetConfig+0x288>)
 8003636:	4013      	ands	r3, r2
 8003638:	0019      	movs	r1, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4a87      	ldr	r2, [pc, #540]	; (800387c <UART_SetConfig+0x28c>)
 800365e:	4013      	ands	r3, r2
 8003660:	0019      	movs	r1, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a83      	ldr	r2, [pc, #524]	; (8003880 <UART_SetConfig+0x290>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d125      	bne.n	80036c2 <UART_SetConfig+0xd2>
 8003676:	4b83      	ldr	r3, [pc, #524]	; (8003884 <UART_SetConfig+0x294>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367a:	2203      	movs	r2, #3
 800367c:	4013      	ands	r3, r2
 800367e:	2b01      	cmp	r3, #1
 8003680:	d00f      	beq.n	80036a2 <UART_SetConfig+0xb2>
 8003682:	d304      	bcc.n	800368e <UART_SetConfig+0x9e>
 8003684:	2b02      	cmp	r3, #2
 8003686:	d011      	beq.n	80036ac <UART_SetConfig+0xbc>
 8003688:	2b03      	cmp	r3, #3
 800368a:	d005      	beq.n	8003698 <UART_SetConfig+0xa8>
 800368c:	e013      	b.n	80036b6 <UART_SetConfig+0xc6>
 800368e:	231f      	movs	r3, #31
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	e036      	b.n	8003706 <UART_SetConfig+0x116>
 8003698:	231f      	movs	r3, #31
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	2202      	movs	r2, #2
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e031      	b.n	8003706 <UART_SetConfig+0x116>
 80036a2:	231f      	movs	r3, #31
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	2204      	movs	r2, #4
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	e02c      	b.n	8003706 <UART_SetConfig+0x116>
 80036ac:	231f      	movs	r3, #31
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	2208      	movs	r2, #8
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e027      	b.n	8003706 <UART_SetConfig+0x116>
 80036b6:	231f      	movs	r3, #31
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	2210      	movs	r2, #16
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	46c0      	nop			; (mov r8, r8)
 80036c0:	e021      	b.n	8003706 <UART_SetConfig+0x116>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a70      	ldr	r2, [pc, #448]	; (8003888 <UART_SetConfig+0x298>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d104      	bne.n	80036d6 <UART_SetConfig+0xe6>
 80036cc:	231f      	movs	r3, #31
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e017      	b.n	8003706 <UART_SetConfig+0x116>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6c      	ldr	r2, [pc, #432]	; (800388c <UART_SetConfig+0x29c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d104      	bne.n	80036ea <UART_SetConfig+0xfa>
 80036e0:	231f      	movs	r3, #31
 80036e2:	18fb      	adds	r3, r7, r3
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
 80036e8:	e00d      	b.n	8003706 <UART_SetConfig+0x116>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a68      	ldr	r2, [pc, #416]	; (8003890 <UART_SetConfig+0x2a0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d104      	bne.n	80036fe <UART_SetConfig+0x10e>
 80036f4:	231f      	movs	r3, #31
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	2200      	movs	r2, #0
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e003      	b.n	8003706 <UART_SetConfig+0x116>
 80036fe:	231f      	movs	r3, #31
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	2210      	movs	r2, #16
 8003704:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	429a      	cmp	r2, r3
 8003710:	d15c      	bne.n	80037cc <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 8003712:	231f      	movs	r3, #31
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d00d      	beq.n	8003738 <UART_SetConfig+0x148>
 800371c:	dc02      	bgt.n	8003724 <UART_SetConfig+0x134>
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <UART_SetConfig+0x13e>
 8003722:	e015      	b.n	8003750 <UART_SetConfig+0x160>
 8003724:	2b04      	cmp	r3, #4
 8003726:	d00a      	beq.n	800373e <UART_SetConfig+0x14e>
 8003728:	2b08      	cmp	r3, #8
 800372a:	d00d      	beq.n	8003748 <UART_SetConfig+0x158>
 800372c:	e010      	b.n	8003750 <UART_SetConfig+0x160>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372e:	f7ff fbe1 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 8003732:	0003      	movs	r3, r0
 8003734:	61bb      	str	r3, [r7, #24]
        break;
 8003736:	e012      	b.n	800375e <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003738:	4b56      	ldr	r3, [pc, #344]	; (8003894 <UART_SetConfig+0x2a4>)
 800373a:	61bb      	str	r3, [r7, #24]
        break;
 800373c:	e00f      	b.n	800375e <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800373e:	f7ff fb69 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 8003742:	0003      	movs	r3, r0
 8003744:	61bb      	str	r3, [r7, #24]
        break;
 8003746:	e00a      	b.n	800375e <UART_SetConfig+0x16e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	61bb      	str	r3, [r7, #24]
        break;
 800374e:	e006      	b.n	800375e <UART_SetConfig+0x16e>
      default:
        pclk = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003754:	231e      	movs	r3, #30
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
        break;
 800375c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d100      	bne.n	8003766 <UART_SetConfig+0x176>
 8003764:	e079      	b.n	800385a <UART_SetConfig+0x26a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	005a      	lsls	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	18d2      	adds	r2, r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	0019      	movs	r1, r3
 8003778:	0010      	movs	r0, r2
 800377a:	f7fc fcc5 	bl	8000108 <__udivsi3>
 800377e:	0003      	movs	r3, r0
 8003780:	b29b      	uxth	r3, r3
 8003782:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b0f      	cmp	r3, #15
 8003788:	d91b      	bls.n	80037c2 <UART_SetConfig+0x1d2>
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	4a42      	ldr	r2, [pc, #264]	; (8003898 <UART_SetConfig+0x2a8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d817      	bhi.n	80037c2 <UART_SetConfig+0x1d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	b29a      	uxth	r2, r3
 8003796:	200e      	movs	r0, #14
 8003798:	183b      	adds	r3, r7, r0
 800379a:	210f      	movs	r1, #15
 800379c:	438a      	bics	r2, r1
 800379e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2207      	movs	r2, #7
 80037a8:	4013      	ands	r3, r2
 80037aa:	b299      	uxth	r1, r3
 80037ac:	183b      	adds	r3, r7, r0
 80037ae:	183a      	adds	r2, r7, r0
 80037b0:	8812      	ldrh	r2, [r2, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	183a      	adds	r2, r7, r0
 80037bc:	8812      	ldrh	r2, [r2, #0]
 80037be:	60da      	str	r2, [r3, #12]
 80037c0:	e04b      	b.n	800385a <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 80037c2:	231e      	movs	r3, #30
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e046      	b.n	800385a <UART_SetConfig+0x26a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037cc:	231f      	movs	r3, #31
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d00d      	beq.n	80037f2 <UART_SetConfig+0x202>
 80037d6:	dc02      	bgt.n	80037de <UART_SetConfig+0x1ee>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <UART_SetConfig+0x1f8>
 80037dc:	e015      	b.n	800380a <UART_SetConfig+0x21a>
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d00a      	beq.n	80037f8 <UART_SetConfig+0x208>
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d00d      	beq.n	8003802 <UART_SetConfig+0x212>
 80037e6:	e010      	b.n	800380a <UART_SetConfig+0x21a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e8:	f7ff fb84 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 80037ec:	0003      	movs	r3, r0
 80037ee:	61bb      	str	r3, [r7, #24]
        break;
 80037f0:	e012      	b.n	8003818 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037f2:	4b28      	ldr	r3, [pc, #160]	; (8003894 <UART_SetConfig+0x2a4>)
 80037f4:	61bb      	str	r3, [r7, #24]
        break;
 80037f6:	e00f      	b.n	8003818 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037f8:	f7ff fb0c 	bl	8002e14 <HAL_RCC_GetSysClockFreq>
 80037fc:	0003      	movs	r3, r0
 80037fe:	61bb      	str	r3, [r7, #24]
        break;
 8003800:	e00a      	b.n	8003818 <UART_SetConfig+0x228>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	61bb      	str	r3, [r7, #24]
        break;
 8003808:	e006      	b.n	8003818 <UART_SetConfig+0x228>
      default:
        pclk = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800380e:	231e      	movs	r3, #30
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
        break;
 8003816:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01d      	beq.n	800385a <UART_SetConfig+0x26a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	085a      	lsrs	r2, r3, #1
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	18d2      	adds	r2, r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	0019      	movs	r1, r3
 800382e:	0010      	movs	r0, r2
 8003830:	f7fc fc6a 	bl	8000108 <__udivsi3>
 8003834:	0003      	movs	r3, r0
 8003836:	b29b      	uxth	r3, r3
 8003838:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d908      	bls.n	8003852 <UART_SetConfig+0x262>
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4a15      	ldr	r2, [pc, #84]	; (8003898 <UART_SetConfig+0x2a8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d804      	bhi.n	8003852 <UART_SetConfig+0x262>
      {
        huart->Instance->BRR = usartdiv;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	e003      	b.n	800385a <UART_SetConfig+0x26a>
      }
      else
      {
        ret = HAL_ERROR;
 8003852:	231e      	movs	r3, #30
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2201      	movs	r2, #1
 8003858:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003866:	231e      	movs	r3, #30
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	781b      	ldrb	r3, [r3, #0]
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b008      	add	sp, #32
 8003872:	bd80      	pop	{r7, pc}
 8003874:	efff69f3 	.word	0xefff69f3
 8003878:	ffffcfff 	.word	0xffffcfff
 800387c:	fffff4ff 	.word	0xfffff4ff
 8003880:	40013800 	.word	0x40013800
 8003884:	40021000 	.word	0x40021000
 8003888:	40004400 	.word	0x40004400
 800388c:	40004800 	.word	0x40004800
 8003890:	40004c00 	.word	0x40004c00
 8003894:	007a1200 	.word	0x007a1200
 8003898:	0000ffff 	.word	0x0000ffff

0800389c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	2201      	movs	r2, #1
 80038aa:	4013      	ands	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a4a      	ldr	r2, [pc, #296]	; (80039e0 <UART_AdvFeatureConfig+0x144>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	2202      	movs	r2, #2
 80038cc:	4013      	ands	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a43      	ldr	r2, [pc, #268]	; (80039e4 <UART_AdvFeatureConfig+0x148>)
 80038d8:	4013      	ands	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	2204      	movs	r2, #4
 80038ee:	4013      	ands	r3, r2
 80038f0:	d00b      	beq.n	800390a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4a3b      	ldr	r2, [pc, #236]	; (80039e8 <UART_AdvFeatureConfig+0x14c>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	0019      	movs	r1, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	2208      	movs	r2, #8
 8003910:	4013      	ands	r3, r2
 8003912:	d00b      	beq.n	800392c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a34      	ldr	r2, [pc, #208]	; (80039ec <UART_AdvFeatureConfig+0x150>)
 800391c:	4013      	ands	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2210      	movs	r2, #16
 8003932:	4013      	ands	r3, r2
 8003934:	d00b      	beq.n	800394e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4a2c      	ldr	r2, [pc, #176]	; (80039f0 <UART_AdvFeatureConfig+0x154>)
 800393e:	4013      	ands	r3, r2
 8003940:	0019      	movs	r1, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	2220      	movs	r2, #32
 8003954:	4013      	ands	r3, r2
 8003956:	d00b      	beq.n	8003970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	4a25      	ldr	r2, [pc, #148]	; (80039f4 <UART_AdvFeatureConfig+0x158>)
 8003960:	4013      	ands	r3, r2
 8003962:	0019      	movs	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	2240      	movs	r2, #64	; 0x40
 8003976:	4013      	ands	r3, r2
 8003978:	d01d      	beq.n	80039b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <UART_AdvFeatureConfig+0x15c>)
 8003982:	4013      	ands	r3, r2
 8003984:	0019      	movs	r1, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	035b      	lsls	r3, r3, #13
 800399a:	429a      	cmp	r2, r3
 800399c:	d10b      	bne.n	80039b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a15      	ldr	r2, [pc, #84]	; (80039fc <UART_AdvFeatureConfig+0x160>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2280      	movs	r2, #128	; 0x80
 80039bc:	4013      	ands	r3, r2
 80039be:	d00b      	beq.n	80039d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4a0e      	ldr	r2, [pc, #56]	; (8003a00 <UART_AdvFeatureConfig+0x164>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	0019      	movs	r1, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	fffdffff 	.word	0xfffdffff
 80039e4:	fffeffff 	.word	0xfffeffff
 80039e8:	fffbffff 	.word	0xfffbffff
 80039ec:	ffff7fff 	.word	0xffff7fff
 80039f0:	ffffefff 	.word	0xffffefff
 80039f4:	ffffdfff 	.word	0xffffdfff
 80039f8:	ffefffff 	.word	0xffefffff
 80039fc:	ff9fffff 	.word	0xff9fffff
 8003a00:	fff7ffff 	.word	0xfff7ffff

08003a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	2100      	movs	r1, #0
 8003a12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a14:	f7fd fee8 	bl	80017e8 <HAL_GetTick>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2208      	movs	r2, #8
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d10d      	bne.n	8003a46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	0399      	lsls	r1, r3, #14
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <UART_CheckIdleState+0x90>)
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	0013      	movs	r3, r2
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f000 f82d 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 8003a3e:	1e03      	subs	r3, r0, #0
 8003a40:	d001      	beq.n	8003a46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e022      	b.n	8003a8c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d10d      	bne.n	8003a70 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	2380      	movs	r3, #128	; 0x80
 8003a58:	03d9      	lsls	r1, r3, #15
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <UART_CheckIdleState+0x90>)
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	0013      	movs	r3, r2
 8003a62:	2200      	movs	r2, #0
 8003a64:	f000 f818 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 8003a68:	1e03      	subs	r3, r0, #0
 8003a6a:	d001      	beq.n	8003a70 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e00d      	b.n	8003a8c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2274      	movs	r2, #116	; 0x74
 8003a86:	2100      	movs	r1, #0
 8003a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	b004      	add	sp, #16
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	01ffffff 	.word	0x01ffffff

08003a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	1dfb      	adds	r3, r7, #7
 8003aa6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa8:	e05e      	b.n	8003b68 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	3301      	adds	r3, #1
 8003aae:	d05b      	beq.n	8003b68 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab0:	f7fd fe9a 	bl	80017e8 <HAL_GetTick>
 8003ab4:	0002      	movs	r2, r0
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d302      	bcc.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11b      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	492f      	ldr	r1, [pc, #188]	; (8003b90 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	438a      	bics	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2274      	movs	r2, #116	; 0x74
 8003af6:	2100      	movs	r1, #0
 8003af8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e044      	b.n	8003b88 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2204      	movs	r2, #4
 8003b06:	4013      	ands	r3, r2
 8003b08:	d02e      	beq.n	8003b68 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	401a      	ands	r2, r3
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d124      	bne.n	8003b68 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	0112      	lsls	r2, r2, #4
 8003b26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4917      	ldr	r1, [pc, #92]	; (8003b90 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003b34:	400a      	ands	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2101      	movs	r1, #1
 8003b44:	438a      	bics	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	2120      	movs	r1, #32
 8003b5a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2274      	movs	r2, #116	; 0x74
 8003b60:	2100      	movs	r1, #0
 8003b62:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e00f      	b.n	8003b88 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	4013      	ands	r3, r2
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	425a      	negs	r2, r3
 8003b78:	4153      	adcs	r3, r2
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	001a      	movs	r2, r3
 8003b7e:	1dfb      	adds	r3, r7, #7
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d091      	beq.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	0018      	movs	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b004      	add	sp, #16
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	fffffe5f 	.word	0xfffffe5f

08003b94 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
 8003ba0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e05b      	b.n	8003c64 <HAL_RS485Ex_Init+0xd0>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2274      	movs	r2, #116	; 0x74
 8003bb8:	2100      	movs	r1, #0
 8003bba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f7fd fb06 	bl	80011d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	438a      	bics	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7ff fd07 	bl	80035f0 <UART_SetConfig>
 8003be2:	0003      	movs	r3, r0
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e03b      	b.n	8003c64 <HAL_RS485Ex_Init+0xd0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7ff fe50 	bl	800389c <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2180      	movs	r1, #128	; 0x80
 8003c08:	01c9      	lsls	r1, r1, #7
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <HAL_RS485Ex_Init+0xd8>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	055b      	lsls	r3, r3, #21
 8003c28:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0d      	ldr	r2, [pc, #52]	; (8003c70 <HAL_RS485Ex_Init+0xdc>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	0019      	movs	r1, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2101      	movs	r1, #1
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f7ff fed1 	bl	8003a04 <UART_CheckIdleState>
 8003c62:	0003      	movs	r3, r0
}
 8003c64:	0018      	movs	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b006      	add	sp, #24
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	ffff7fff 	.word	0xffff7fff
 8003c70:	fc00ffff 	.word	0xfc00ffff

08003c74 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c7a:	f3ef 8305 	mrs	r3, IPSR
 8003c7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c86:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8a:	607b      	str	r3, [r7, #4]
  return(result);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d007      	beq.n	8003ca2 <osKernelInitialize+0x2e>
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <osKernelInitialize+0x54>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d103      	bne.n	8003ca2 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8003c9a:	2306      	movs	r3, #6
 8003c9c:	425b      	negs	r3, r3
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	e00c      	b.n	8003cbc <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <osKernelInitialize+0x54>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <osKernelInitialize+0x54>)
 8003cac:	2201      	movs	r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e002      	b.n	8003cbc <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	425b      	negs	r3, r3
 8003cba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b004      	add	sp, #16
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	20000444 	.word	0x20000444

08003ccc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cd2:	f3ef 8305 	mrs	r3, IPSR
 8003cd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cde:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce2:	607b      	str	r3, [r7, #4]
  return(result);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <osKernelStart+0x2e>
 8003cea:	4b0e      	ldr	r3, [pc, #56]	; (8003d24 <osKernelStart+0x58>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d103      	bne.n	8003cfa <osKernelStart+0x2e>
    stat = osErrorISR;
 8003cf2:	2306      	movs	r3, #6
 8003cf4:	425b      	negs	r3, r3
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	e00e      	b.n	8003d18 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <osKernelStart+0x58>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d107      	bne.n	8003d12 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <osKernelStart+0x58>)
 8003d04:	2202      	movs	r2, #2
 8003d06:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003d08:	f000 ff7e 	bl	8004c08 <vTaskStartScheduler>
      stat = osOK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e002      	b.n	8003d18 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8003d12:	2301      	movs	r3, #1
 8003d14:	425b      	negs	r3, r3
 8003d16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003d18:	68fb      	ldr	r3, [r7, #12]
}
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b004      	add	sp, #16
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	20000444 	.word	0x20000444

08003d28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003d28:	b5b0      	push	{r4, r5, r7, lr}
 8003d2a:	b090      	sub	sp, #64	; 0x40
 8003d2c:	af04      	add	r7, sp, #16
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d38:	f3ef 8305 	mrs	r3, IPSR
 8003d3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d3e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d000      	beq.n	8003d46 <osThreadNew+0x1e>
 8003d44:	e090      	b.n	8003e68 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d46:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <osThreadNew+0x34>
 8003d52:	4b48      	ldr	r3, [pc, #288]	; (8003e74 <osThreadNew+0x14c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d100      	bne.n	8003d5c <osThreadNew+0x34>
 8003d5a:	e085      	b.n	8003e68 <osThreadNew+0x140>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d100      	bne.n	8003d64 <osThreadNew+0x3c>
 8003d62:	e081      	b.n	8003e68 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003d68:	2318      	movs	r3, #24
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8003d6c:	2117      	movs	r1, #23
 8003d6e:	187b      	adds	r3, r7, r1
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8003d74:	187b      	adds	r3, r7, r1
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	425b      	negs	r3, r3
 8003d7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d044      	beq.n	8003e0e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <osThreadNew+0x6a>
        name = attr->name;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d007      	beq.n	8003db6 <osThreadNew+0x8e>
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	2b38      	cmp	r3, #56	; 0x38
 8003daa:	d804      	bhi.n	8003db6 <osThreadNew+0x8e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	4013      	ands	r3, r2
 8003db4:	d001      	beq.n	8003dba <osThreadNew+0x92>
        return (NULL);
 8003db6:	2300      	movs	r3, #0
 8003db8:	e057      	b.n	8003e6a <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	089b      	lsrs	r3, r3, #2
 8003dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00e      	beq.n	8003df0 <osThreadNew+0xc8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	2b5b      	cmp	r3, #91	; 0x5b
 8003dd8:	d90a      	bls.n	8003df0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d006      	beq.n	8003df0 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <osThreadNew+0xc8>
        mem = 1;
 8003dea:	2301      	movs	r3, #1
 8003dec:	623b      	str	r3, [r7, #32]
 8003dee:	e010      	b.n	8003e12 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10c      	bne.n	8003e12 <osThreadNew+0xea>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d108      	bne.n	8003e12 <osThreadNew+0xea>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d104      	bne.n	8003e12 <osThreadNew+0xea>
          mem = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	623b      	str	r3, [r7, #32]
 8003e0c:	e001      	b.n	8003e12 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d112      	bne.n	8003e3e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003e20:	68bd      	ldr	r5, [r7, #8]
 8003e22:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003e24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	9302      	str	r3, [sp, #8]
 8003e2a:	9201      	str	r2, [sp, #4]
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	002b      	movs	r3, r5
 8003e32:	0022      	movs	r2, r4
 8003e34:	f000 fd49 	bl	80048ca <xTaskCreateStatic>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	e014      	b.n	8003e68 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d111      	bne.n	8003e68 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68bc      	ldr	r4, [r7, #8]
 8003e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	2310      	movs	r3, #16
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	0023      	movs	r3, r4
 8003e5a:	f000 fd79 	bl	8004950 <xTaskCreate>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d001      	beq.n	8003e68 <osThreadNew+0x140>
          hTask = NULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e68:	693b      	ldr	r3, [r7, #16]
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b00c      	add	sp, #48	; 0x30
 8003e70:	bdb0      	pop	{r4, r5, r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	20000444 	.word	0x20000444

08003e78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e80:	f3ef 8305 	mrs	r3, IPSR
 8003e84:	613b      	str	r3, [r7, #16]
  return(result);
 8003e86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e90:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <osDelay+0x30>
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <osDelay+0x4c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d103      	bne.n	8003ea8 <osDelay+0x30>
    stat = osErrorISR;
 8003ea0:	2306      	movs	r3, #6
 8003ea2:	425b      	negs	r3, r3
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e008      	b.n	8003eba <osDelay+0x42>
  }
  else {
    stat = osOK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <osDelay+0x42>
      vTaskDelay(ticks);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f000 fe81 	bl	8004bbc <vTaskDelay>
    }
  }

  return (stat);
 8003eba:	697b      	ldr	r3, [r7, #20]
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b006      	add	sp, #24
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20000444 	.word	0x20000444

08003ec8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a06      	ldr	r2, [pc, #24]	; (8003ef0 <vApplicationGetIdleTaskMemory+0x28>)
 8003ed8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003ede:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2280      	movs	r2, #128	; 0x80
 8003ee4:	601a      	str	r2, [r3, #0]
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b004      	add	sp, #16
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	20000448 	.word	0x20000448
 8003ef4:	200004a4 	.word	0x200004a4

08003ef8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a06      	ldr	r2, [pc, #24]	; (8003f20 <vApplicationGetTimerTaskMemory+0x28>)
 8003f08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	4a05      	ldr	r2, [pc, #20]	; (8003f24 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2280      	movs	r2, #128	; 0x80
 8003f14:	0052      	lsls	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b004      	add	sp, #16
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	200006a4 	.word	0x200006a4
 8003f24:	20000700 	.word	0x20000700

08003f28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3308      	adds	r3, #8
 8003f34:	001a      	movs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	4252      	negs	r2, r2
 8003f40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3308      	adds	r3, #8
 8003f46:	001a      	movs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3308      	adds	r3, #8
 8003f50:	001a      	movs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f5c:	46c0      	nop			; (mov r8, r8)
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b002      	add	sp, #8
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b002      	add	sp, #8
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	601a      	str	r2, [r3, #0]
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	b004      	add	sp, #16
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	d103      	bne.n	8003fdc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e00c      	b.n	8003ff6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e002      	b.n	8003fea <vListInsert+0x2c>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d2f6      	bcs.n	8003fe4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	601a      	str	r2, [r3, #0]
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b004      	add	sp, #16
 8004028:	bd80      	pop	{r7, pc}

0800402a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6892      	ldr	r2, [r2, #8]
 8004040:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6852      	ldr	r2, [r2, #4]
 800404a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	429a      	cmp	r2, r3
 8004054:	d103      	bne.n	800405e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	1e5a      	subs	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
}
 8004072:	0018      	movs	r0, r3
 8004074:	46bd      	mov	sp, r7
 8004076:	b004      	add	sp, #16
 8004078:	bd80      	pop	{r7, pc}

0800407a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <xQueueGenericReset+0x18>
 800408e:	b672      	cpsid	i
 8004090:	e7fe      	b.n	8004090 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8004092:	f001 fdcd 	bl	8005c30 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	434b      	muls	r3, r1
 80040a4:	18d2      	adds	r2, r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c0:	1e59      	subs	r1, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	434b      	muls	r3, r1
 80040c8:	18d2      	adds	r2, r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2244      	movs	r2, #68	; 0x44
 80040d2:	21ff      	movs	r1, #255	; 0xff
 80040d4:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2245      	movs	r2, #69	; 0x45
 80040da:	21ff      	movs	r1, #255	; 0xff
 80040dc:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10d      	bne.n	8004100 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3310      	adds	r3, #16
 80040f0:	0018      	movs	r0, r3
 80040f2:	f000 ffcd 	bl	8005090 <xTaskRemoveFromEventList>
 80040f6:	1e03      	subs	r3, r0, #0
 80040f8:	d00c      	beq.n	8004114 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80040fa:	f001 fd89 	bl	8005c10 <vPortYield>
 80040fe:	e009      	b.n	8004114 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3310      	adds	r3, #16
 8004104:	0018      	movs	r0, r3
 8004106:	f7ff ff0f 	bl	8003f28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3324      	adds	r3, #36	; 0x24
 800410e:	0018      	movs	r0, r3
 8004110:	f7ff ff0a 	bl	8003f28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004114:	f001 fd9e 	bl	8005c54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004118:	2301      	movs	r3, #1
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b004      	add	sp, #16
 8004120:	bd80      	pop	{r7, pc}

08004122 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004122:	b590      	push	{r4, r7, lr}
 8004124:	b089      	sub	sp, #36	; 0x24
 8004126:	af02      	add	r7, sp, #8
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <xQueueGenericCreateStatic+0x18>
 8004136:	b672      	cpsid	i
 8004138:	e7fe      	b.n	8004138 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <xQueueGenericCreateStatic+0x22>
 8004140:	b672      	cpsid	i
 8004142:	e7fe      	b.n	8004142 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <xQueueGenericCreateStatic+0x2e>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <xQueueGenericCreateStatic+0x32>
 8004150:	2301      	movs	r3, #1
 8004152:	e000      	b.n	8004156 <xQueueGenericCreateStatic+0x34>
 8004154:	2300      	movs	r3, #0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <xQueueGenericCreateStatic+0x3c>
 800415a:	b672      	cpsid	i
 800415c:	e7fe      	b.n	800415c <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <xQueueGenericCreateStatic+0x48>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <xQueueGenericCreateStatic+0x4c>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <xQueueGenericCreateStatic+0x4e>
 800416e:	2300      	movs	r3, #0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <xQueueGenericCreateStatic+0x56>
 8004174:	b672      	cpsid	i
 8004176:	e7fe      	b.n	8004176 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004178:	2350      	movs	r3, #80	; 0x50
 800417a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b50      	cmp	r3, #80	; 0x50
 8004180:	d001      	beq.n	8004186 <xQueueGenericCreateStatic+0x64>
 8004182:	b672      	cpsid	i
 8004184:	e7fe      	b.n	8004184 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00e      	beq.n	80041ae <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2246      	movs	r2, #70	; 0x46
 8004194:	2101      	movs	r1, #1
 8004196:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004198:	2328      	movs	r3, #40	; 0x28
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	781c      	ldrb	r4, [r3, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	0023      	movs	r3, r4
 80041aa:	f000 f805 	bl	80041b8 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80041ae:	697b      	ldr	r3, [r7, #20]
	}
 80041b0:	0018      	movs	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b007      	add	sp, #28
 80041b6:	bd90      	pop	{r4, r7, pc}

080041b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	001a      	movs	r2, r3
 80041c6:	1cfb      	adds	r3, r7, #3
 80041c8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d103      	bne.n	80041d8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	e002      	b.n	80041de <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2101      	movs	r1, #1
 80041ee:	0018      	movs	r0, r3
 80041f0:	f7ff ff43 	bl	800407a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1cfa      	adds	r2, r7, #3
 80041f8:	214c      	movs	r1, #76	; 0x4c
 80041fa:	7812      	ldrb	r2, [r2, #0]
 80041fc:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	46bd      	mov	sp, r7
 8004202:	b004      	add	sp, #16
 8004204:	bd80      	pop	{r7, pc}

08004206 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b08a      	sub	sp, #40	; 0x28
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
 8004212:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004214:	2300      	movs	r3, #0
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <xQueueGenericSend+0x20>
 8004222:	b672      	cpsid	i
 8004224:	e7fe      	b.n	8004224 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d103      	bne.n	8004234 <xQueueGenericSend+0x2e>
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <xQueueGenericSend+0x32>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <xQueueGenericSend+0x34>
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <xQueueGenericSend+0x3c>
 800423e:	b672      	cpsid	i
 8004240:	e7fe      	b.n	8004240 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d103      	bne.n	8004250 <xQueueGenericSend+0x4a>
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <xQueueGenericSend+0x4e>
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <xQueueGenericSend+0x50>
 8004254:	2300      	movs	r3, #0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <xQueueGenericSend+0x58>
 800425a:	b672      	cpsid	i
 800425c:	e7fe      	b.n	800425c <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800425e:	f001 f8af 	bl	80053c0 <xTaskGetSchedulerState>
 8004262:	1e03      	subs	r3, r0, #0
 8004264:	d102      	bne.n	800426c <xQueueGenericSend+0x66>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <xQueueGenericSend+0x6a>
 800426c:	2301      	movs	r3, #1
 800426e:	e000      	b.n	8004272 <xQueueGenericSend+0x6c>
 8004270:	2300      	movs	r3, #0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <xQueueGenericSend+0x74>
 8004276:	b672      	cpsid	i
 8004278:	e7fe      	b.n	8004278 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800427a:	f001 fcd9 	bl	8005c30 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	429a      	cmp	r2, r3
 8004288:	d302      	bcc.n	8004290 <xQueueGenericSend+0x8a>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d11e      	bne.n	80042ce <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	0018      	movs	r0, r3
 8004298:	f000 f99f 	bl	80045da <prvCopyDataToQueue>
 800429c:	0003      	movs	r3, r0
 800429e:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d009      	beq.n	80042bc <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	3324      	adds	r3, #36	; 0x24
 80042ac:	0018      	movs	r0, r3
 80042ae:	f000 feef 	bl	8005090 <xTaskRemoveFromEventList>
 80042b2:	1e03      	subs	r3, r0, #0
 80042b4:	d007      	beq.n	80042c6 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042b6:	f001 fcab 	bl	8005c10 <vPortYield>
 80042ba:	e004      	b.n	80042c6 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042c2:	f001 fca5 	bl	8005c10 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042c6:	f001 fcc5 	bl	8005c54 <vPortExitCritical>
				return pdPASS;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e05b      	b.n	8004386 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d103      	bne.n	80042dc <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042d4:	f001 fcbe 	bl	8005c54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	e054      	b.n	8004386 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042e2:	2314      	movs	r3, #20
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	0018      	movs	r0, r3
 80042e8:	f000 ff2e 	bl	8005148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042ec:	2301      	movs	r3, #1
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042f0:	f001 fcb0 	bl	8005c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042f4:	f000 fcdc 	bl	8004cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042f8:	f001 fc9a 	bl	8005c30 <vPortEnterCritical>
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	2244      	movs	r2, #68	; 0x44
 8004300:	5c9b      	ldrb	r3, [r3, r2]
 8004302:	b25b      	sxtb	r3, r3
 8004304:	3301      	adds	r3, #1
 8004306:	d103      	bne.n	8004310 <xQueueGenericSend+0x10a>
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	2244      	movs	r2, #68	; 0x44
 800430c:	2100      	movs	r1, #0
 800430e:	5499      	strb	r1, [r3, r2]
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	2245      	movs	r2, #69	; 0x45
 8004314:	5c9b      	ldrb	r3, [r3, r2]
 8004316:	b25b      	sxtb	r3, r3
 8004318:	3301      	adds	r3, #1
 800431a:	d103      	bne.n	8004324 <xQueueGenericSend+0x11e>
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	2245      	movs	r2, #69	; 0x45
 8004320:	2100      	movs	r1, #0
 8004322:	5499      	strb	r1, [r3, r2]
 8004324:	f001 fc96 	bl	8005c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004328:	1d3a      	adds	r2, r7, #4
 800432a:	2314      	movs	r3, #20
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	0011      	movs	r1, r2
 8004330:	0018      	movs	r0, r3
 8004332:	f000 ff1d 	bl	8005170 <xTaskCheckForTimeOut>
 8004336:	1e03      	subs	r3, r0, #0
 8004338:	d11e      	bne.n	8004378 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	0018      	movs	r0, r3
 800433e:	f000 fa51 	bl	80047e4 <prvIsQueueFull>
 8004342:	1e03      	subs	r3, r0, #0
 8004344:	d011      	beq.n	800436a <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004346:	6a3b      	ldr	r3, [r7, #32]
 8004348:	3310      	adds	r3, #16
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	0011      	movs	r1, r2
 800434e:	0018      	movs	r0, r3
 8004350:	f000 fe5a 	bl	8005008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	0018      	movs	r0, r3
 8004358:	f000 f9d0 	bl	80046fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800435c:	f000 fcb4 	bl	8004cc8 <xTaskResumeAll>
 8004360:	1e03      	subs	r3, r0, #0
 8004362:	d18a      	bne.n	800427a <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004364:	f001 fc54 	bl	8005c10 <vPortYield>
 8004368:	e787      	b.n	800427a <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	0018      	movs	r0, r3
 800436e:	f000 f9c5 	bl	80046fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004372:	f000 fca9 	bl	8004cc8 <xTaskResumeAll>
 8004376:	e780      	b.n	800427a <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	0018      	movs	r0, r3
 800437c:	f000 f9be 	bl	80046fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004380:	f000 fca2 	bl	8004cc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004384:	2300      	movs	r3, #0
		}
	}
}
 8004386:	0018      	movs	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	b00a      	add	sp, #40	; 0x28
 800438c:	bd80      	pop	{r7, pc}

0800438e <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800438e:	b590      	push	{r4, r7, lr}
 8004390:	b089      	sub	sp, #36	; 0x24
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <xQueueGenericSendFromISR+0x1c>
 80043a6:	b672      	cpsid	i
 80043a8:	e7fe      	b.n	80043a8 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d103      	bne.n	80043b8 <xQueueGenericSendFromISR+0x2a>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <xQueueGenericSendFromISR+0x2e>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <xQueueGenericSendFromISR+0x30>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <xQueueGenericSendFromISR+0x38>
 80043c2:	b672      	cpsid	i
 80043c4:	e7fe      	b.n	80043c4 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d103      	bne.n	80043d4 <xQueueGenericSendFromISR+0x46>
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d101      	bne.n	80043d8 <xQueueGenericSendFromISR+0x4a>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <xQueueGenericSendFromISR+0x4c>
 80043d8:	2300      	movs	r3, #0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <xQueueGenericSendFromISR+0x54>
 80043de:	b672      	cpsid	i
 80043e0:	e7fe      	b.n	80043e0 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80043e2:	f001 fc4f 	bl	8005c84 <ulSetInterruptMaskFromISR>
 80043e6:	0003      	movs	r3, r0
 80043e8:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d302      	bcc.n	80043fc <xQueueGenericSendFromISR+0x6e>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d12e      	bne.n	800445a <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043fc:	2413      	movs	r4, #19
 80043fe:	193b      	adds	r3, r7, r4
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	2145      	movs	r1, #69	; 0x45
 8004404:	5c52      	ldrb	r2, [r2, r1]
 8004406:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	0018      	movs	r0, r3
 8004410:	f000 f8e3 	bl	80045da <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004414:	193b      	adds	r3, r7, r4
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	b25b      	sxtb	r3, r3
 800441a:	3301      	adds	r3, #1
 800441c:	d111      	bne.n	8004442 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	3324      	adds	r3, #36	; 0x24
 800442a:	0018      	movs	r0, r3
 800442c:	f000 fe30 	bl	8005090 <xTaskRemoveFromEventList>
 8004430:	1e03      	subs	r3, r0, #0
 8004432:	d00f      	beq.n	8004454 <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	e008      	b.n	8004454 <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004442:	2313      	movs	r3, #19
 8004444:	18fb      	adds	r3, r7, r3
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	b2db      	uxtb	r3, r3
 800444c:	b259      	sxtb	r1, r3
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2245      	movs	r2, #69	; 0x45
 8004452:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8004454:	2301      	movs	r3, #1
 8004456:	61fb      	str	r3, [r7, #28]
		{
 8004458:	e001      	b.n	800445e <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	0018      	movs	r0, r3
 8004462:	f001 fc15 	bl	8005c90 <vClearInterruptMaskFromISR>

	return xReturn;
 8004466:	69fb      	ldr	r3, [r7, #28]
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b009      	add	sp, #36	; 0x24
 800446e:	bd90      	pop	{r4, r7, pc}

08004470 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800447c:	2300      	movs	r3, #0
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <xQueueReceive+0x1e>
 800448a:	b672      	cpsid	i
 800448c:	e7fe      	b.n	800448c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <xQueueReceive+0x2c>
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <xQueueReceive+0x30>
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <xQueueReceive+0x32>
 80044a0:	2300      	movs	r3, #0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <xQueueReceive+0x3a>
 80044a6:	b672      	cpsid	i
 80044a8:	e7fe      	b.n	80044a8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044aa:	f000 ff89 	bl	80053c0 <xTaskGetSchedulerState>
 80044ae:	1e03      	subs	r3, r0, #0
 80044b0:	d102      	bne.n	80044b8 <xQueueReceive+0x48>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <xQueueReceive+0x4c>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <xQueueReceive+0x4e>
 80044bc:	2300      	movs	r3, #0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <xQueueReceive+0x56>
 80044c2:	b672      	cpsid	i
 80044c4:	e7fe      	b.n	80044c4 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80044c6:	f001 fbb3 	bl	8005c30 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01a      	beq.n	800450c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	0011      	movs	r1, r2
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 f8e7 	bl	80046b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	1e5a      	subs	r2, r3, #1
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d008      	beq.n	8004504 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	3310      	adds	r3, #16
 80044f6:	0018      	movs	r0, r3
 80044f8:	f000 fdca 	bl	8005090 <xTaskRemoveFromEventList>
 80044fc:	1e03      	subs	r3, r0, #0
 80044fe:	d001      	beq.n	8004504 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004500:	f001 fb86 	bl	8005c10 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004504:	f001 fba6 	bl	8005c54 <vPortExitCritical>
				return pdPASS;
 8004508:	2301      	movs	r3, #1
 800450a:	e062      	b.n	80045d2 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004512:	f001 fb9f 	bl	8005c54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004516:	2300      	movs	r3, #0
 8004518:	e05b      	b.n	80045d2 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	2b00      	cmp	r3, #0
 800451e:	d106      	bne.n	800452e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004520:	2314      	movs	r3, #20
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	0018      	movs	r0, r3
 8004526:	f000 fe0f 	bl	8005148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800452a:	2301      	movs	r3, #1
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800452e:	f001 fb91 	bl	8005c54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004532:	f000 fbbd 	bl	8004cb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004536:	f001 fb7b 	bl	8005c30 <vPortEnterCritical>
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	2244      	movs	r2, #68	; 0x44
 800453e:	5c9b      	ldrb	r3, [r3, r2]
 8004540:	b25b      	sxtb	r3, r3
 8004542:	3301      	adds	r3, #1
 8004544:	d103      	bne.n	800454e <xQueueReceive+0xde>
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	2244      	movs	r2, #68	; 0x44
 800454a:	2100      	movs	r1, #0
 800454c:	5499      	strb	r1, [r3, r2]
 800454e:	6a3b      	ldr	r3, [r7, #32]
 8004550:	2245      	movs	r2, #69	; 0x45
 8004552:	5c9b      	ldrb	r3, [r3, r2]
 8004554:	b25b      	sxtb	r3, r3
 8004556:	3301      	adds	r3, #1
 8004558:	d103      	bne.n	8004562 <xQueueReceive+0xf2>
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	2245      	movs	r2, #69	; 0x45
 800455e:	2100      	movs	r1, #0
 8004560:	5499      	strb	r1, [r3, r2]
 8004562:	f001 fb77 	bl	8005c54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004566:	1d3a      	adds	r2, r7, #4
 8004568:	2314      	movs	r3, #20
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	0011      	movs	r1, r2
 800456e:	0018      	movs	r0, r3
 8004570:	f000 fdfe 	bl	8005170 <xTaskCheckForTimeOut>
 8004574:	1e03      	subs	r3, r0, #0
 8004576:	d11e      	bne.n	80045b6 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	0018      	movs	r0, r3
 800457c:	f000 f91c 	bl	80047b8 <prvIsQueueEmpty>
 8004580:	1e03      	subs	r3, r0, #0
 8004582:	d011      	beq.n	80045a8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	3324      	adds	r3, #36	; 0x24
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	0011      	movs	r1, r2
 800458c:	0018      	movs	r0, r3
 800458e:	f000 fd3b 	bl	8005008 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	0018      	movs	r0, r3
 8004596:	f000 f8b1 	bl	80046fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800459a:	f000 fb95 	bl	8004cc8 <xTaskResumeAll>
 800459e:	1e03      	subs	r3, r0, #0
 80045a0:	d191      	bne.n	80044c6 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80045a2:	f001 fb35 	bl	8005c10 <vPortYield>
 80045a6:	e78e      	b.n	80044c6 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	0018      	movs	r0, r3
 80045ac:	f000 f8a6 	bl	80046fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045b0:	f000 fb8a 	bl	8004cc8 <xTaskResumeAll>
 80045b4:	e787      	b.n	80044c6 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f000 f89f 	bl	80046fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045be:	f000 fb83 	bl	8004cc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	0018      	movs	r0, r3
 80045c6:	f000 f8f7 	bl	80047b8 <prvIsQueueEmpty>
 80045ca:	1e03      	subs	r3, r0, #0
 80045cc:	d100      	bne.n	80045d0 <xQueueReceive+0x160>
 80045ce:	e77a      	b.n	80044c6 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80045d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80045d2:	0018      	movs	r0, r3
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b00a      	add	sp, #40	; 0x28
 80045d8:	bd80      	pop	{r7, pc}

080045da <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b086      	sub	sp, #24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ee:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10e      	bne.n	8004616 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d14e      	bne.n	800469e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f000 fef7 	bl	80053f8 <xTaskPriorityDisinherit>
 800460a:	0003      	movs	r3, r0
 800460c:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	605a      	str	r2, [r3, #4]
 8004614:	e043      	b.n	800469e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d119      	bne.n	8004650 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6898      	ldr	r0, [r3, #8]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	0019      	movs	r1, r3
 8004628:	f001 fd64 	bl	80060f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	18d2      	adds	r2, r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	429a      	cmp	r2, r3
 8004644:	d32b      	bcc.n	800469e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	609a      	str	r2, [r3, #8]
 800464e:	e026      	b.n	800469e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	68d8      	ldr	r0, [r3, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	0019      	movs	r1, r3
 800465c:	f001 fd4a 	bl	80060f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	425b      	negs	r3, r3
 800466a:	18d2      	adds	r2, r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d207      	bcs.n	800468c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	425b      	negs	r3, r3
 8004686:	18d2      	adds	r2, r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d105      	bne.n	800469e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	3b01      	subs	r3, #1
 800469c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80046a6:	697b      	ldr	r3, [r7, #20]
}
 80046a8:	0018      	movs	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b006      	add	sp, #24
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d018      	beq.n	80046f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	18d2      	adds	r2, r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d303      	bcc.n	80046e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68d9      	ldr	r1, [r3, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	0018      	movs	r0, r3
 80046f0:	f001 fd00 	bl	80060f4 <memcpy>
	}
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004704:	f001 fa94 	bl	8005c30 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004708:	230f      	movs	r3, #15
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	2145      	movs	r1, #69	; 0x45
 8004710:	5c52      	ldrb	r2, [r2, r1]
 8004712:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004714:	e013      	b.n	800473e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d016      	beq.n	800474c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3324      	adds	r3, #36	; 0x24
 8004722:	0018      	movs	r0, r3
 8004724:	f000 fcb4 	bl	8005090 <xTaskRemoveFromEventList>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d001      	beq.n	8004730 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800472c:	f000 fd70 	bl	8005210 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004730:	210f      	movs	r1, #15
 8004732:	187b      	adds	r3, r7, r1
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	3b01      	subs	r3, #1
 8004738:	b2da      	uxtb	r2, r3
 800473a:	187b      	adds	r3, r7, r1
 800473c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800473e:	230f      	movs	r3, #15
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b25b      	sxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	dce5      	bgt.n	8004716 <prvUnlockQueue+0x1a>
 800474a:	e000      	b.n	800474e <prvUnlockQueue+0x52>
					break;
 800474c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2245      	movs	r2, #69	; 0x45
 8004752:	21ff      	movs	r1, #255	; 0xff
 8004754:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004756:	f001 fa7d 	bl	8005c54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800475a:	f001 fa69 	bl	8005c30 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800475e:	230e      	movs	r3, #14
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	2144      	movs	r1, #68	; 0x44
 8004766:	5c52      	ldrb	r2, [r2, r1]
 8004768:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800476a:	e013      	b.n	8004794 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d016      	beq.n	80047a2 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3310      	adds	r3, #16
 8004778:	0018      	movs	r0, r3
 800477a:	f000 fc89 	bl	8005090 <xTaskRemoveFromEventList>
 800477e:	1e03      	subs	r3, r0, #0
 8004780:	d001      	beq.n	8004786 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004782:	f000 fd45 	bl	8005210 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004786:	210e      	movs	r1, #14
 8004788:	187b      	adds	r3, r7, r1
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	3b01      	subs	r3, #1
 800478e:	b2da      	uxtb	r2, r3
 8004790:	187b      	adds	r3, r7, r1
 8004792:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004794:	230e      	movs	r3, #14
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	b25b      	sxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	dce5      	bgt.n	800476c <prvUnlockQueue+0x70>
 80047a0:	e000      	b.n	80047a4 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80047a2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2244      	movs	r2, #68	; 0x44
 80047a8:	21ff      	movs	r1, #255	; 0xff
 80047aa:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80047ac:	f001 fa52 	bl	8005c54 <vPortExitCritical>
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b004      	add	sp, #16
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047c0:	f001 fa36 	bl	8005c30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80047cc:	2301      	movs	r3, #1
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	e001      	b.n	80047d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047d6:	f001 fa3d 	bl	8005c54 <vPortExitCritical>

	return xReturn;
 80047da:	68fb      	ldr	r3, [r7, #12]
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	b004      	add	sp, #16
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047ec:	f001 fa20 	bl	8005c30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d102      	bne.n	8004802 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e001      	b.n	8004806 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004806:	f001 fa25 	bl	8005c54 <vPortExitCritical>

	return xReturn;
 800480a:	68fb      	ldr	r3, [r7, #12]
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	b004      	add	sp, #16
 8004812:	bd80      	pop	{r7, pc}

08004814 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e015      	b.n	8004850 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004824:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <vQueueAddToRegistry+0x4c>)
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	00d2      	lsls	r2, r2, #3
 800482a:	58d3      	ldr	r3, [r2, r3]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10c      	bne.n	800484a <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <vQueueAddToRegistry+0x4c>)
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	00d2      	lsls	r2, r2, #3
 8004836:	6839      	ldr	r1, [r7, #0]
 8004838:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800483a:	4a09      	ldr	r2, [pc, #36]	; (8004860 <vQueueAddToRegistry+0x4c>)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	18d3      	adds	r3, r2, r3
 8004842:	3304      	adds	r3, #4
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004848:	e005      	b.n	8004856 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b07      	cmp	r3, #7
 8004854:	d9e6      	bls.n	8004824 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	b004      	add	sp, #16
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	20002074 	.word	0x20002074

08004864 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004874:	f001 f9dc 	bl	8005c30 <vPortEnterCritical>
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2244      	movs	r2, #68	; 0x44
 800487c:	5c9b      	ldrb	r3, [r3, r2]
 800487e:	b25b      	sxtb	r3, r3
 8004880:	3301      	adds	r3, #1
 8004882:	d103      	bne.n	800488c <vQueueWaitForMessageRestricted+0x28>
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2244      	movs	r2, #68	; 0x44
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2245      	movs	r2, #69	; 0x45
 8004890:	5c9b      	ldrb	r3, [r3, r2]
 8004892:	b25b      	sxtb	r3, r3
 8004894:	3301      	adds	r3, #1
 8004896:	d103      	bne.n	80048a0 <vQueueWaitForMessageRestricted+0x3c>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2245      	movs	r2, #69	; 0x45
 800489c:	2100      	movs	r1, #0
 800489e:	5499      	strb	r1, [r3, r2]
 80048a0:	f001 f9d8 	bl	8005c54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	3324      	adds	r3, #36	; 0x24
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fbc5 	bl	8005044 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	0018      	movs	r0, r3
 80048be:	f7ff ff1d 	bl	80046fc <prvUnlockQueue>
	}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b006      	add	sp, #24
 80048c8:	bd80      	pop	{r7, pc}

080048ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048ca:	b590      	push	{r4, r7, lr}
 80048cc:	b08d      	sub	sp, #52	; 0x34
 80048ce:	af04      	add	r7, sp, #16
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <xTaskCreateStatic+0x18>
 80048de:	b672      	cpsid	i
 80048e0:	e7fe      	b.n	80048e0 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <xTaskCreateStatic+0x22>
 80048e8:	b672      	cpsid	i
 80048ea:	e7fe      	b.n	80048ea <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048ec:	235c      	movs	r3, #92	; 0x5c
 80048ee:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b5c      	cmp	r3, #92	; 0x5c
 80048f4:	d001      	beq.n	80048fa <xTaskCreateStatic+0x30>
 80048f6:	b672      	cpsid	i
 80048f8:	e7fe      	b.n	80048f8 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <xTaskCreateStatic+0x78>
 8004900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01d      	beq.n	8004942 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800490e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2259      	movs	r2, #89	; 0x59
 8004914:	2102      	movs	r1, #2
 8004916:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004918:	683c      	ldr	r4, [r7, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	2300      	movs	r3, #0
 8004922:	9303      	str	r3, [sp, #12]
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	9302      	str	r3, [sp, #8]
 8004928:	2318      	movs	r3, #24
 800492a:	18fb      	adds	r3, r7, r3
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	0023      	movs	r3, r4
 8004934:	f000 f858 	bl	80049e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	0018      	movs	r0, r3
 800493c:	f000 f8d6 	bl	8004aec <prvAddNewTaskToReadyList>
 8004940:	e001      	b.n	8004946 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004946:	69bb      	ldr	r3, [r7, #24]
	}
 8004948:	0018      	movs	r0, r3
 800494a:	46bd      	mov	sp, r7
 800494c:	b009      	add	sp, #36	; 0x24
 800494e:	bd90      	pop	{r4, r7, pc}

08004950 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004950:	b590      	push	{r4, r7, lr}
 8004952:	b08d      	sub	sp, #52	; 0x34
 8004954:	af04      	add	r7, sp, #16
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	1dbb      	adds	r3, r7, #6
 800495e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004960:	1dbb      	adds	r3, r7, #6
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	0018      	movs	r0, r3
 8004968:	f001 f9fa 	bl	8005d60 <pvPortMalloc>
 800496c:	0003      	movs	r3, r0
 800496e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d010      	beq.n	8004998 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004976:	205c      	movs	r0, #92	; 0x5c
 8004978:	f001 f9f2 	bl	8005d60 <pvPortMalloc>
 800497c:	0003      	movs	r3, r0
 800497e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
 800498c:	e006      	b.n	800499c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	0018      	movs	r0, r3
 8004992:	f001 fa8b 	bl	8005eac <vPortFree>
 8004996:	e001      	b.n	800499c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004998:	2300      	movs	r3, #0
 800499a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d01a      	beq.n	80049d8 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	2259      	movs	r2, #89	; 0x59
 80049a6:	2100      	movs	r1, #0
 80049a8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049aa:	1dbb      	adds	r3, r7, #6
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	683c      	ldr	r4, [r7, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	68f8      	ldr	r0, [r7, #12]
 80049b4:	2300      	movs	r3, #0
 80049b6:	9303      	str	r3, [sp, #12]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	9302      	str	r3, [sp, #8]
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	0023      	movs	r3, r4
 80049c6:	f000 f80f 	bl	80049e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 f88d 	bl	8004aec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049d2:	2301      	movs	r3, #1
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	e002      	b.n	80049de <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049d8:	2301      	movs	r3, #1
 80049da:	425b      	negs	r3, r3
 80049dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049de:	69bb      	ldr	r3, [r7, #24]
	}
 80049e0:	0018      	movs	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	b009      	add	sp, #36	; 0x24
 80049e6:	bd90      	pop	{r4, r7, pc}

080049e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
 80049f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	001a      	movs	r2, r3
 8004a00:	21a5      	movs	r1, #165	; 0xa5
 8004a02:	f001 fb80 	bl	8006106 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4936      	ldr	r1, [pc, #216]	; (8004ae8 <prvInitialiseNewTask+0x100>)
 8004a0e:	468c      	mov	ip, r1
 8004a10:	4463      	add	r3, ip
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	18d3      	adds	r3, r2, r3
 8004a16:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2207      	movs	r2, #7
 8004a1c:	4393      	bics	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2207      	movs	r2, #7
 8004a24:	4013      	ands	r3, r2
 8004a26:	d001      	beq.n	8004a2c <prvInitialiseNewTask+0x44>
 8004a28:	b672      	cpsid	i
 8004a2a:	e7fe      	b.n	8004a2a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	e013      	b.n	8004a5a <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	18d3      	adds	r3, r2, r3
 8004a38:	7818      	ldrb	r0, [r3, #0]
 8004a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a3c:	2134      	movs	r1, #52	; 0x34
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	18d3      	adds	r3, r2, r3
 8004a42:	185b      	adds	r3, r3, r1
 8004a44:	1c02      	adds	r2, r0, #0
 8004a46:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	18d3      	adds	r3, r2, r3
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d006      	beq.n	8004a62 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	3301      	adds	r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b0f      	cmp	r3, #15
 8004a5e:	d9e8      	bls.n	8004a32 <prvInitialiseNewTask+0x4a>
 8004a60:	e000      	b.n	8004a64 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004a62:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	2243      	movs	r2, #67	; 0x43
 8004a68:	2100      	movs	r1, #0
 8004a6a:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	2b37      	cmp	r3, #55	; 0x37
 8004a70:	d901      	bls.n	8004a76 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a72:	2337      	movs	r3, #55	; 0x37
 8004a74:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	6a3a      	ldr	r2, [r7, #32]
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	6a3a      	ldr	r2, [r7, #32]
 8004a80:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	2200      	movs	r2, #0
 8004a86:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f7ff fa69 	bl	8003f64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	3318      	adds	r3, #24
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7ff fa64 	bl	8003f64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aa0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	2238      	movs	r2, #56	; 0x38
 8004aa6:	1ad2      	subs	r2, r2, r3
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2258      	movs	r2, #88	; 0x58
 8004abc:	2100      	movs	r1, #0
 8004abe:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f001 f81c 	bl	8005b04 <pxPortInitialiseStack>
 8004acc:	0002      	movs	r2, r0
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d002      	beq.n	8004ade <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004adc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b006      	add	sp, #24
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	3fffffff 	.word	0x3fffffff

08004aec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004af4:	f001 f89c 	bl	8005c30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004af8:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <prvAddNewTaskToReadyList+0xb8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	4b29      	ldr	r3, [pc, #164]	; (8004ba4 <prvAddNewTaskToReadyList+0xb8>)
 8004b00:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004b02:	4b29      	ldr	r3, [pc, #164]	; (8004ba8 <prvAddNewTaskToReadyList+0xbc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b0a:	4b27      	ldr	r3, [pc, #156]	; (8004ba8 <prvAddNewTaskToReadyList+0xbc>)
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b10:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <prvAddNewTaskToReadyList+0xb8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d110      	bne.n	8004b3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b18:	f000 fb94 	bl	8005244 <prvInitialiseTaskLists>
 8004b1c:	e00d      	b.n	8004b3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b1e:	4b23      	ldr	r3, [pc, #140]	; (8004bac <prvAddNewTaskToReadyList+0xc0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b26:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <prvAddNewTaskToReadyList+0xbc>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d802      	bhi.n	8004b3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b34:	4b1c      	ldr	r3, [pc, #112]	; (8004ba8 <prvAddNewTaskToReadyList+0xbc>)
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <prvAddNewTaskToReadyList+0xc4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	1c5a      	adds	r2, r3, #1
 8004b40:	4b1b      	ldr	r3, [pc, #108]	; (8004bb0 <prvAddNewTaskToReadyList+0xc4>)
 8004b42:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b44:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <prvAddNewTaskToReadyList+0xc4>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	4b18      	ldr	r3, [pc, #96]	; (8004bb4 <prvAddNewTaskToReadyList+0xc8>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d903      	bls.n	8004b60 <prvAddNewTaskToReadyList+0x74>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5c:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <prvAddNewTaskToReadyList+0xc8>)
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	0013      	movs	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4a12      	ldr	r2, [pc, #72]	; (8004bb8 <prvAddNewTaskToReadyList+0xcc>)
 8004b6e:	189a      	adds	r2, r3, r2
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3304      	adds	r3, #4
 8004b74:	0019      	movs	r1, r3
 8004b76:	0010      	movs	r0, r2
 8004b78:	f7ff f9ff 	bl	8003f7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b7c:	f001 f86a 	bl	8005c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <prvAddNewTaskToReadyList+0xc0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <prvAddNewTaskToReadyList+0xbc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d201      	bcs.n	8004b9a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b96:	f001 f83b 	bl	8005c10 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b002      	add	sp, #8
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	20000fd4 	.word	0x20000fd4
 8004ba8:	20000b00 	.word	0x20000b00
 8004bac:	20000fe0 	.word	0x20000fe0
 8004bb0:	20000ff0 	.word	0x20000ff0
 8004bb4:	20000fdc 	.word	0x20000fdc
 8004bb8:	20000b04 	.word	0x20000b04

08004bbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d010      	beq.n	8004bf0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <vTaskDelay+0x48>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <vTaskDelay+0x1e>
 8004bd6:	b672      	cpsid	i
 8004bd8:	e7fe      	b.n	8004bd8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004bda:	f000 f869 	bl	8004cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2100      	movs	r1, #0
 8004be2:	0018      	movs	r0, r3
 8004be4:	f000 fc64 	bl	80054b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004be8:	f000 f86e 	bl	8004cc8 <xTaskResumeAll>
 8004bec:	0003      	movs	r3, r0
 8004bee:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004bf6:	f001 f80b 	bl	8005c10 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b004      	add	sp, #16
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	20000ffc 	.word	0x20000ffc

08004c08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b089      	sub	sp, #36	; 0x24
 8004c0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c16:	003a      	movs	r2, r7
 8004c18:	1d39      	adds	r1, r7, #4
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	18fb      	adds	r3, r7, r3
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7ff f952 	bl	8003ec8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c24:	683c      	ldr	r4, [r7, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	491b      	ldr	r1, [pc, #108]	; (8004c98 <vTaskStartScheduler+0x90>)
 8004c2c:	481b      	ldr	r0, [pc, #108]	; (8004c9c <vTaskStartScheduler+0x94>)
 8004c2e:	9202      	str	r2, [sp, #8]
 8004c30:	9301      	str	r3, [sp, #4]
 8004c32:	2300      	movs	r3, #0
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	2300      	movs	r3, #0
 8004c38:	0022      	movs	r2, r4
 8004c3a:	f7ff fe46 	bl	80048ca <xTaskCreateStatic>
 8004c3e:	0002      	movs	r2, r0
 8004c40:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <vTaskStartScheduler+0x98>)
 8004c42:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c44:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <vTaskStartScheduler+0x98>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e001      	b.n	8004c56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d103      	bne.n	8004c64 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8004c5c:	f000 fc7c 	bl	8005558 <xTimerCreateTimerTask>
 8004c60:	0003      	movs	r3, r0
 8004c62:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d10d      	bne.n	8004c86 <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004c6a:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <vTaskStartScheduler+0x9c>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	4252      	negs	r2, r2
 8004c72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <vTaskStartScheduler+0xa0>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <vTaskStartScheduler+0xa4>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c80:	f000 ffa2 	bl	8005bc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c84:	e004      	b.n	8004c90 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <vTaskStartScheduler+0x88>
 8004c8c:	b672      	cpsid	i
 8004c8e:	e7fe      	b.n	8004c8e <vTaskStartScheduler+0x86>
}
 8004c90:	46c0      	nop			; (mov r8, r8)
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b005      	add	sp, #20
 8004c96:	bd90      	pop	{r4, r7, pc}
 8004c98:	080061b4 	.word	0x080061b4
 8004c9c:	08005225 	.word	0x08005225
 8004ca0:	20000ff8 	.word	0x20000ff8
 8004ca4:	20000ff4 	.word	0x20000ff4
 8004ca8:	20000fe0 	.word	0x20000fe0
 8004cac:	20000fd8 	.word	0x20000fd8

08004cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004cb4:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <vTaskSuspendAll+0x14>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	4b02      	ldr	r3, [pc, #8]	; (8004cc4 <vTaskSuspendAll+0x14>)
 8004cbc:	601a      	str	r2, [r3, #0]
}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	20000ffc 	.word	0x20000ffc

08004cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004cd6:	4b3a      	ldr	r3, [pc, #232]	; (8004dc0 <xTaskResumeAll+0xf8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <xTaskResumeAll+0x1a>
 8004cde:	b672      	cpsid	i
 8004ce0:	e7fe      	b.n	8004ce0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ce2:	f000 ffa5 	bl	8005c30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ce6:	4b36      	ldr	r3, [pc, #216]	; (8004dc0 <xTaskResumeAll+0xf8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	1e5a      	subs	r2, r3, #1
 8004cec:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <xTaskResumeAll+0xf8>)
 8004cee:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf0:	4b33      	ldr	r3, [pc, #204]	; (8004dc0 <xTaskResumeAll+0xf8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d15b      	bne.n	8004db0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cf8:	4b32      	ldr	r3, [pc, #200]	; (8004dc4 <xTaskResumeAll+0xfc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d057      	beq.n	8004db0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d00:	e02f      	b.n	8004d62 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d02:	4b31      	ldr	r3, [pc, #196]	; (8004dc8 <xTaskResumeAll+0x100>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7ff f98b 	bl	800402a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3304      	adds	r3, #4
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f7ff f986 	bl	800402a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d22:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <xTaskResumeAll+0x104>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d903      	bls.n	8004d32 <xTaskResumeAll+0x6a>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2e:	4b27      	ldr	r3, [pc, #156]	; (8004dcc <xTaskResumeAll+0x104>)
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d36:	0013      	movs	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	189b      	adds	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4a24      	ldr	r2, [pc, #144]	; (8004dd0 <xTaskResumeAll+0x108>)
 8004d40:	189a      	adds	r2, r3, r2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3304      	adds	r3, #4
 8004d46:	0019      	movs	r1, r3
 8004d48:	0010      	movs	r0, r2
 8004d4a:	f7ff f916 	bl	8003f7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <xTaskResumeAll+0x10c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004d5c:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <xTaskResumeAll+0x110>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d62:	4b19      	ldr	r3, [pc, #100]	; (8004dc8 <xTaskResumeAll+0x100>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1cb      	bne.n	8004d02 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d70:	f000 fb02 	bl	8005378 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004d74:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <xTaskResumeAll+0x114>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00f      	beq.n	8004da0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d80:	f000 f83c 	bl	8004dfc <xTaskIncrementTick>
 8004d84:	1e03      	subs	r3, r0, #0
 8004d86:	d002      	beq.n	8004d8e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8004d88:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <xTaskResumeAll+0x110>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f2      	bne.n	8004d80 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8004d9a:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <xTaskResumeAll+0x114>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004da0:	4b0d      	ldr	r3, [pc, #52]	; (8004dd8 <xTaskResumeAll+0x110>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004dac:	f000 ff30 	bl	8005c10 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004db0:	f000 ff50 	bl	8005c54 <vPortExitCritical>

	return xAlreadyYielded;
 8004db4:	68bb      	ldr	r3, [r7, #8]
}
 8004db6:	0018      	movs	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	b004      	add	sp, #16
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			; (mov r8, r8)
 8004dc0:	20000ffc 	.word	0x20000ffc
 8004dc4:	20000fd4 	.word	0x20000fd4
 8004dc8:	20000f94 	.word	0x20000f94
 8004dcc:	20000fdc 	.word	0x20000fdc
 8004dd0:	20000b04 	.word	0x20000b04
 8004dd4:	20000b00 	.word	0x20000b00
 8004dd8:	20000fe8 	.word	0x20000fe8
 8004ddc:	20000fe4 	.word	0x20000fe4

08004de0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004de6:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <xTaskGetTickCount+0x18>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dec:	687b      	ldr	r3, [r7, #4]
}
 8004dee:	0018      	movs	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	b002      	add	sp, #8
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	20000fd8 	.word	0x20000fd8

08004dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e06:	4b4c      	ldr	r3, [pc, #304]	; (8004f38 <xTaskIncrementTick+0x13c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d000      	beq.n	8004e10 <xTaskIncrementTick+0x14>
 8004e0e:	e083      	b.n	8004f18 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e10:	4b4a      	ldr	r3, [pc, #296]	; (8004f3c <xTaskIncrementTick+0x140>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3301      	adds	r3, #1
 8004e16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e18:	4b48      	ldr	r3, [pc, #288]	; (8004f3c <xTaskIncrementTick+0x140>)
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d117      	bne.n	8004e54 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e24:	4b46      	ldr	r3, [pc, #280]	; (8004f40 <xTaskIncrementTick+0x144>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <xTaskIncrementTick+0x36>
 8004e2e:	b672      	cpsid	i
 8004e30:	e7fe      	b.n	8004e30 <xTaskIncrementTick+0x34>
 8004e32:	4b43      	ldr	r3, [pc, #268]	; (8004f40 <xTaskIncrementTick+0x144>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	4b42      	ldr	r3, [pc, #264]	; (8004f44 <xTaskIncrementTick+0x148>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b40      	ldr	r3, [pc, #256]	; (8004f40 <xTaskIncrementTick+0x144>)
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	4b40      	ldr	r3, [pc, #256]	; (8004f44 <xTaskIncrementTick+0x148>)
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	4b40      	ldr	r3, [pc, #256]	; (8004f48 <xTaskIncrementTick+0x14c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <xTaskIncrementTick+0x14c>)
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f000 fa92 	bl	8005378 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e54:	4b3d      	ldr	r3, [pc, #244]	; (8004f4c <xTaskIncrementTick+0x150>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d34e      	bcc.n	8004efc <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e5e:	4b38      	ldr	r3, [pc, #224]	; (8004f40 <xTaskIncrementTick+0x144>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <xTaskIncrementTick+0x70>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <xTaskIncrementTick+0x72>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d004      	beq.n	8004e7c <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e72:	4b36      	ldr	r3, [pc, #216]	; (8004f4c <xTaskIncrementTick+0x150>)
 8004e74:	2201      	movs	r2, #1
 8004e76:	4252      	negs	r2, r2
 8004e78:	601a      	str	r2, [r3, #0]
					break;
 8004e7a:	e03f      	b.n	8004efc <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004e7c:	4b30      	ldr	r3, [pc, #192]	; (8004f40 <xTaskIncrementTick+0x144>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d203      	bcs.n	8004e9c <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e94:	4b2d      	ldr	r3, [pc, #180]	; (8004f4c <xTaskIncrementTick+0x150>)
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	601a      	str	r2, [r3, #0]
						break;
 8004e9a:	e02f      	b.n	8004efc <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	f7ff f8c2 	bl	800402a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	3318      	adds	r3, #24
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f7ff f8b9 	bl	800402a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebc:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <xTaskIncrementTick+0x154>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d903      	bls.n	8004ecc <xTaskIncrementTick+0xd0>
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec8:	4b21      	ldr	r3, [pc, #132]	; (8004f50 <xTaskIncrementTick+0x154>)
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed0:	0013      	movs	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	189b      	adds	r3, r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <xTaskIncrementTick+0x158>)
 8004eda:	189a      	adds	r2, r3, r2
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	0019      	movs	r1, r3
 8004ee2:	0010      	movs	r0, r2
 8004ee4:	f7ff f849 	bl	8003f7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eec:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <xTaskIncrementTick+0x15c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d3b3      	bcc.n	8004e5e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004efa:	e7b0      	b.n	8004e5e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004efc:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <xTaskIncrementTick+0x15c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f02:	4914      	ldr	r1, [pc, #80]	; (8004f54 <xTaskIncrementTick+0x158>)
 8004f04:	0013      	movs	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	189b      	adds	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	585b      	ldr	r3, [r3, r1]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d907      	bls.n	8004f22 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004f12:	2301      	movs	r3, #1
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	e004      	b.n	8004f22 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f18:	4b10      	ldr	r3, [pc, #64]	; (8004f5c <xTaskIncrementTick+0x160>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <xTaskIncrementTick+0x160>)
 8004f20:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f22:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <xTaskIncrementTick+0x164>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f2e:	697b      	ldr	r3, [r7, #20]
}
 8004f30:	0018      	movs	r0, r3
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b006      	add	sp, #24
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	20000ffc 	.word	0x20000ffc
 8004f3c:	20000fd8 	.word	0x20000fd8
 8004f40:	20000f8c 	.word	0x20000f8c
 8004f44:	20000f90 	.word	0x20000f90
 8004f48:	20000fec 	.word	0x20000fec
 8004f4c:	20000ff4 	.word	0x20000ff4
 8004f50:	20000fdc 	.word	0x20000fdc
 8004f54:	20000b04 	.word	0x20000b04
 8004f58:	20000b00 	.word	0x20000b00
 8004f5c:	20000fe4 	.word	0x20000fe4
 8004f60:	20000fe8 	.word	0x20000fe8

08004f64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f6a:	4b22      	ldr	r3, [pc, #136]	; (8004ff4 <vTaskSwitchContext+0x90>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f72:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <vTaskSwitchContext+0x94>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f78:	e037      	b.n	8004fea <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004f7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ff8 <vTaskSwitchContext+0x94>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f80:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <vTaskSwitchContext+0x98>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	607b      	str	r3, [r7, #4]
 8004f86:	e007      	b.n	8004f98 <vTaskSwitchContext+0x34>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <vTaskSwitchContext+0x2e>
 8004f8e:	b672      	cpsid	i
 8004f90:	e7fe      	b.n	8004f90 <vTaskSwitchContext+0x2c>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	4919      	ldr	r1, [pc, #100]	; (8005000 <vTaskSwitchContext+0x9c>)
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	0013      	movs	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	189b      	adds	r3, r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	585b      	ldr	r3, [r3, r1]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0ee      	beq.n	8004f88 <vTaskSwitchContext+0x24>
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	0013      	movs	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	189b      	adds	r3, r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4a12      	ldr	r2, [pc, #72]	; (8005000 <vTaskSwitchContext+0x9c>)
 8004fb6:	189b      	adds	r3, r3, r2
 8004fb8:	603b      	str	r3, [r7, #0]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	3308      	adds	r3, #8
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d104      	bne.n	8004fda <vTaskSwitchContext+0x76>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	4b08      	ldr	r3, [pc, #32]	; (8005004 <vTaskSwitchContext+0xa0>)
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <vTaskSwitchContext+0x98>)
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	601a      	str	r2, [r3, #0]
}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	46bd      	mov	sp, r7
 8004fee:	b002      	add	sp, #8
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	20000ffc 	.word	0x20000ffc
 8004ff8:	20000fe8 	.word	0x20000fe8
 8004ffc:	20000fdc 	.word	0x20000fdc
 8005000:	20000b04 	.word	0x20000b04
 8005004:	20000b00 	.word	0x20000b00

08005008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <vTaskPlaceOnEventList+0x14>
 8005018:	b672      	cpsid	i
 800501a:	e7fe      	b.n	800501a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800501c:	4b08      	ldr	r3, [pc, #32]	; (8005040 <vTaskPlaceOnEventList+0x38>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3318      	adds	r3, #24
 8005022:	001a      	movs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	0011      	movs	r1, r2
 8005028:	0018      	movs	r0, r3
 800502a:	f7fe ffc8 	bl	8003fbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2101      	movs	r1, #1
 8005032:	0018      	movs	r0, r3
 8005034:	f000 fa3c 	bl	80054b0 <prvAddCurrentTaskToDelayedList>
}
 8005038:	46c0      	nop			; (mov r8, r8)
 800503a:	46bd      	mov	sp, r7
 800503c:	b002      	add	sp, #8
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000b00 	.word	0x20000b00

08005044 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <vTaskPlaceOnEventListRestricted+0x16>
 8005056:	b672      	cpsid	i
 8005058:	e7fe      	b.n	8005058 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800505a:	4b0c      	ldr	r3, [pc, #48]	; (800508c <vTaskPlaceOnEventListRestricted+0x48>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3318      	adds	r3, #24
 8005060:	001a      	movs	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	0011      	movs	r1, r2
 8005066:	0018      	movs	r0, r3
 8005068:	f7fe ff87 	bl	8003f7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8005072:	2301      	movs	r3, #1
 8005074:	425b      	negs	r3, r3
 8005076:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	0011      	movs	r1, r2
 800507e:	0018      	movs	r0, r3
 8005080:	f000 fa16 	bl	80054b0 <prvAddCurrentTaskToDelayedList>
	}
 8005084:	46c0      	nop			; (mov r8, r8)
 8005086:	46bd      	mov	sp, r7
 8005088:	b004      	add	sp, #16
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000b00 	.word	0x20000b00

08005090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <xTaskRemoveFromEventList+0x1a>
 80050a6:	b672      	cpsid	i
 80050a8:	e7fe      	b.n	80050a8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	3318      	adds	r3, #24
 80050ae:	0018      	movs	r0, r3
 80050b0:	f7fe ffbb 	bl	800402a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050b4:	4b1e      	ldr	r3, [pc, #120]	; (8005130 <xTaskRemoveFromEventList+0xa0>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d11d      	bne.n	80050f8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	3304      	adds	r3, #4
 80050c0:	0018      	movs	r0, r3
 80050c2:	f7fe ffb2 	bl	800402a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ca:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <xTaskRemoveFromEventList+0xa4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d903      	bls.n	80050da <xTaskRemoveFromEventList+0x4a>
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d6:	4b17      	ldr	r3, [pc, #92]	; (8005134 <xTaskRemoveFromEventList+0xa4>)
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050de:	0013      	movs	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4a14      	ldr	r2, [pc, #80]	; (8005138 <xTaskRemoveFromEventList+0xa8>)
 80050e8:	189a      	adds	r2, r3, r2
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	3304      	adds	r3, #4
 80050ee:	0019      	movs	r1, r3
 80050f0:	0010      	movs	r0, r2
 80050f2:	f7fe ff42 	bl	8003f7a <vListInsertEnd>
 80050f6:	e007      	b.n	8005108 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	3318      	adds	r3, #24
 80050fc:	001a      	movs	r2, r3
 80050fe:	4b0f      	ldr	r3, [pc, #60]	; (800513c <xTaskRemoveFromEventList+0xac>)
 8005100:	0011      	movs	r1, r2
 8005102:	0018      	movs	r0, r3
 8005104:	f7fe ff39 	bl	8003f7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <xTaskRemoveFromEventList+0xb0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	429a      	cmp	r2, r3
 8005114:	d905      	bls.n	8005122 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005116:	2301      	movs	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <xTaskRemoveFromEventList+0xb4>)
 800511c:	2201      	movs	r2, #1
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e001      	b.n	8005126 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005126:	68fb      	ldr	r3, [r7, #12]
}
 8005128:	0018      	movs	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	b004      	add	sp, #16
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000ffc 	.word	0x20000ffc
 8005134:	20000fdc 	.word	0x20000fdc
 8005138:	20000b04 	.word	0x20000b04
 800513c:	20000f94 	.word	0x20000f94
 8005140:	20000b00 	.word	0x20000b00
 8005144:	20000fe8 	.word	0x20000fe8

08005148 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <vTaskInternalSetTimeOutState+0x20>)
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005158:	4b04      	ldr	r3, [pc, #16]	; (800516c <vTaskInternalSetTimeOutState+0x24>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	605a      	str	r2, [r3, #4]
}
 8005160:	46c0      	nop			; (mov r8, r8)
 8005162:	46bd      	mov	sp, r7
 8005164:	b002      	add	sp, #8
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000fec 	.word	0x20000fec
 800516c:	20000fd8 	.word	0x20000fd8

08005170 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <xTaskCheckForTimeOut+0x14>
 8005180:	b672      	cpsid	i
 8005182:	e7fe      	b.n	8005182 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <xTaskCheckForTimeOut+0x1e>
 800518a:	b672      	cpsid	i
 800518c:	e7fe      	b.n	800518c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800518e:	f000 fd4f 	bl	8005c30 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005192:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <xTaskCheckForTimeOut+0x98>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	d102      	bne.n	80051b0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	e024      	b.n	80051fa <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4b15      	ldr	r3, [pc, #84]	; (800520c <xTaskCheckForTimeOut+0x9c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d007      	beq.n	80051cc <xTaskCheckForTimeOut+0x5c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d302      	bcc.n	80051cc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
 80051ca:	e016      	b.n	80051fa <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d20c      	bcs.n	80051f0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1ad2      	subs	r2, r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f7ff ffaf 	bl	8005148 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e004      	b.n	80051fa <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051f6:	2301      	movs	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80051fa:	f000 fd2b 	bl	8005c54 <vPortExitCritical>

	return xReturn;
 80051fe:	697b      	ldr	r3, [r7, #20]
}
 8005200:	0018      	movs	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	b006      	add	sp, #24
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000fd8 	.word	0x20000fd8
 800520c:	20000fec 	.word	0x20000fec

08005210 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005214:	4b02      	ldr	r3, [pc, #8]	; (8005220 <vTaskMissedYield+0x10>)
 8005216:	2201      	movs	r2, #1
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	20000fe8 	.word	0x20000fe8

08005224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800522c:	f000 f84e 	bl	80052cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005230:	4b03      	ldr	r3, [pc, #12]	; (8005240 <prvIdleTask+0x1c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d9f9      	bls.n	800522c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005238:	f000 fcea 	bl	8005c10 <vPortYield>
		prvCheckTasksWaitingTermination();
 800523c:	e7f6      	b.n	800522c <prvIdleTask+0x8>
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	20000b04 	.word	0x20000b04

08005244 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800524a:	2300      	movs	r3, #0
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	e00c      	b.n	800526a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	0013      	movs	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	189b      	adds	r3, r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4a14      	ldr	r2, [pc, #80]	; (80052ac <prvInitialiseTaskLists+0x68>)
 800525c:	189b      	adds	r3, r3, r2
 800525e:	0018      	movs	r0, r3
 8005260:	f7fe fe62 	bl	8003f28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3301      	adds	r3, #1
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b37      	cmp	r3, #55	; 0x37
 800526e:	d9ef      	bls.n	8005250 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005270:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <prvInitialiseTaskLists+0x6c>)
 8005272:	0018      	movs	r0, r3
 8005274:	f7fe fe58 	bl	8003f28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005278:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <prvInitialiseTaskLists+0x70>)
 800527a:	0018      	movs	r0, r3
 800527c:	f7fe fe54 	bl	8003f28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005280:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <prvInitialiseTaskLists+0x74>)
 8005282:	0018      	movs	r0, r3
 8005284:	f7fe fe50 	bl	8003f28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <prvInitialiseTaskLists+0x78>)
 800528a:	0018      	movs	r0, r3
 800528c:	f7fe fe4c 	bl	8003f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <prvInitialiseTaskLists+0x7c>)
 8005292:	0018      	movs	r0, r3
 8005294:	f7fe fe48 	bl	8003f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005298:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <prvInitialiseTaskLists+0x80>)
 800529a:	4a05      	ldr	r2, [pc, #20]	; (80052b0 <prvInitialiseTaskLists+0x6c>)
 800529c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800529e:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <prvInitialiseTaskLists+0x84>)
 80052a0:	4a04      	ldr	r2, [pc, #16]	; (80052b4 <prvInitialiseTaskLists+0x70>)
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b002      	add	sp, #8
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	20000b04 	.word	0x20000b04
 80052b0:	20000f64 	.word	0x20000f64
 80052b4:	20000f78 	.word	0x20000f78
 80052b8:	20000f94 	.word	0x20000f94
 80052bc:	20000fa8 	.word	0x20000fa8
 80052c0:	20000fc0 	.word	0x20000fc0
 80052c4:	20000f8c 	.word	0x20000f8c
 80052c8:	20000f90 	.word	0x20000f90

080052cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052d2:	e01a      	b.n	800530a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80052d4:	f000 fcac 	bl	8005c30 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80052d8:	4b10      	ldr	r3, [pc, #64]	; (800531c <prvCheckTasksWaitingTermination+0x50>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	0018      	movs	r0, r3
 80052e6:	f7fe fea0 	bl	800402a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052ea:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <prvCheckTasksWaitingTermination+0x54>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	1e5a      	subs	r2, r3, #1
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <prvCheckTasksWaitingTermination+0x54>)
 80052f2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052f4:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <prvCheckTasksWaitingTermination+0x58>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	1e5a      	subs	r2, r3, #1
 80052fa:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <prvCheckTasksWaitingTermination+0x58>)
 80052fc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80052fe:	f000 fca9 	bl	8005c54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	0018      	movs	r0, r3
 8005306:	f000 f80f 	bl	8005328 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800530a:	4b06      	ldr	r3, [pc, #24]	; (8005324 <prvCheckTasksWaitingTermination+0x58>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1e0      	bne.n	80052d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005312:	46c0      	nop			; (mov r8, r8)
 8005314:	46bd      	mov	sp, r7
 8005316:	b002      	add	sp, #8
 8005318:	bd80      	pop	{r7, pc}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	20000fa8 	.word	0x20000fa8
 8005320:	20000fd4 	.word	0x20000fd4
 8005324:	20000fbc 	.word	0x20000fbc

08005328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2259      	movs	r2, #89	; 0x59
 8005334:	5c9b      	ldrb	r3, [r3, r2]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d109      	bne.n	800534e <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	0018      	movs	r0, r3
 8005340:	f000 fdb4 	bl	8005eac <vPortFree>
				vPortFree( pxTCB );
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	0018      	movs	r0, r3
 8005348:	f000 fdb0 	bl	8005eac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800534c:	e010      	b.n	8005370 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2259      	movs	r2, #89	; 0x59
 8005352:	5c9b      	ldrb	r3, [r3, r2]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d104      	bne.n	8005362 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	0018      	movs	r0, r3
 800535c:	f000 fda6 	bl	8005eac <vPortFree>
	}
 8005360:	e006      	b.n	8005370 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2259      	movs	r2, #89	; 0x59
 8005366:	5c9b      	ldrb	r3, [r3, r2]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d001      	beq.n	8005370 <prvDeleteTCB+0x48>
 800536c:	b672      	cpsid	i
 800536e:	e7fe      	b.n	800536e <prvDeleteTCB+0x46>
	}
 8005370:	46c0      	nop			; (mov r8, r8)
 8005372:	46bd      	mov	sp, r7
 8005374:	b002      	add	sp, #8
 8005376:	bd80      	pop	{r7, pc}

08005378 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <prvResetNextTaskUnblockTime+0x40>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <prvResetNextTaskUnblockTime+0x14>
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <prvResetNextTaskUnblockTime+0x16>
 800538c:	2300      	movs	r3, #0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d004      	beq.n	800539c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005392:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <prvResetNextTaskUnblockTime+0x44>)
 8005394:	2201      	movs	r2, #1
 8005396:	4252      	negs	r2, r2
 8005398:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800539a:	e008      	b.n	80053ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <prvResetNextTaskUnblockTime+0x40>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	4b04      	ldr	r3, [pc, #16]	; (80053bc <prvResetNextTaskUnblockTime+0x44>)
 80053ac:	601a      	str	r2, [r3, #0]
}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b002      	add	sp, #8
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	20000f8c 	.word	0x20000f8c
 80053bc:	20000ff4 	.word	0x20000ff4

080053c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053c6:	4b0a      	ldr	r3, [pc, #40]	; (80053f0 <xTaskGetSchedulerState+0x30>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053ce:	2301      	movs	r3, #1
 80053d0:	607b      	str	r3, [r7, #4]
 80053d2:	e008      	b.n	80053e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053d4:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <xTaskGetSchedulerState+0x34>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d102      	bne.n	80053e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053dc:	2302      	movs	r3, #2
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	e001      	b.n	80053e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053e2:	2300      	movs	r3, #0
 80053e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053e6:	687b      	ldr	r3, [r7, #4]
	}
 80053e8:	0018      	movs	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	b002      	add	sp, #8
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000fe0 	.word	0x20000fe0
 80053f4:	20000ffc 	.word	0x20000ffc

080053f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d044      	beq.n	8005498 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800540e:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <xTaskPriorityDisinherit+0xac>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	d001      	beq.n	800541c <xTaskPriorityDisinherit+0x24>
 8005418:	b672      	cpsid	i
 800541a:	e7fe      	b.n	800541a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <xTaskPriorityDisinherit+0x30>
 8005424:	b672      	cpsid	i
 8005426:	e7fe      	b.n	8005426 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800542c:	1e5a      	subs	r2, r3, #1
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543a:	429a      	cmp	r2, r3
 800543c:	d02c      	beq.n	8005498 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005442:	2b00      	cmp	r3, #0
 8005444:	d128      	bne.n	8005498 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	3304      	adds	r3, #4
 800544a:	0018      	movs	r0, r3
 800544c:	f7fe fded 	bl	800402a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	2238      	movs	r2, #56	; 0x38
 800545e:	1ad2      	subs	r2, r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005468:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <xTaskPriorityDisinherit+0xb0>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d903      	bls.n	8005478 <xTaskPriorityDisinherit+0x80>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005474:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <xTaskPriorityDisinherit+0xb0>)
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547c:	0013      	movs	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	189b      	adds	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4a09      	ldr	r2, [pc, #36]	; (80054ac <xTaskPriorityDisinherit+0xb4>)
 8005486:	189a      	adds	r2, r3, r2
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	3304      	adds	r3, #4
 800548c:	0019      	movs	r1, r3
 800548e:	0010      	movs	r0, r2
 8005490:	f7fe fd73 	bl	8003f7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005494:	2301      	movs	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005498:	68fb      	ldr	r3, [r7, #12]
	}
 800549a:	0018      	movs	r0, r3
 800549c:	46bd      	mov	sp, r7
 800549e:	b004      	add	sp, #16
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	20000b00 	.word	0x20000b00
 80054a8:	20000fdc 	.word	0x20000fdc
 80054ac:	20000b04 	.word	0x20000b04

080054b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054ba:	4b21      	ldr	r3, [pc, #132]	; (8005540 <prvAddCurrentTaskToDelayedList+0x90>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054c0:	4b20      	ldr	r3, [pc, #128]	; (8005544 <prvAddCurrentTaskToDelayedList+0x94>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3304      	adds	r3, #4
 80054c6:	0018      	movs	r0, r3
 80054c8:	f7fe fdaf 	bl	800402a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3301      	adds	r3, #1
 80054d0:	d10b      	bne.n	80054ea <prvAddCurrentTaskToDelayedList+0x3a>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d008      	beq.n	80054ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054d8:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <prvAddCurrentTaskToDelayedList+0x94>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	1d1a      	adds	r2, r3, #4
 80054de:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <prvAddCurrentTaskToDelayedList+0x98>)
 80054e0:	0011      	movs	r1, r2
 80054e2:	0018      	movs	r0, r3
 80054e4:	f7fe fd49 	bl	8003f7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054e8:	e026      	b.n	8005538 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	18d3      	adds	r3, r2, r3
 80054f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054f2:	4b14      	ldr	r3, [pc, #80]	; (8005544 <prvAddCurrentTaskToDelayedList+0x94>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d209      	bcs.n	8005516 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b0f      	ldr	r3, [pc, #60]	; (8005544 <prvAddCurrentTaskToDelayedList+0x94>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3304      	adds	r3, #4
 800550c:	0019      	movs	r1, r3
 800550e:	0010      	movs	r0, r2
 8005510:	f7fe fd55 	bl	8003fbe <vListInsert>
}
 8005514:	e010      	b.n	8005538 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005516:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <prvAddCurrentTaskToDelayedList+0x94>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3304      	adds	r3, #4
 8005520:	0019      	movs	r1, r3
 8005522:	0010      	movs	r0, r2
 8005524:	f7fe fd4b 	bl	8003fbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <prvAddCurrentTaskToDelayedList+0xa4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	d202      	bcs.n	8005538 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	601a      	str	r2, [r3, #0]
}
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	46bd      	mov	sp, r7
 800553c:	b004      	add	sp, #16
 800553e:	bd80      	pop	{r7, pc}
 8005540:	20000fd8 	.word	0x20000fd8
 8005544:	20000b00 	.word	0x20000b00
 8005548:	20000fc0 	.word	0x20000fc0
 800554c:	20000f90 	.word	0x20000f90
 8005550:	20000f8c 	.word	0x20000f8c
 8005554:	20000ff4 	.word	0x20000ff4

08005558 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b089      	sub	sp, #36	; 0x24
 800555c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005562:	f000 fa8b 	bl	8005a7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005566:	4b17      	ldr	r3, [pc, #92]	; (80055c4 <xTimerCreateTimerTask+0x6c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d020      	beq.n	80055b0 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005576:	003a      	movs	r2, r7
 8005578:	1d39      	adds	r1, r7, #4
 800557a:	2308      	movs	r3, #8
 800557c:	18fb      	adds	r3, r7, r3
 800557e:	0018      	movs	r0, r3
 8005580:	f7fe fcba 	bl	8003ef8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005584:	683c      	ldr	r4, [r7, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	490f      	ldr	r1, [pc, #60]	; (80055c8 <xTimerCreateTimerTask+0x70>)
 800558c:	480f      	ldr	r0, [pc, #60]	; (80055cc <xTimerCreateTimerTask+0x74>)
 800558e:	9202      	str	r2, [sp, #8]
 8005590:	9301      	str	r3, [sp, #4]
 8005592:	2302      	movs	r3, #2
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	2300      	movs	r3, #0
 8005598:	0022      	movs	r2, r4
 800559a:	f7ff f996 	bl	80048ca <xTaskCreateStatic>
 800559e:	0002      	movs	r2, r0
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <xTimerCreateTimerTask+0x78>)
 80055a2:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055a4:	4b0a      	ldr	r3, [pc, #40]	; (80055d0 <xTimerCreateTimerTask+0x78>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80055ac:	2301      	movs	r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <xTimerCreateTimerTask+0x62>
 80055b6:	b672      	cpsid	i
 80055b8:	e7fe      	b.n	80055b8 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80055ba:	68fb      	ldr	r3, [r7, #12]
}
 80055bc:	0018      	movs	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	b005      	add	sp, #20
 80055c2:	bd90      	pop	{r4, r7, pc}
 80055c4:	20001030 	.word	0x20001030
 80055c8:	080061bc 	.word	0x080061bc
 80055cc:	080056dd 	.word	0x080056dd
 80055d0:	20001034 	.word	0x20001034

080055d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
 80055e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <xTimerGenericCommand+0x1c>
 80055ec:	b672      	cpsid	i
 80055ee:	e7fe      	b.n	80055ee <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055f0:	4b1d      	ldr	r3, [pc, #116]	; (8005668 <xTimerGenericCommand+0x94>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d031      	beq.n	800565c <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055f8:	2114      	movs	r1, #20
 80055fa:	187b      	adds	r3, r7, r1
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005600:	187b      	adds	r3, r7, r1
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005606:	187b      	adds	r3, r7, r1
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b05      	cmp	r3, #5
 8005610:	dc1a      	bgt.n	8005648 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005612:	f7ff fed5 	bl	80053c0 <xTaskGetSchedulerState>
 8005616:	0003      	movs	r3, r0
 8005618:	2b02      	cmp	r3, #2
 800561a:	d10a      	bne.n	8005632 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800561c:	4b12      	ldr	r3, [pc, #72]	; (8005668 <xTimerGenericCommand+0x94>)
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005622:	2314      	movs	r3, #20
 8005624:	18f9      	adds	r1, r7, r3
 8005626:	2300      	movs	r3, #0
 8005628:	f7fe fded 	bl	8004206 <xQueueGenericSend>
 800562c:	0003      	movs	r3, r0
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
 8005630:	e014      	b.n	800565c <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005632:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <xTimerGenericCommand+0x94>)
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	2314      	movs	r3, #20
 8005638:	18f9      	adds	r1, r7, r3
 800563a:	2300      	movs	r3, #0
 800563c:	2200      	movs	r2, #0
 800563e:	f7fe fde2 	bl	8004206 <xQueueGenericSend>
 8005642:	0003      	movs	r3, r0
 8005644:	627b      	str	r3, [r7, #36]	; 0x24
 8005646:	e009      	b.n	800565c <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005648:	4b07      	ldr	r3, [pc, #28]	; (8005668 <xTimerGenericCommand+0x94>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	2314      	movs	r3, #20
 8005650:	18f9      	adds	r1, r7, r3
 8005652:	2300      	movs	r3, #0
 8005654:	f7fe fe9b 	bl	800438e <xQueueGenericSendFromISR>
 8005658:	0003      	movs	r3, r0
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800565e:	0018      	movs	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	b00a      	add	sp, #40	; 0x28
 8005664:	bd80      	pop	{r7, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	20001030 	.word	0x20001030

0800566c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af02      	add	r7, sp, #8
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005676:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <prvProcessExpiredTimer+0x6c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	3304      	adds	r3, #4
 8005684:	0018      	movs	r0, r3
 8005686:	f7fe fcd0 	bl	800402a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d119      	bne.n	80056c6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	18d1      	adds	r1, r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f8b6 	bl	8005810 <prvInsertTimerInActiveList>
 80056a4:	1e03      	subs	r3, r0, #0
 80056a6:	d00e      	beq.n	80056c6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	2300      	movs	r3, #0
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	2300      	movs	r3, #0
 80056b2:	2100      	movs	r1, #0
 80056b4:	f7ff ff8e 	bl	80055d4 <xTimerGenericCommand>
 80056b8:	0003      	movs	r3, r0
 80056ba:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <prvProcessExpiredTimer+0x5a>
 80056c2:	b672      	cpsid	i
 80056c4:	e7fe      	b.n	80056c4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	0010      	movs	r0, r2
 80056ce:	4798      	blx	r3
}
 80056d0:	46c0      	nop			; (mov r8, r8)
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b004      	add	sp, #16
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20001028 	.word	0x20001028

080056dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056e4:	2308      	movs	r3, #8
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	0018      	movs	r0, r3
 80056ea:	f000 f851 	bl	8005790 <prvGetNextExpireTime>
 80056ee:	0003      	movs	r3, r0
 80056f0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	0011      	movs	r1, r2
 80056f8:	0018      	movs	r0, r3
 80056fa:	f000 f803 	bl	8005704 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056fe:	f000 f8c9 	bl	8005894 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005702:	e7ef      	b.n	80056e4 <prvTimerTask+0x8>

08005704 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800570e:	f7ff facf 	bl	8004cb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005712:	2308      	movs	r3, #8
 8005714:	18fb      	adds	r3, r7, r3
 8005716:	0018      	movs	r0, r3
 8005718:	f000 f85a 	bl	80057d0 <prvSampleTimeNow>
 800571c:	0003      	movs	r3, r0
 800571e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d129      	bne.n	800577a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10c      	bne.n	8005746 <prvProcessTimerOrBlockTask+0x42>
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	429a      	cmp	r2, r3
 8005732:	d808      	bhi.n	8005746 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8005734:	f7ff fac8 	bl	8004cc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	0011      	movs	r1, r2
 800573e:	0018      	movs	r0, r3
 8005740:	f7ff ff94 	bl	800566c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005744:	e01b      	b.n	800577e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d006      	beq.n	800575a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800574c:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <prvProcessTimerOrBlockTask+0x84>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	425a      	negs	r2, r3
 8005754:	4153      	adcs	r3, r2
 8005756:	b2db      	uxtb	r3, r3
 8005758:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800575a:	4b0c      	ldr	r3, [pc, #48]	; (800578c <prvProcessTimerOrBlockTask+0x88>)
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	0019      	movs	r1, r3
 8005768:	f7ff f87c 	bl	8004864 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800576c:	f7ff faac 	bl	8004cc8 <xTaskResumeAll>
 8005770:	1e03      	subs	r3, r0, #0
 8005772:	d104      	bne.n	800577e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8005774:	f000 fa4c 	bl	8005c10 <vPortYield>
}
 8005778:	e001      	b.n	800577e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800577a:	f7ff faa5 	bl	8004cc8 <xTaskResumeAll>
}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	46bd      	mov	sp, r7
 8005782:	b004      	add	sp, #16
 8005784:	bd80      	pop	{r7, pc}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	2000102c 	.word	0x2000102c
 800578c:	20001030 	.word	0x20001030

08005790 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005798:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <prvGetNextExpireTime+0x3c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	425a      	negs	r2, r3
 80057a0:	4153      	adcs	r3, r2
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	001a      	movs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d105      	bne.n	80057be <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057b2:	4b06      	ldr	r3, [pc, #24]	; (80057cc <prvGetNextExpireTime+0x3c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e001      	b.n	80057c2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057c2:	68fb      	ldr	r3, [r7, #12]
}
 80057c4:	0018      	movs	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	b004      	add	sp, #16
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	20001028 	.word	0x20001028

080057d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057d8:	f7ff fb02 	bl	8004de0 <xTaskGetTickCount>
 80057dc:	0003      	movs	r3, r0
 80057de:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <prvSampleTimeNow+0x3c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d205      	bcs.n	80057f6 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80057ea:	f000 f8ed 	bl	80059c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	e002      	b.n	80057fc <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057fc:	4b03      	ldr	r3, [pc, #12]	; (800580c <prvSampleTimeNow+0x3c>)
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8005802:	68fb      	ldr	r3, [r7, #12]
}
 8005804:	0018      	movs	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	b004      	add	sp, #16
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20001038 	.word	0x20001038

08005810 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800581e:	2300      	movs	r3, #0
 8005820:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d812      	bhi.n	800585c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	1ad2      	subs	r2, r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	429a      	cmp	r2, r3
 8005842:	d302      	bcc.n	800584a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e01b      	b.n	8005882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <prvInsertTimerInActiveList+0x7c>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	3304      	adds	r3, #4
 8005852:	0019      	movs	r1, r3
 8005854:	0010      	movs	r0, r2
 8005856:	f7fe fbb2 	bl	8003fbe <vListInsert>
 800585a:	e012      	b.n	8005882 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	429a      	cmp	r2, r3
 8005862:	d206      	bcs.n	8005872 <prvInsertTimerInActiveList+0x62>
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d302      	bcc.n	8005872 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800586c:	2301      	movs	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e007      	b.n	8005882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005872:	4b07      	ldr	r3, [pc, #28]	; (8005890 <prvInsertTimerInActiveList+0x80>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3304      	adds	r3, #4
 800587a:	0019      	movs	r1, r3
 800587c:	0010      	movs	r0, r2
 800587e:	f7fe fb9e 	bl	8003fbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005882:	697b      	ldr	r3, [r7, #20]
}
 8005884:	0018      	movs	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	b006      	add	sp, #24
 800588a:	bd80      	pop	{r7, pc}
 800588c:	2000102c 	.word	0x2000102c
 8005890:	20001028 	.word	0x20001028

08005894 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08c      	sub	sp, #48	; 0x30
 8005898:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800589a:	e082      	b.n	80059a2 <prvProcessReceivedCommands+0x10e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800589c:	2308      	movs	r3, #8
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da10      	bge.n	80058c8 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058a6:	2308      	movs	r3, #8
 80058a8:	18fb      	adds	r3, r7, r3
 80058aa:	3304      	adds	r3, #4
 80058ac:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <prvProcessReceivedCommands+0x24>
 80058b4:	b672      	cpsid	i
 80058b6:	e7fe      	b.n	80058b6 <prvProcessReceivedCommands+0x22>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	6858      	ldr	r0, [r3, #4]
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	0019      	movs	r1, r3
 80058c6:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058c8:	2308      	movs	r3, #8
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	db66      	blt.n	80059a0 <prvProcessReceivedCommands+0x10c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058d2:	2308      	movs	r3, #8
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d004      	beq.n	80058ec <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	3304      	adds	r3, #4
 80058e6:	0018      	movs	r0, r3
 80058e8:	f7fe fb9f 	bl	800402a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058ec:	1d3b      	adds	r3, r7, #4
 80058ee:	0018      	movs	r0, r3
 80058f0:	f7ff ff6e 	bl	80057d0 <prvSampleTimeNow>
 80058f4:	0003      	movs	r3, r0
 80058f6:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 80058f8:	2308      	movs	r3, #8
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b09      	cmp	r3, #9
 8005900:	d84f      	bhi.n	80059a2 <prvProcessReceivedCommands+0x10e>
 8005902:	009a      	lsls	r2, r3, #2
 8005904:	4b2e      	ldr	r3, [pc, #184]	; (80059c0 <prvProcessReceivedCommands+0x12c>)
 8005906:	18d3      	adds	r3, r2, r3
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800590c:	2008      	movs	r0, #8
 800590e:	183b      	adds	r3, r7, r0
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	18d1      	adds	r1, r2, r3
 8005918:	183b      	adds	r3, r7, r0
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	6a38      	ldr	r0, [r7, #32]
 8005920:	f7ff ff76 	bl	8005810 <prvInsertTimerInActiveList>
 8005924:	1e03      	subs	r3, r0, #0
 8005926:	d03c      	beq.n	80059a2 <prvProcessReceivedCommands+0x10e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	0010      	movs	r0, r2
 8005930:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d133      	bne.n	80059a2 <prvProcessReceivedCommands+0x10e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800593a:	2308      	movs	r3, #8
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	18d2      	adds	r2, r2, r3
 8005946:	6a38      	ldr	r0, [r7, #32]
 8005948:	2300      	movs	r3, #0
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	2300      	movs	r3, #0
 800594e:	2100      	movs	r1, #0
 8005950:	f7ff fe40 	bl	80055d4 <xTimerGenericCommand>
 8005954:	0003      	movs	r3, r0
 8005956:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d121      	bne.n	80059a2 <prvProcessReceivedCommands+0x10e>
 800595e:	b672      	cpsid	i
 8005960:	e7fe      	b.n	8005960 <prvProcessReceivedCommands+0xcc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005962:	2308      	movs	r3, #8
 8005964:	18fb      	adds	r3, r7, r3
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <prvProcessReceivedCommands+0xe4>
 8005974:	b672      	cpsid	i
 8005976:	e7fe      	b.n	8005976 <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	18d1      	adds	r1, r2, r3
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	6a38      	ldr	r0, [r7, #32]
 8005986:	f7ff ff43 	bl	8005810 <prvInsertTimerInActiveList>
					break;
 800598a:	e00a      	b.n	80059a2 <prvProcessReceivedCommands+0x10e>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	222c      	movs	r2, #44	; 0x2c
 8005990:	5c9b      	ldrb	r3, [r3, r2]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d105      	bne.n	80059a2 <prvProcessReceivedCommands+0x10e>
						{
							vPortFree( pxTimer );
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	0018      	movs	r0, r3
 800599a:	f000 fa87 	bl	8005eac <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800599e:	e000      	b.n	80059a2 <prvProcessReceivedCommands+0x10e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80059a0:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059a2:	4b08      	ldr	r3, [pc, #32]	; (80059c4 <prvProcessReceivedCommands+0x130>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2208      	movs	r2, #8
 80059a8:	18b9      	adds	r1, r7, r2
 80059aa:	2200      	movs	r2, #0
 80059ac:	0018      	movs	r0, r3
 80059ae:	f7fe fd5f 	bl	8004470 <xQueueReceive>
 80059b2:	1e03      	subs	r3, r0, #0
 80059b4:	d000      	beq.n	80059b8 <prvProcessReceivedCommands+0x124>
 80059b6:	e771      	b.n	800589c <prvProcessReceivedCommands+0x8>
	}
}
 80059b8:	46c0      	nop			; (mov r8, r8)
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b00a      	add	sp, #40	; 0x28
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	0800773c 	.word	0x0800773c
 80059c4:	20001030 	.word	0x20001030

080059c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059ce:	e03e      	b.n	8005a4e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059d0:	4b28      	ldr	r3, [pc, #160]	; (8005a74 <prvSwitchTimerLists+0xac>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059da:	4b26      	ldr	r3, [pc, #152]	; (8005a74 <prvSwitchTimerLists+0xac>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3304      	adds	r3, #4
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7fe fb1e 	bl	800402a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	0010      	movs	r0, r2
 80059f6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d126      	bne.n	8005a4e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	18d3      	adds	r3, r2, r3
 8005a08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d90e      	bls.n	8005a30 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a1e:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <prvSwitchTimerLists+0xac>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3304      	adds	r3, #4
 8005a26:	0019      	movs	r1, r3
 8005a28:	0010      	movs	r0, r2
 8005a2a:	f7fe fac8 	bl	8003fbe <vListInsert>
 8005a2e:	e00e      	b.n	8005a4e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	2300      	movs	r3, #0
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	f7ff fdca 	bl	80055d4 <xTimerGenericCommand>
 8005a40:	0003      	movs	r3, r0
 8005a42:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <prvSwitchTimerLists+0x86>
 8005a4a:	b672      	cpsid	i
 8005a4c:	e7fe      	b.n	8005a4c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a4e:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <prvSwitchTimerLists+0xac>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1bb      	bne.n	80059d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a58:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <prvSwitchTimerLists+0xac>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <prvSwitchTimerLists+0xb0>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4b04      	ldr	r3, [pc, #16]	; (8005a74 <prvSwitchTimerLists+0xac>)
 8005a64:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8005a66:	4b04      	ldr	r3, [pc, #16]	; (8005a78 <prvSwitchTimerLists+0xb0>)
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	601a      	str	r2, [r3, #0]
}
 8005a6c:	46c0      	nop			; (mov r8, r8)
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	b006      	add	sp, #24
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20001028 	.word	0x20001028
 8005a78:	2000102c 	.word	0x2000102c

08005a7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a82:	f000 f8d5 	bl	8005c30 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a86:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <prvCheckForValidListAndQueue+0x68>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d124      	bne.n	8005ad8 <prvCheckForValidListAndQueue+0x5c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a8e:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <prvCheckForValidListAndQueue+0x6c>)
 8005a90:	0018      	movs	r0, r3
 8005a92:	f7fe fa49 	bl	8003f28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a96:	4b15      	ldr	r3, [pc, #84]	; (8005aec <prvCheckForValidListAndQueue+0x70>)
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f7fe fa45 	bl	8003f28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a9e:	4b14      	ldr	r3, [pc, #80]	; (8005af0 <prvCheckForValidListAndQueue+0x74>)
 8005aa0:	4a11      	ldr	r2, [pc, #68]	; (8005ae8 <prvCheckForValidListAndQueue+0x6c>)
 8005aa2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005aa4:	4b13      	ldr	r3, [pc, #76]	; (8005af4 <prvCheckForValidListAndQueue+0x78>)
 8005aa6:	4a11      	ldr	r2, [pc, #68]	; (8005aec <prvCheckForValidListAndQueue+0x70>)
 8005aa8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005aaa:	4913      	ldr	r1, [pc, #76]	; (8005af8 <prvCheckForValidListAndQueue+0x7c>)
 8005aac:	4a13      	ldr	r2, [pc, #76]	; (8005afc <prvCheckForValidListAndQueue+0x80>)
 8005aae:	2300      	movs	r3, #0
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	000b      	movs	r3, r1
 8005ab4:	2110      	movs	r1, #16
 8005ab6:	200a      	movs	r0, #10
 8005ab8:	f7fe fb33 	bl	8004122 <xQueueGenericCreateStatic>
 8005abc:	0002      	movs	r2, r0
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <prvCheckForValidListAndQueue+0x68>)
 8005ac0:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ac2:	4b08      	ldr	r3, [pc, #32]	; (8005ae4 <prvCheckForValidListAndQueue+0x68>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d006      	beq.n	8005ad8 <prvCheckForValidListAndQueue+0x5c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005aca:	4b06      	ldr	r3, [pc, #24]	; (8005ae4 <prvCheckForValidListAndQueue+0x68>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a0c      	ldr	r2, [pc, #48]	; (8005b00 <prvCheckForValidListAndQueue+0x84>)
 8005ad0:	0011      	movs	r1, r2
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f7fe fe9e 	bl	8004814 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ad8:	f000 f8bc 	bl	8005c54 <vPortExitCritical>
}
 8005adc:	46c0      	nop			; (mov r8, r8)
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			; (mov r8, r8)
 8005ae4:	20001030 	.word	0x20001030
 8005ae8:	20001000 	.word	0x20001000
 8005aec:	20001014 	.word	0x20001014
 8005af0:	20001028 	.word	0x20001028
 8005af4:	2000102c 	.word	0x2000102c
 8005af8:	200010dc 	.word	0x200010dc
 8005afc:	2000103c 	.word	0x2000103c
 8005b00:	080061c4 	.word	0x080061c4

08005b04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3b04      	subs	r3, #4
 8005b14:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2280      	movs	r2, #128	; 0x80
 8005b1a:	0452      	lsls	r2, r2, #17
 8005b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3b04      	subs	r3, #4
 8005b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	3b04      	subs	r3, #4
 8005b2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b30:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <pxPortInitialiseStack+0x50>)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3b14      	subs	r3, #20
 8005b3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3b20      	subs	r3, #32
 8005b46:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b48:	68fb      	ldr	r3, [r7, #12]
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b004      	add	sp, #16
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	08005b59 	.word	0x08005b59

08005b58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b62:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <prvTaskExitError+0x28>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3301      	adds	r3, #1
 8005b68:	d001      	beq.n	8005b6e <prvTaskExitError+0x16>
 8005b6a:	b672      	cpsid	i
 8005b6c:	e7fe      	b.n	8005b6c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005b6e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005b70:	46c0      	nop			; (mov r8, r8)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0fc      	beq.n	8005b72 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b78:	46c0      	nop			; (mov r8, r8)
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	b002      	add	sp, #8
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000018 	.word	0x20000018

08005b84 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005b88:	46c0      	nop			; (mov r8, r8)
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
	...

08005b90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005b90:	4a0b      	ldr	r2, [pc, #44]	; (8005bc0 <pxCurrentTCBConst2>)
 8005b92:	6813      	ldr	r3, [r2, #0]
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	3020      	adds	r0, #32
 8005b98:	f380 8809 	msr	PSP, r0
 8005b9c:	2002      	movs	r0, #2
 8005b9e:	f380 8814 	msr	CONTROL, r0
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005ba8:	46ae      	mov	lr, r5
 8005baa:	bc08      	pop	{r3}
 8005bac:	bc04      	pop	{r2}
 8005bae:	b662      	cpsie	i
 8005bb0:	4718      	bx	r3
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	46c0      	nop			; (mov r8, r8)
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	46c0      	nop			; (mov r8, r8)
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	46c0      	nop			; (mov r8, r8)
 8005bbe:	46c0      	nop			; (mov r8, r8)

08005bc0 <pxCurrentTCBConst2>:
 8005bc0:	20000b00 	.word	0x20000b00
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	46c0      	nop			; (mov r8, r8)

08005bc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005bcc:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <xPortStartScheduler+0x40>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <xPortStartScheduler+0x40>)
 8005bd2:	21ff      	movs	r1, #255	; 0xff
 8005bd4:	0409      	lsls	r1, r1, #16
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <xPortStartScheduler+0x40>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b0a      	ldr	r3, [pc, #40]	; (8005c08 <xPortStartScheduler+0x40>)
 8005be0:	21ff      	movs	r1, #255	; 0xff
 8005be2:	0609      	lsls	r1, r1, #24
 8005be4:	430a      	orrs	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005be8:	f000 f898 	bl	8005d1c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bec:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <xPortStartScheduler+0x44>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005bf2:	f7ff ffcd 	bl	8005b90 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bf6:	f7ff f9b5 	bl	8004f64 <vTaskSwitchContext>
	prvTaskExitError();
 8005bfa:	f7ff ffad 	bl	8005b58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	0018      	movs	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	e000ed20 	.word	0xe000ed20
 8005c0c:	20000018 	.word	0x20000018

08005c10 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <vPortYield+0x1c>)
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	0552      	lsls	r2, r2, #21
 8005c1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005c1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005c20:	f3bf 8f6f 	isb	sy
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	e000ed04 	.word	0xe000ed04

08005c30 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005c34:	b672      	cpsid	i
    uxCriticalNesting++;
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <vPortEnterCritical+0x20>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <vPortEnterCritical+0x20>)
 8005c3e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005c40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005c44:	f3bf 8f6f 	isb	sy
}
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	46c0      	nop			; (mov r8, r8)
 8005c50:	20000018 	.word	0x20000018

08005c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c58:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <vPortExitCritical+0x2c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <vPortExitCritical+0x10>
 8005c60:	b672      	cpsid	i
 8005c62:	e7fe      	b.n	8005c62 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <vPortExitCritical+0x2c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	1e5a      	subs	r2, r3, #1
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <vPortExitCritical+0x2c>)
 8005c6c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005c6e:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <vPortExitCritical+0x2c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d100      	bne.n	8005c78 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005c76:	b662      	cpsie	i
    }
}
 8005c78:	46c0      	nop			; (mov r8, r8)
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	20000018 	.word	0x20000018

08005c84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005c84:	f3ef 8010 	mrs	r0, PRIMASK
 8005c88:	b672      	cpsid	i
 8005c8a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005c8c:	46c0      	nop			; (mov r8, r8)
 8005c8e:	0018      	movs	r0, r3

08005c90 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005c90:	f380 8810 	msr	PRIMASK, r0
 8005c94:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005c96:	46c0      	nop			; (mov r8, r8)
	...

08005ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ca0:	f3ef 8009 	mrs	r0, PSP
 8005ca4:	4b0e      	ldr	r3, [pc, #56]	; (8005ce0 <pxCurrentTCBConst>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	3820      	subs	r0, #32
 8005caa:	6010      	str	r0, [r2, #0]
 8005cac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005cae:	4644      	mov	r4, r8
 8005cb0:	464d      	mov	r5, r9
 8005cb2:	4656      	mov	r6, sl
 8005cb4:	465f      	mov	r7, fp
 8005cb6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005cb8:	b508      	push	{r3, lr}
 8005cba:	b672      	cpsid	i
 8005cbc:	f7ff f952 	bl	8004f64 <vTaskSwitchContext>
 8005cc0:	b662      	cpsie	i
 8005cc2:	bc0c      	pop	{r2, r3}
 8005cc4:	6811      	ldr	r1, [r2, #0]
 8005cc6:	6808      	ldr	r0, [r1, #0]
 8005cc8:	3010      	adds	r0, #16
 8005cca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005ccc:	46a0      	mov	r8, r4
 8005cce:	46a9      	mov	r9, r5
 8005cd0:	46b2      	mov	sl, r6
 8005cd2:	46bb      	mov	fp, r7
 8005cd4:	f380 8809 	msr	PSP, r0
 8005cd8:	3820      	subs	r0, #32
 8005cda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005cdc:	4718      	bx	r3
 8005cde:	46c0      	nop			; (mov r8, r8)

08005ce0 <pxCurrentTCBConst>:
 8005ce0:	20000b00 	.word	0x20000b00
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005ce4:	46c0      	nop			; (mov r8, r8)
 8005ce6:	46c0      	nop			; (mov r8, r8)

08005ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cee:	f7ff ffc9 	bl	8005c84 <ulSetInterruptMaskFromISR>
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cf6:	f7ff f881 	bl	8004dfc <xTaskIncrementTick>
 8005cfa:	1e03      	subs	r3, r0, #0
 8005cfc:	d003      	beq.n	8005d06 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <SysTick_Handler+0x30>)
 8005d00:	2280      	movs	r2, #128	; 0x80
 8005d02:	0552      	lsls	r2, r2, #21
 8005d04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f7ff ffc1 	bl	8005c90 <vClearInterruptMaskFromISR>
}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b002      	add	sp, #8
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <prvSetupTimerInterrupt+0x34>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005d26:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <prvSetupTimerInterrupt+0x38>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <prvSetupTimerInterrupt+0x3c>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	23fa      	movs	r3, #250	; 0xfa
 8005d32:	0099      	lsls	r1, r3, #2
 8005d34:	0010      	movs	r0, r2
 8005d36:	f7fa f9e7 	bl	8000108 <__udivsi3>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <prvSetupTimerInterrupt+0x40>)
 8005d40:	3a01      	subs	r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005d44:	4b02      	ldr	r3, [pc, #8]	; (8005d50 <prvSetupTimerInterrupt+0x34>)
 8005d46:	2207      	movs	r2, #7
 8005d48:	601a      	str	r2, [r3, #0]
}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	e000e010 	.word	0xe000e010
 8005d54:	e000e018 	.word	0xe000e018
 8005d58:	20000010 	.word	0x20000010
 8005d5c:	e000e014 	.word	0xe000e014

08005d60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8005d6c:	f7fe ffa0 	bl	8004cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d70:	4b49      	ldr	r3, [pc, #292]	; (8005e98 <pvPortMalloc+0x138>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d78:	f000 f8e0 	bl	8005f3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d7c:	4b47      	ldr	r3, [pc, #284]	; (8005e9c <pvPortMalloc+0x13c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4013      	ands	r3, r2
 8005d84:	d000      	beq.n	8005d88 <pvPortMalloc+0x28>
 8005d86:	e079      	b.n	8005e7c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d012      	beq.n	8005db4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8005d8e:	2208      	movs	r2, #8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	189b      	adds	r3, r3, r2
 8005d94:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2207      	movs	r2, #7
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d00a      	beq.n	8005db4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2207      	movs	r2, #7
 8005da2:	4393      	bics	r3, r2
 8005da4:	3308      	adds	r3, #8
 8005da6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2207      	movs	r2, #7
 8005dac:	4013      	ands	r3, r2
 8005dae:	d001      	beq.n	8005db4 <pvPortMalloc+0x54>
 8005db0:	b672      	cpsid	i
 8005db2:	e7fe      	b.n	8005db2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d060      	beq.n	8005e7c <pvPortMalloc+0x11c>
 8005dba:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <pvPortMalloc+0x140>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d85b      	bhi.n	8005e7c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005dc4:	4b37      	ldr	r3, [pc, #220]	; (8005ea4 <pvPortMalloc+0x144>)
 8005dc6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005dc8:	4b36      	ldr	r3, [pc, #216]	; (8005ea4 <pvPortMalloc+0x144>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dce:	e004      	b.n	8005dda <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d903      	bls.n	8005dec <pvPortMalloc+0x8c>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f1      	bne.n	8005dd0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005dec:	4b2a      	ldr	r3, [pc, #168]	; (8005e98 <pvPortMalloc+0x138>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d042      	beq.n	8005e7c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2208      	movs	r2, #8
 8005dfc:	189b      	adds	r3, r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	2308      	movs	r3, #8
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d916      	bls.n	8005e46 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	18d3      	adds	r3, r2, r3
 8005e1e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2207      	movs	r2, #7
 8005e24:	4013      	ands	r3, r2
 8005e26:	d001      	beq.n	8005e2c <pvPortMalloc+0xcc>
 8005e28:	b672      	cpsid	i
 8005e2a:	e7fe      	b.n	8005e2a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	1ad2      	subs	r2, r2, r3
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	0018      	movs	r0, r3
 8005e42:	f000 f8db 	bl	8005ffc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e46:	4b16      	ldr	r3, [pc, #88]	; (8005ea0 <pvPortMalloc+0x140>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	1ad2      	subs	r2, r2, r3
 8005e50:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <pvPortMalloc+0x140>)
 8005e52:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e54:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <pvPortMalloc+0x140>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	4b13      	ldr	r3, [pc, #76]	; (8005ea8 <pvPortMalloc+0x148>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d203      	bcs.n	8005e68 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e60:	4b0f      	ldr	r3, [pc, #60]	; (8005ea0 <pvPortMalloc+0x140>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <pvPortMalloc+0x148>)
 8005e66:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <pvPortMalloc+0x13c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e7c:	f7fe ff24 	bl	8004cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2207      	movs	r2, #7
 8005e84:	4013      	ands	r3, r2
 8005e86:	d001      	beq.n	8005e8c <pvPortMalloc+0x12c>
 8005e88:	b672      	cpsid	i
 8005e8a:	e7fe      	b.n	8005e8a <pvPortMalloc+0x12a>
	return pvReturn;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
}
 8005e8e:	0018      	movs	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b006      	add	sp, #24
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	46c0      	nop			; (mov r8, r8)
 8005e98:	20001d34 	.word	0x20001d34
 8005e9c:	20001d40 	.word	0x20001d40
 8005ea0:	20001d38 	.word	0x20001d38
 8005ea4:	20001d2c 	.word	0x20001d2c
 8005ea8:	20001d3c 	.word	0x20001d3c

08005eac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d035      	beq.n	8005f2a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	425b      	negs	r3, r3
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	18d3      	adds	r3, r2, r3
 8005ec6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	4b18      	ldr	r3, [pc, #96]	; (8005f34 <vPortFree+0x88>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d101      	bne.n	8005edc <vPortFree+0x30>
 8005ed8:	b672      	cpsid	i
 8005eda:	e7fe      	b.n	8005eda <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <vPortFree+0x3c>
 8005ee4:	b672      	cpsid	i
 8005ee6:	e7fe      	b.n	8005ee6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <vPortFree+0x88>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	d01a      	beq.n	8005f2a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d116      	bne.n	8005f2a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <vPortFree+0x88>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	43db      	mvns	r3, r3
 8005f06:	401a      	ands	r2, r3
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f0c:	f7fe fed0 	bl	8004cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	4b08      	ldr	r3, [pc, #32]	; (8005f38 <vPortFree+0x8c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	18d2      	adds	r2, r2, r3
 8005f1a:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <vPortFree+0x8c>)
 8005f1c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	0018      	movs	r0, r3
 8005f22:	f000 f86b 	bl	8005ffc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005f26:	f7fe fecf 	bl	8004cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b004      	add	sp, #16
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	20001d40 	.word	0x20001d40
 8005f38:	20001d38 	.word	0x20001d38

08005f3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f42:	23c0      	movs	r3, #192	; 0xc0
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f48:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <prvHeapInit+0xa8>)
 8005f4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2207      	movs	r2, #7
 8005f50:	4013      	ands	r3, r2
 8005f52:	d00c      	beq.n	8005f6e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3307      	adds	r3, #7
 8005f58:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2207      	movs	r2, #7
 8005f5e:	4393      	bics	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1ad2      	subs	r2, r2, r3
 8005f68:	4b1e      	ldr	r3, [pc, #120]	; (8005fe4 <prvHeapInit+0xa8>)
 8005f6a:	18d3      	adds	r3, r2, r3
 8005f6c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f72:	4b1d      	ldr	r3, [pc, #116]	; (8005fe8 <prvHeapInit+0xac>)
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f78:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <prvHeapInit+0xac>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f86:	2208      	movs	r2, #8
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	1a9b      	subs	r3, r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2207      	movs	r2, #7
 8005f92:	4393      	bics	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4b14      	ldr	r3, [pc, #80]	; (8005fec <prvHeapInit+0xb0>)
 8005f9a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005f9c:	4b13      	ldr	r3, [pc, #76]	; (8005fec <prvHeapInit+0xb0>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fa4:	4b11      	ldr	r3, [pc, #68]	; (8005fec <prvHeapInit+0xb0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	1ad2      	subs	r2, r2, r3
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fba:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <prvHeapInit+0xb0>)
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <prvHeapInit+0xb4>)
 8005fc8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <prvHeapInit+0xb8>)
 8005fd0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <prvHeapInit+0xbc>)
 8005fd4:	2280      	movs	r2, #128	; 0x80
 8005fd6:	0612      	lsls	r2, r2, #24
 8005fd8:	601a      	str	r2, [r3, #0]
}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b004      	add	sp, #16
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	2000112c 	.word	0x2000112c
 8005fe8:	20001d2c 	.word	0x20001d2c
 8005fec:	20001d34 	.word	0x20001d34
 8005ff0:	20001d3c 	.word	0x20001d3c
 8005ff4:	20001d38 	.word	0x20001d38
 8005ff8:	20001d40 	.word	0x20001d40

08005ffc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006004:	4b27      	ldr	r3, [pc, #156]	; (80060a4 <prvInsertBlockIntoFreeList+0xa8>)
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	e002      	b.n	8006010 <prvInsertBlockIntoFreeList+0x14>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	429a      	cmp	r2, r3
 8006018:	d8f7      	bhi.n	800600a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	18d3      	adds	r3, r2, r3
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	429a      	cmp	r2, r3
 800602a:	d108      	bne.n	800603e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	18d2      	adds	r2, r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	18d2      	adds	r2, r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	429a      	cmp	r2, r3
 8006050:	d118      	bne.n	8006084 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <prvInsertBlockIntoFreeList+0xac>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d00d      	beq.n	800607a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	18d2      	adds	r2, r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	e008      	b.n	800608c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800607a:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <prvInsertBlockIntoFreeList+0xac>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	e003      	b.n	800608c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d002      	beq.n	800609a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800609a:	46c0      	nop			; (mov r8, r8)
 800609c:	46bd      	mov	sp, r7
 800609e:	b004      	add	sp, #16
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	46c0      	nop			; (mov r8, r8)
 80060a4:	20001d2c 	.word	0x20001d2c
 80060a8:	20001d34 	.word	0x20001d34

080060ac <__libc_init_array>:
 80060ac:	b570      	push	{r4, r5, r6, lr}
 80060ae:	2600      	movs	r6, #0
 80060b0:	4d0c      	ldr	r5, [pc, #48]	; (80060e4 <__libc_init_array+0x38>)
 80060b2:	4c0d      	ldr	r4, [pc, #52]	; (80060e8 <__libc_init_array+0x3c>)
 80060b4:	1b64      	subs	r4, r4, r5
 80060b6:	10a4      	asrs	r4, r4, #2
 80060b8:	42a6      	cmp	r6, r4
 80060ba:	d109      	bne.n	80060d0 <__libc_init_array+0x24>
 80060bc:	2600      	movs	r6, #0
 80060be:	f000 f82b 	bl	8006118 <_init>
 80060c2:	4d0a      	ldr	r5, [pc, #40]	; (80060ec <__libc_init_array+0x40>)
 80060c4:	4c0a      	ldr	r4, [pc, #40]	; (80060f0 <__libc_init_array+0x44>)
 80060c6:	1b64      	subs	r4, r4, r5
 80060c8:	10a4      	asrs	r4, r4, #2
 80060ca:	42a6      	cmp	r6, r4
 80060cc:	d105      	bne.n	80060da <__libc_init_array+0x2e>
 80060ce:	bd70      	pop	{r4, r5, r6, pc}
 80060d0:	00b3      	lsls	r3, r6, #2
 80060d2:	58eb      	ldr	r3, [r5, r3]
 80060d4:	4798      	blx	r3
 80060d6:	3601      	adds	r6, #1
 80060d8:	e7ee      	b.n	80060b8 <__libc_init_array+0xc>
 80060da:	00b3      	lsls	r3, r6, #2
 80060dc:	58eb      	ldr	r3, [r5, r3]
 80060de:	4798      	blx	r3
 80060e0:	3601      	adds	r6, #1
 80060e2:	e7f2      	b.n	80060ca <__libc_init_array+0x1e>
 80060e4:	08007764 	.word	0x08007764
 80060e8:	08007764 	.word	0x08007764
 80060ec:	08007764 	.word	0x08007764
 80060f0:	08007768 	.word	0x08007768

080060f4 <memcpy>:
 80060f4:	2300      	movs	r3, #0
 80060f6:	b510      	push	{r4, lr}
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d100      	bne.n	80060fe <memcpy+0xa>
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	5ccc      	ldrb	r4, [r1, r3]
 8006100:	54c4      	strb	r4, [r0, r3]
 8006102:	3301      	adds	r3, #1
 8006104:	e7f8      	b.n	80060f8 <memcpy+0x4>

08006106 <memset>:
 8006106:	0003      	movs	r3, r0
 8006108:	1812      	adds	r2, r2, r0
 800610a:	4293      	cmp	r3, r2
 800610c:	d100      	bne.n	8006110 <memset+0xa>
 800610e:	4770      	bx	lr
 8006110:	7019      	strb	r1, [r3, #0]
 8006112:	3301      	adds	r3, #1
 8006114:	e7f9      	b.n	800610a <memset+0x4>
	...

08006118 <_init>:
 8006118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800611e:	bc08      	pop	{r3}
 8006120:	469e      	mov	lr, r3
 8006122:	4770      	bx	lr

08006124 <_fini>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	46c0      	nop			; (mov r8, r8)
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr
